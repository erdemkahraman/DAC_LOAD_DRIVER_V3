
DAC_LOAD_DRIVER_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a314  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ca4  0800a4c8  0800a4c8  0001a4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d16c  0800d16c  00020324  2**0
                  CONTENTS
  4 .ARM          00000008  0800d16c  0800d16c  0001d16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d174  0800d174  00020324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d174  0800d174  0001d174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d178  0800d178  0001d178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000324  20000000  0800d17c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a54  20000324  0800d4a0  00020324  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d78  0800d4a0  00020d78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016716  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003012  00000000  00000000  00036a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  00039a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e10  00000000  00000000  0003a9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025e26  00000000  00000000  0003b800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001014d  00000000  00000000  00061626  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcc9a  00000000  00000000  00071773  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e40d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d20  00000000  00000000  0014e488  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000324 	.word	0x20000324
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a4ac 	.word	0x0800a4ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000328 	.word	0x20000328
 80001ec:	0800a4ac 	.word	0x0800a4ac

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <mainalgor>:
DAC_HandleTypeDef hdac;
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

void mainalgor(void)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0

	 HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	48a3      	ldr	r0, [pc, #652]	; (8001240 <mainalgor+0x298>)
 8000fb2:	f002 ff68 	bl	8003e86 <HAL_DAC_Start>
	 HAL_ADC_Start(&hadc1);
 8000fb6:	48a3      	ldr	r0, [pc, #652]	; (8001244 <mainalgor+0x29c>)
 8000fb8:	f002 fad8 	bl	800356c <HAL_ADC_Start>
	 adcval = HAL_ADC_GetValue(&hadc1);
 8000fbc:	48a1      	ldr	r0, [pc, #644]	; (8001244 <mainalgor+0x29c>)
 8000fbe:	f002 fc1f 	bl	8003800 <HAL_ADC_GetValue>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	4ba0      	ldr	r3, [pc, #640]	; (8001248 <mainalgor+0x2a0>)
 8000fc6:	601a      	str	r2, [r3, #0]
	 vtemp = adcval*0.806;
 8000fc8:	4b9f      	ldr	r3, [pc, #636]	; (8001248 <mainalgor+0x2a0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff faa9 	bl	8000524 <__aeabi_ui2d>
 8000fd2:	a38b      	add	r3, pc, #556	; (adr r3, 8001200 <mainalgor+0x258>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff fb1e 	bl	8000618 <__aeabi_dmul>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	460c      	mov	r4, r1
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	4621      	mov	r1, r4
 8000fe4:	f7ff fe10 	bl	8000c08 <__aeabi_d2f>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	4b98      	ldr	r3, [pc, #608]	; (800124c <mainalgor+0x2a4>)
 8000fec:	601a      	str	r2, [r3, #0]
	 temp = ((13.582 - sqrt((13.582*13.582)+(4*0.00433)*(2230.8-vtemp)))/(2*-0.00433))+30;
 8000fee:	4b97      	ldr	r3, [pc, #604]	; (800124c <mainalgor+0x2a4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fab8 	bl	8000568 <__aeabi_f2d>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	460c      	mov	r4, r1
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4623      	mov	r3, r4
 8001000:	a181      	add	r1, pc, #516	; (adr r1, 8001208 <mainalgor+0x260>)
 8001002:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001006:	f7ff f94f 	bl	80002a8 <__aeabi_dsub>
 800100a:	4603      	mov	r3, r0
 800100c:	460c      	mov	r4, r1
 800100e:	4618      	mov	r0, r3
 8001010:	4621      	mov	r1, r4
 8001012:	a37f      	add	r3, pc, #508	; (adr r3, 8001210 <mainalgor+0x268>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff fafe 	bl	8000618 <__aeabi_dmul>
 800101c:	4603      	mov	r3, r0
 800101e:	460c      	mov	r4, r1
 8001020:	4618      	mov	r0, r3
 8001022:	4621      	mov	r1, r4
 8001024:	a37c      	add	r3, pc, #496	; (adr r3, 8001218 <mainalgor+0x270>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	f7ff f93f 	bl	80002ac <__adddf3>
 800102e:	4603      	mov	r3, r0
 8001030:	460c      	mov	r4, r1
 8001032:	ec44 3b17 	vmov	d7, r3, r4
 8001036:	eeb0 0a47 	vmov.f32	s0, s14
 800103a:	eef0 0a67 	vmov.f32	s1, s15
 800103e:	f009 f929 	bl	800a294 <sqrt>
 8001042:	ec54 3b10 	vmov	r3, r4, d0
 8001046:	461a      	mov	r2, r3
 8001048:	4623      	mov	r3, r4
 800104a:	a175      	add	r1, pc, #468	; (adr r1, 8001220 <mainalgor+0x278>)
 800104c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001050:	f7ff f92a 	bl	80002a8 <__aeabi_dsub>
 8001054:	4603      	mov	r3, r0
 8001056:	460c      	mov	r4, r1
 8001058:	4618      	mov	r0, r3
 800105a:	4621      	mov	r1, r4
 800105c:	a372      	add	r3, pc, #456	; (adr r3, 8001228 <mainalgor+0x280>)
 800105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001062:	f7ff fc03 	bl	800086c <__aeabi_ddiv>
 8001066:	4603      	mov	r3, r0
 8001068:	460c      	mov	r4, r1
 800106a:	4618      	mov	r0, r3
 800106c:	4621      	mov	r1, r4
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	4b77      	ldr	r3, [pc, #476]	; (8001250 <mainalgor+0x2a8>)
 8001074:	f7ff f91a 	bl	80002ac <__adddf3>
 8001078:	4603      	mov	r3, r0
 800107a:	460c      	mov	r4, r1
 800107c:	4618      	mov	r0, r3
 800107e:	4621      	mov	r1, r4
 8001080:	f7ff fdc2 	bl	8000c08 <__aeabi_d2f>
 8001084:	4602      	mov	r2, r0
 8001086:	4b73      	ldr	r3, [pc, #460]	; (8001254 <mainalgor+0x2ac>)
 8001088:	601a      	str	r2, [r3, #0]
	 data2 = temp;
 800108a:	4b72      	ldr	r3, [pc, #456]	; (8001254 <mainalgor+0x2ac>)
 800108c:	edd3 7a00 	vldr	s15, [r3]
 8001090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001094:	ee17 2a90 	vmov	r2, s15
 8001098:	4b6f      	ldr	r3, [pc, #444]	; (8001258 <mainalgor+0x2b0>)
 800109a:	601a      	str	r2, [r3, #0]
	 HAL_Delay(10);
 800109c:	200a      	movs	r0, #10
 800109e:	f002 f9ff 	bl	80034a0 <HAL_Delay>


	 HAL_ADC_Start(&hadc3);
 80010a2:	486e      	ldr	r0, [pc, #440]	; (800125c <mainalgor+0x2b4>)
 80010a4:	f002 fa62 	bl	800356c <HAL_ADC_Start>

	 		  if(HAL_ADC_PollForConversion(&hadc3, 1) == HAL_OK)
 80010a8:	2101      	movs	r1, #1
 80010aa:	486c      	ldr	r0, [pc, #432]	; (800125c <mainalgor+0x2b4>)
 80010ac:	f002 fb24 	bl	80036f8 <HAL_ADC_PollForConversion>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d13d      	bne.n	8001132 <mainalgor+0x18a>
	 		  {
	 			  rawvoltage = HAL_ADC_GetValue(&hadc3);
 80010b6:	4869      	ldr	r0, [pc, #420]	; (800125c <mainalgor+0x2b4>)
 80010b8:	f002 fba2 	bl	8003800 <HAL_ADC_GetValue>
 80010bc:	ee07 0a90 	vmov	s15, r0
 80010c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010c4:	4b66      	ldr	r3, [pc, #408]	; (8001260 <mainalgor+0x2b8>)
 80010c6:	edc3 7a00 	vstr	s15, [r3]
	 			  realvoltage = (rawvoltage*(3.236/4095))*(50/3.236);
 80010ca:	4b65      	ldr	r3, [pc, #404]	; (8001260 <mainalgor+0x2b8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fa4a 	bl	8000568 <__aeabi_f2d>
 80010d4:	a356      	add	r3, pc, #344	; (adr r3, 8001230 <mainalgor+0x288>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff fa9d 	bl	8000618 <__aeabi_dmul>
 80010de:	4603      	mov	r3, r0
 80010e0:	460c      	mov	r4, r1
 80010e2:	4618      	mov	r0, r3
 80010e4:	4621      	mov	r1, r4
 80010e6:	a354      	add	r3, pc, #336	; (adr r3, 8001238 <mainalgor+0x290>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fa94 	bl	8000618 <__aeabi_dmul>
 80010f0:	4603      	mov	r3, r0
 80010f2:	460c      	mov	r4, r1
 80010f4:	4618      	mov	r0, r3
 80010f6:	4621      	mov	r1, r4
 80010f8:	f7ff fd86 	bl	8000c08 <__aeabi_d2f>
 80010fc:	4602      	mov	r2, r0
 80010fe:	4b59      	ldr	r3, [pc, #356]	; (8001264 <mainalgor+0x2bc>)
 8001100:	601a      	str	r2, [r3, #0]
	 			  resistor = realvoltage/(z/1000);
 8001102:	4b58      	ldr	r3, [pc, #352]	; (8001264 <mainalgor+0x2bc>)
 8001104:	edd3 6a00 	vldr	s13, [r3]
 8001108:	4b57      	ldr	r3, [pc, #348]	; (8001268 <mainalgor+0x2c0>)
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	ed9f 6a57 	vldr	s12, [pc, #348]	; 800126c <mainalgor+0x2c4>
 8001112:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800111a:	4b55      	ldr	r3, [pc, #340]	; (8001270 <mainalgor+0x2c8>)
 800111c:	edc3 7a00 	vstr	s15, [r3]
	 			  // if (z = 0) (resistor = 0);
	 			  data3 = resistor;
 8001120:	4b53      	ldr	r3, [pc, #332]	; (8001270 <mainalgor+0x2c8>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800112a:	ee17 2a90 	vmov	r2, s15
 800112e:	4b51      	ldr	r3, [pc, #324]	; (8001274 <mainalgor+0x2cc>)
 8001130:	601a      	str	r2, [r3, #0]

	 		  }
	 		  HAL_Delay(10);
 8001132:	200a      	movs	r0, #10
 8001134:	f002 f9b4 	bl	80034a0 <HAL_Delay>



	 		 if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)){
 8001138:	2101      	movs	r1, #1
 800113a:	484f      	ldr	r0, [pc, #316]	; (8001278 <mainalgor+0x2d0>)
 800113c:	f003 f926 	bl	800438c <HAL_GPIO_ReadPin>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d037      	beq.n	80011b6 <mainalgor+0x20e>
	 		 		  uint32_t time1=HAL_GetTick();
 8001146:	f002 f99f 	bl	8003488 <HAL_GetTick>
 800114a:	6078      	str	r0, [r7, #4]
	 		 		  while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)){
 800114c:	e02c      	b.n	80011a8 <mainalgor+0x200>
	 		 			  if (HAL_GetTick()-time1 > 300){
 800114e:	f002 f99b 	bl	8003488 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800115c:	d910      	bls.n	8001180 <mainalgor+0x1d8>
	 		 				  time1=HAL_GetTick();
 800115e:	f002 f993 	bl	8003488 <HAL_GetTick>
 8001162:	6078      	str	r0, [r7, #4]
	 		 				  z+=10;
 8001164:	4b40      	ldr	r3, [pc, #256]	; (8001268 <mainalgor+0x2c0>)
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800116e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001172:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <mainalgor+0x2c0>)
 8001174:	edc3 7a00 	vstr	s15, [r3]
	 		 				  HAL_Delay(5);
 8001178:	2005      	movs	r0, #5
 800117a:	f002 f991 	bl	80034a0 <HAL_Delay>
	 		 				  break;
 800117e:	e01a      	b.n	80011b6 <mainalgor+0x20e>
	 		 	   }
	 		 	  if (HAL_GetTick()-time1 > 20) {
 8001180:	f002 f982 	bl	8003488 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b14      	cmp	r3, #20
 800118c:	d90c      	bls.n	80011a8 <mainalgor+0x200>
	 		 	   z += 1;
 800118e:	4b36      	ldr	r3, [pc, #216]	; (8001268 <mainalgor+0x2c0>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001198:	ee77 7a87 	vadd.f32	s15, s15, s14
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <mainalgor+0x2c0>)
 800119e:	edc3 7a00 	vstr	s15, [r3]

	 		 	   HAL_Delay(100);
 80011a2:	2064      	movs	r0, #100	; 0x64
 80011a4:	f002 f97c 	bl	80034a0 <HAL_Delay>
	 		 		  while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)){
 80011a8:	2101      	movs	r1, #1
 80011aa:	4833      	ldr	r0, [pc, #204]	; (8001278 <mainalgor+0x2d0>)
 80011ac:	f003 f8ee 	bl	800438c <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1cb      	bne.n	800114e <mainalgor+0x1a6>
	 		 	   }
	 		 	   }
	 		 	   }

	 		 if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 80011b6:	2102      	movs	r1, #2
 80011b8:	4830      	ldr	r0, [pc, #192]	; (800127c <mainalgor+0x2d4>)
 80011ba:	f003 f8e7 	bl	800438c <HAL_GPIO_ReadPin>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d078      	beq.n	80012b6 <mainalgor+0x30e>
	 					  uint32_t time2=HAL_GetTick();
 80011c4:	f002 f960 	bl	8003488 <HAL_GetTick>
 80011c8:	6038      	str	r0, [r7, #0]
	 					  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 80011ca:	e06d      	b.n	80012a8 <mainalgor+0x300>
	 						  if (HAL_GetTick()-time2 > 300){
 80011cc:	f002 f95c 	bl	8003488 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011da:	d951      	bls.n	8001280 <mainalgor+0x2d8>
	 							  time2=HAL_GetTick();
 80011dc:	f002 f954 	bl	8003488 <HAL_GetTick>
 80011e0:	6038      	str	r0, [r7, #0]
	 							  z-=10;
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <mainalgor+0x2c0>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <mainalgor+0x2c0>)
 80011f2:	edc3 7a00 	vstr	s15, [r3]
	 							  HAL_Delay(5);
 80011f6:	2005      	movs	r0, #5
 80011f8:	f002 f952 	bl	80034a0 <HAL_Delay>
	 							  break;
 80011fc:	e05b      	b.n	80012b6 <mainalgor+0x30e>
 80011fe:	bf00      	nop
 8001200:	83126e98 	.word	0x83126e98
 8001204:	3fe9cac0 	.word	0x3fe9cac0
 8001208:	9999999a 	.word	0x9999999a
 800120c:	40a16d99 	.word	0x40a16d99
 8001210:	8644523f 	.word	0x8644523f
 8001214:	3f91bc55 	.word	0x3f91bc55
 8001218:	2bc72e28 	.word	0x2bc72e28
 800121c:	40670f10 	.word	0x40670f10
 8001220:	e76c8b44 	.word	0xe76c8b44
 8001224:	402b29fb 	.word	0x402b29fb
 8001228:	8644523f 	.word	0x8644523f
 800122c:	bf81bc55 	.word	0xbf81bc55
 8001230:	46f3484c 	.word	0x46f3484c
 8001234:	3f49e4f2 	.word	0x3f49e4f2
 8001238:	5102370f 	.word	0x5102370f
 800123c:	402ee700 	.word	0x402ee700
 8001240:	20000820 	.word	0x20000820
 8001244:	20000790 	.word	0x20000790
 8001248:	20000848 	.word	0x20000848
 800124c:	20000840 	.word	0x20000840
 8001250:	403e0000 	.word	0x403e0000
 8001254:	20000784 	.word	0x20000784
 8001258:	20000780 	.word	0x20000780
 800125c:	200007d8 	.word	0x200007d8
 8001260:	20000844 	.word	0x20000844
 8001264:	20000788 	.word	0x20000788
 8001268:	2000078c 	.word	0x2000078c
 800126c:	447a0000 	.word	0x447a0000
 8001270:	20000838 	.word	0x20000838
 8001274:	2000083c 	.word	0x2000083c
 8001278:	40020400 	.word	0x40020400
 800127c:	40020800 	.word	0x40020800
	 				   }
	 				 if (HAL_GetTick()-time2 > 20) {
 8001280:	f002 f902 	bl	8003488 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b14      	cmp	r3, #20
 800128c:	d90c      	bls.n	80012a8 <mainalgor+0x300>
	 				   z -= 1;
 800128e:	4b55      	ldr	r3, [pc, #340]	; (80013e4 <mainalgor+0x43c>)
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001298:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800129c:	4b51      	ldr	r3, [pc, #324]	; (80013e4 <mainalgor+0x43c>)
 800129e:	edc3 7a00 	vstr	s15, [r3]

	 				   HAL_Delay(100);
 80012a2:	2064      	movs	r0, #100	; 0x64
 80012a4:	f002 f8fc 	bl	80034a0 <HAL_Delay>
	 					  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 80012a8:	2102      	movs	r1, #2
 80012aa:	484f      	ldr	r0, [pc, #316]	; (80013e8 <mainalgor+0x440>)
 80012ac:	f003 f86e 	bl	800438c <HAL_GPIO_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d18a      	bne.n	80011cc <mainalgor+0x224>
	 				   }
	 				   }
	 				   }

	 		y = z*20;
 80012b6:	4b4b      	ldr	r3, [pc, #300]	; (80013e4 <mainalgor+0x43c>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80012c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c4:	4b49      	ldr	r3, [pc, #292]	; (80013ec <mainalgor+0x444>)
 80012c6:	edc3 7a00 	vstr	s15, [r3]
	 		x = y/((3.3/4096)*1000);
 80012ca:	4b48      	ldr	r3, [pc, #288]	; (80013ec <mainalgor+0x444>)
 80012cc:	ed93 7a00 	vldr	s14, [r3]
 80012d0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80013f0 <mainalgor+0x448>
 80012d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d8:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <mainalgor+0x44c>)
 80012da:	edc3 7a00 	vstr	s15, [r3]

	 		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, x);
 80012de:	4b45      	ldr	r3, [pc, #276]	; (80013f4 <mainalgor+0x44c>)
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e8:	ee17 3a90 	vmov	r3, s15
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	4841      	ldr	r0, [pc, #260]	; (80013f8 <mainalgor+0x450>)
 80012f2:	f002 fe7b 	bl	8003fec <HAL_DAC_SetValue>

	 		data1 = z;
 80012f6:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <mainalgor+0x43c>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001300:	ee17 2a90 	vmov	r2, s15
 8001304:	4b3d      	ldr	r3, [pc, #244]	; (80013fc <mainalgor+0x454>)
 8001306:	601a      	str	r2, [r3, #0]

	 		if(z>100) (z=100);
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <mainalgor+0x43c>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001400 <mainalgor+0x458>
 8001312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131a:	dd02      	ble.n	8001322 <mainalgor+0x37a>
 800131c:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <mainalgor+0x43c>)
 800131e:	4a39      	ldr	r2, [pc, #228]	; (8001404 <mainalgor+0x45c>)
 8001320:	601a      	str	r2, [r3, #0]
	 		if(x>4095) (x=4095);
 8001322:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <mainalgor+0x44c>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001408 <mainalgor+0x460>
 800132c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001334:	dd02      	ble.n	800133c <mainalgor+0x394>
 8001336:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <mainalgor+0x44c>)
 8001338:	4a34      	ldr	r2, [pc, #208]	; (800140c <mainalgor+0x464>)
 800133a:	601a      	str	r2, [r3, #0]
	 		if(z<0)(z=0);
 800133c:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <mainalgor+0x43c>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134a:	d503      	bpl.n	8001354 <mainalgor+0x3ac>
 800134c:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <mainalgor+0x43c>)
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	601a      	str	r2, [r3, #0]

	 		SSD1306_GotoXY (1, 1);
 8001354:	2101      	movs	r1, #1
 8001356:	2001      	movs	r0, #1
 8001358:	f001 f99e 	bl	8002698 <SSD1306_GotoXY>

	 			  sprintf(yazi4,"Curr| Res %d          ",data3);
 800135c:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <mainalgor+0x468>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	492c      	ldr	r1, [pc, #176]	; (8001414 <mainalgor+0x46c>)
 8001364:	482c      	ldr	r0, [pc, #176]	; (8001418 <mainalgor+0x470>)
 8001366:	f006 f8a1 	bl	80074ac <siprintf>
	 			  SSD1306_Puts(yazi4,&Font_7x10,1);
 800136a:	2201      	movs	r2, #1
 800136c:	492b      	ldr	r1, [pc, #172]	; (800141c <mainalgor+0x474>)
 800136e:	482a      	ldr	r0, [pc, #168]	; (8001418 <mainalgor+0x470>)
 8001370:	f001 fa28 	bl	80027c4 <SSD1306_Puts>
	 			  SSD1306_GotoXY(105,1);
 8001374:	2101      	movs	r1, #1
 8001376:	2069      	movs	r0, #105	; 0x69
 8001378:	f001 f98e 	bl	8002698 <SSD1306_GotoXY>
	 			  SSD1306_Puts("ohm",&Font_7x10,1);
 800137c:	2201      	movs	r2, #1
 800137e:	4927      	ldr	r1, [pc, #156]	; (800141c <mainalgor+0x474>)
 8001380:	4827      	ldr	r0, [pc, #156]	; (8001420 <mainalgor+0x478>)
 8001382:	f001 fa1f 	bl	80027c4 <SSD1306_Puts>

	 			  sprintf(yazi3,"Temperature %d C        ",data2);
 8001386:	4b27      	ldr	r3, [pc, #156]	; (8001424 <mainalgor+0x47c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	4926      	ldr	r1, [pc, #152]	; (8001428 <mainalgor+0x480>)
 800138e:	4827      	ldr	r0, [pc, #156]	; (800142c <mainalgor+0x484>)
 8001390:	f006 f88c 	bl	80074ac <siprintf>
	 			  SSD1306_GotoXY (1, 19);
 8001394:	2113      	movs	r1, #19
 8001396:	2001      	movs	r0, #1
 8001398:	f001 f97e 	bl	8002698 <SSD1306_GotoXY>
	 			  SSD1306_Puts(yazi3,&Font_7x10,1);
 800139c:	2201      	movs	r2, #1
 800139e:	491f      	ldr	r1, [pc, #124]	; (800141c <mainalgor+0x474>)
 80013a0:	4822      	ldr	r0, [pc, #136]	; (800142c <mainalgor+0x484>)
 80013a2:	f001 fa0f 	bl	80027c4 <SSD1306_Puts>

	 			  sprintf(yazi1," %d         ",data1);
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <mainalgor+0x454>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4920      	ldr	r1, [pc, #128]	; (8001430 <mainalgor+0x488>)
 80013ae:	4821      	ldr	r0, [pc, #132]	; (8001434 <mainalgor+0x48c>)
 80013b0:	f006 f87c 	bl	80074ac <siprintf>
	 			  SSD1306_GotoXY (1, 37);
 80013b4:	2125      	movs	r1, #37	; 0x25
 80013b6:	2001      	movs	r0, #1
 80013b8:	f001 f96e 	bl	8002698 <SSD1306_GotoXY>
	 			  SSD1306_Puts(yazi1,&Font_16x26,1);
 80013bc:	2201      	movs	r2, #1
 80013be:	491e      	ldr	r1, [pc, #120]	; (8001438 <mainalgor+0x490>)
 80013c0:	481c      	ldr	r0, [pc, #112]	; (8001434 <mainalgor+0x48c>)
 80013c2:	f001 f9ff 	bl	80027c4 <SSD1306_Puts>

	 			  SSD1306_GotoXY (87,37);
 80013c6:	2125      	movs	r1, #37	; 0x25
 80013c8:	2057      	movs	r0, #87	; 0x57
 80013ca:	f001 f965 	bl	8002698 <SSD1306_GotoXY>
	 			  SSD1306_Puts("mA  ", &Font_16x26,1);
 80013ce:	2201      	movs	r2, #1
 80013d0:	4919      	ldr	r1, [pc, #100]	; (8001438 <mainalgor+0x490>)
 80013d2:	481a      	ldr	r0, [pc, #104]	; (800143c <mainalgor+0x494>)
 80013d4:	f001 f9f6 	bl	80027c4 <SSD1306_Puts>
	 			  SSD1306_UpdateScreen();
 80013d8:	f001 f8b8 	bl	800254c <SSD1306_UpdateScreen>

}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	2000078c 	.word	0x2000078c
 80013e8:	40020800 	.word	0x40020800
 80013ec:	20000344 	.word	0x20000344
 80013f0:	3f4e4000 	.word	0x3f4e4000
 80013f4:	20000340 	.word	0x20000340
 80013f8:	20000820 	.word	0x20000820
 80013fc:	2000077c 	.word	0x2000077c
 8001400:	42c80000 	.word	0x42c80000
 8001404:	42c80000 	.word	0x42c80000
 8001408:	457ff000 	.word	0x457ff000
 800140c:	457ff000 	.word	0x457ff000
 8001410:	2000083c 	.word	0x2000083c
 8001414:	0800a4c8 	.word	0x0800a4c8
 8001418:	20000040 	.word	0x20000040
 800141c:	20000060 	.word	0x20000060
 8001420:	0800a4e0 	.word	0x0800a4e0
 8001424:	20000780 	.word	0x20000780
 8001428:	0800a4e4 	.word	0x0800a4e4
 800142c:	20000020 	.word	0x20000020
 8001430:	0800a500 	.word	0x0800a500
 8001434:	20000000 	.word	0x20000000
 8001438:	20000070 	.word	0x20000070
 800143c:	0800a510 	.word	0x0800a510

08001440 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af02      	add	r7, sp, #8
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f023 030f 	bic.w	r3, r3, #15
 8001450:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	f043 030c 	orr.w	r3, r3, #12
 800145e:	b2db      	uxtb	r3, r3
 8001460:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	b2db      	uxtb	r3, r3
 800146a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	f043 030c 	orr.w	r3, r3, #12
 8001472:	b2db      	uxtb	r3, r3
 8001474:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001476:	7bbb      	ldrb	r3, [r7, #14]
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	b2db      	uxtb	r3, r3
 800147e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001480:	f107 0208 	add.w	r2, r7, #8
 8001484:	2364      	movs	r3, #100	; 0x64
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2304      	movs	r3, #4
 800148a:	214e      	movs	r1, #78	; 0x4e
 800148c:	4803      	ldr	r0, [pc, #12]	; (800149c <lcd_send_cmd+0x5c>)
 800148e:	f003 f8e7 	bl	8004660 <HAL_I2C_Master_Transmit>
}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000c94 	.word	0x20000c94

080014a0 <lcd_init>:
	data_t[3] = data_l|0x09;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

void lcd_init (void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80014a4:	2002      	movs	r0, #2
 80014a6:	f7ff ffcb 	bl	8001440 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80014aa:	2028      	movs	r0, #40	; 0x28
 80014ac:	f7ff ffc8 	bl	8001440 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80014b0:	200c      	movs	r0, #12
 80014b2:	f7ff ffc5 	bl	8001440 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80014b6:	2080      	movs	r0, #128	; 0x80
 80014b8:	f7ff ffc2 	bl	8001440 <lcd_send_cmd>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <interface>:
float setmode1 = 1;
uint32_t button=0;

void interface(void)

{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	  SSD1306_GotoXY (1,1);
 80014c4:	2101      	movs	r1, #1
 80014c6:	2001      	movs	r0, #1
 80014c8:	f001 f8e6 	bl	8002698 <SSD1306_GotoXY>
	  SSD1306_Puts ("SELECT A MODE",&Font_7x10,1);
 80014cc:	2201      	movs	r2, #1
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <interface+0x30>)
 80014d0:	4808      	ldr	r0, [pc, #32]	; (80014f4 <interface+0x34>)
 80014d2:	f001 f977 	bl	80027c4 <SSD1306_Puts>
	  SSD1306_GotoXY(1,19);
 80014d6:	2113      	movs	r1, #19
 80014d8:	2001      	movs	r0, #1
 80014da:	f001 f8dd 	bl	8002698 <SSD1306_GotoXY>
	  SSD1306_Puts("1-Cur 2-Res 3-Watt",&Font_7x10,1);
 80014de:	2201      	movs	r2, #1
 80014e0:	4903      	ldr	r1, [pc, #12]	; (80014f0 <interface+0x30>)
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <interface+0x38>)
 80014e4:	f001 f96e 	bl	80027c4 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80014e8:	f001 f830 	bl	800254c <SSD1306_UpdateScreen>
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000060 	.word	0x20000060
 80014f4:	0800a518 	.word	0x0800a518
 80014f8:	0800a528 	.word	0x0800a528

080014fc <selecting>:

void selecting(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0

	  // SSD1306_Fill(SSD1306_COLOR_BLACK);
	  // SSD1306_UpdateScreen();
	   if(setmode1>3)(setmode1=3);
 8001500:	4bb2      	ldr	r3, [pc, #712]	; (80017cc <selecting+0x2d0>)
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800150a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001512:	dd02      	ble.n	800151a <selecting+0x1e>
 8001514:	4bad      	ldr	r3, [pc, #692]	; (80017cc <selecting+0x2d0>)
 8001516:	4aae      	ldr	r2, [pc, #696]	; (80017d0 <selecting+0x2d4>)
 8001518:	601a      	str	r2, [r3, #0]
	   if(setmode1<1)(setmode1=1);
 800151a:	4bac      	ldr	r3, [pc, #688]	; (80017cc <selecting+0x2d0>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	d503      	bpl.n	8001536 <selecting+0x3a>
 800152e:	4ba7      	ldr	r3, [pc, #668]	; (80017cc <selecting+0x2d0>)
 8001530:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001534:	601a      	str	r2, [r3, #0]
		  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0))
 8001536:	2101      	movs	r1, #1
 8001538:	48a6      	ldr	r0, [pc, #664]	; (80017d4 <selecting+0x2d8>)
 800153a:	f002 ff27 	bl	800438c <HAL_GPIO_ReadPin>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00c      	beq.n	800155e <selecting+0x62>
		  {
			  setmode1+=1;
 8001544:	4ba1      	ldr	r3, [pc, #644]	; (80017cc <selecting+0x2d0>)
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800154e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001552:	4b9e      	ldr	r3, [pc, #632]	; (80017cc <selecting+0x2d0>)
 8001554:	edc3 7a00 	vstr	s15, [r3]
			  HAL_Delay(50);
 8001558:	2032      	movs	r0, #50	; 0x32
 800155a:	f001 ffa1 	bl	80034a0 <HAL_Delay>
		  }

		  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1))
 800155e:	2102      	movs	r1, #2
 8001560:	489d      	ldr	r0, [pc, #628]	; (80017d8 <selecting+0x2dc>)
 8001562:	f002 ff13 	bl	800438c <HAL_GPIO_ReadPin>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00c      	beq.n	8001586 <selecting+0x8a>
		  {
			  setmode1-=1;
 800156c:	4b97      	ldr	r3, [pc, #604]	; (80017cc <selecting+0x2d0>)
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001576:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800157a:	4b94      	ldr	r3, [pc, #592]	; (80017cc <selecting+0x2d0>)
 800157c:	edc3 7a00 	vstr	s15, [r3]
			  HAL_Delay(50);
 8001580:	2032      	movs	r0, #50	; 0x32
 8001582:	f001 ff8d 	bl	80034a0 <HAL_Delay>
		  }

		  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13))  {(button=1); HAL_Delay(200);}
 8001586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158a:	4894      	ldr	r0, [pc, #592]	; (80017dc <selecting+0x2e0>)
 800158c:	f002 fefe 	bl	800438c <HAL_GPIO_ReadPin>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d006      	beq.n	80015a4 <selecting+0xa8>
 8001596:	4b92      	ldr	r3, [pc, #584]	; (80017e0 <selecting+0x2e4>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	20c8      	movs	r0, #200	; 0xc8
 800159e:	f001 ff7f 	bl	80034a0 <HAL_Delay>
 80015a2:	e002      	b.n	80015aa <selecting+0xae>
		  else{(button=0); }
 80015a4:	4b8e      	ldr	r3, [pc, #568]	; (80017e0 <selecting+0x2e4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]


		  if(setmode1==1)
 80015aa:	4b88      	ldr	r3, [pc, #544]	; (80017cc <selecting+0x2d0>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015b4:	eef4 7a47 	vcmp.f32	s15, s14
 80015b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015bc:	d14f      	bne.n	800165e <selecting+0x162>
		  	  {
		  		  SSD1306_GotoXY (1,1);
 80015be:	2101      	movs	r1, #1
 80015c0:	2001      	movs	r0, #1
 80015c2:	f001 f869 	bl	8002698 <SSD1306_GotoXY>
		  		  SSD1306_Puts ("SELECT A MODE          ",&Font_7x10,1);
 80015c6:	2201      	movs	r2, #1
 80015c8:	4986      	ldr	r1, [pc, #536]	; (80017e4 <selecting+0x2e8>)
 80015ca:	4887      	ldr	r0, [pc, #540]	; (80017e8 <selecting+0x2ec>)
 80015cc:	f001 f8fa 	bl	80027c4 <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,19);
 80015d0:	2113      	movs	r1, #19
 80015d2:	2001      	movs	r0, #1
 80015d4:	f001 f860 	bl	8002698 <SSD1306_GotoXY>
		  		  SSD1306_Puts("1-Cur 2-Res 3-Watt",&Font_7x10,1);
 80015d8:	2201      	movs	r2, #1
 80015da:	4982      	ldr	r1, [pc, #520]	; (80017e4 <selecting+0x2e8>)
 80015dc:	4883      	ldr	r0, [pc, #524]	; (80017ec <selecting+0x2f0>)
 80015de:	f001 f8f1 	bl	80027c4 <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,30);
 80015e2:	211e      	movs	r1, #30
 80015e4:	2001      	movs	r0, #1
 80015e6:	f001 f857 	bl	8002698 <SSD1306_GotoXY>
		  		  SSD1306_Puts("                  ",&Font_7x10,1);
 80015ea:	2201      	movs	r2, #1
 80015ec:	497d      	ldr	r1, [pc, #500]	; (80017e4 <selecting+0x2e8>)
 80015ee:	4880      	ldr	r0, [pc, #512]	; (80017f0 <selecting+0x2f4>)
 80015f0:	f001 f8e8 	bl	80027c4 <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,40);
 80015f4:	2128      	movs	r1, #40	; 0x28
 80015f6:	2001      	movs	r0, #1
 80015f8:	f001 f84e 	bl	8002698 <SSD1306_GotoXY>
		  		  SSD1306_Puts(" ^                ",&Font_11x18,1);
 80015fc:	2201      	movs	r2, #1
 80015fe:	497d      	ldr	r1, [pc, #500]	; (80017f4 <selecting+0x2f8>)
 8001600:	487d      	ldr	r0, [pc, #500]	; (80017f8 <selecting+0x2fc>)
 8001602:	f001 f8df 	bl	80027c4 <SSD1306_Puts>
		  		  SSD1306_UpdateScreen();
 8001606:	f000 ffa1 	bl	800254c <SSD1306_UpdateScreen>



		  if(setmode1==1 && button == 1)
 800160a:	4b70      	ldr	r3, [pc, #448]	; (80017cc <selecting+0x2d0>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001614:	eef4 7a47 	vcmp.f32	s15, s14
 8001618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161c:	d11f      	bne.n	800165e <selecting+0x162>
 800161e:	4b70      	ldr	r3, [pc, #448]	; (80017e0 <selecting+0x2e4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d11b      	bne.n	800165e <selecting+0x162>

			  {
				  while(setmode1==1)
 8001626:	e010      	b.n	800164a <selecting+0x14e>
				  {
				  mainalgor();
 8001628:	f7ff fcbe 	bl	8000fa8 <mainalgor>

				  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13)==GPIO_PIN_SET)
 800162c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001630:	486a      	ldr	r0, [pc, #424]	; (80017dc <selecting+0x2e0>)
 8001632:	f002 feab 	bl	800438c <HAL_GPIO_ReadPin>
 8001636:	4603      	mov	r3, r0
 8001638:	2b01      	cmp	r3, #1
 800163a:	d106      	bne.n	800164a <selecting+0x14e>

					  {
					  HAL_Delay(200);
 800163c:	20c8      	movs	r0, #200	; 0xc8
 800163e:	f001 ff2f 	bl	80034a0 <HAL_Delay>
					  setmode1 = 0;
 8001642:	4b62      	ldr	r3, [pc, #392]	; (80017cc <selecting+0x2d0>)
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
				  while(setmode1==1)
 800164a:	4b60      	ldr	r3, [pc, #384]	; (80017cc <selecting+0x2d0>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001654:	eef4 7a47 	vcmp.f32	s15, s14
 8001658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165c:	d0e4      	beq.n	8001628 <selecting+0x12c>
				  }


			  }}

		  if (setmode1==2)
 800165e:	4b5b      	ldr	r3, [pc, #364]	; (80017cc <selecting+0x2d0>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001668:	eef4 7a47 	vcmp.f32	s15, s14
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	d14f      	bne.n	8001712 <selecting+0x216>
		  	  {
		  		  SSD1306_GotoXY (1,1);
 8001672:	2101      	movs	r1, #1
 8001674:	2001      	movs	r0, #1
 8001676:	f001 f80f 	bl	8002698 <SSD1306_GotoXY>
		  		  SSD1306_Puts ("SELECT A MODE         ",&Font_7x10,1);
 800167a:	2201      	movs	r2, #1
 800167c:	4959      	ldr	r1, [pc, #356]	; (80017e4 <selecting+0x2e8>)
 800167e:	485f      	ldr	r0, [pc, #380]	; (80017fc <selecting+0x300>)
 8001680:	f001 f8a0 	bl	80027c4 <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,19);
 8001684:	2113      	movs	r1, #19
 8001686:	2001      	movs	r0, #1
 8001688:	f001 f806 	bl	8002698 <SSD1306_GotoXY>
		  		  SSD1306_Puts("1-Cur 2-Res 3-Watt",&Font_7x10,1);
 800168c:	2201      	movs	r2, #1
 800168e:	4955      	ldr	r1, [pc, #340]	; (80017e4 <selecting+0x2e8>)
 8001690:	4856      	ldr	r0, [pc, #344]	; (80017ec <selecting+0x2f0>)
 8001692:	f001 f897 	bl	80027c4 <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,30);
 8001696:	211e      	movs	r1, #30
 8001698:	2001      	movs	r0, #1
 800169a:	f000 fffd 	bl	8002698 <SSD1306_GotoXY>
		  		  SSD1306_Puts("                   ",&Font_7x10,1);
 800169e:	2201      	movs	r2, #1
 80016a0:	4950      	ldr	r1, [pc, #320]	; (80017e4 <selecting+0x2e8>)
 80016a2:	4857      	ldr	r0, [pc, #348]	; (8001800 <selecting+0x304>)
 80016a4:	f001 f88e 	bl	80027c4 <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,40);
 80016a8:	2128      	movs	r1, #40	; 0x28
 80016aa:	2001      	movs	r0, #1
 80016ac:	f000 fff4 	bl	8002698 <SSD1306_GotoXY>
		  		  SSD1306_Puts("     ^           ",&Font_11x18,1);
 80016b0:	2201      	movs	r2, #1
 80016b2:	4950      	ldr	r1, [pc, #320]	; (80017f4 <selecting+0x2f8>)
 80016b4:	4853      	ldr	r0, [pc, #332]	; (8001804 <selecting+0x308>)
 80016b6:	f001 f885 	bl	80027c4 <SSD1306_Puts>
	      		  SSD1306_UpdateScreen();
 80016ba:	f000 ff47 	bl	800254c <SSD1306_UpdateScreen>

		  	  if(setmode1==2 && button == 1)
 80016be:	4b43      	ldr	r3, [pc, #268]	; (80017cc <selecting+0x2d0>)
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80016c8:	eef4 7a47 	vcmp.f32	s15, s14
 80016cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d0:	d11f      	bne.n	8001712 <selecting+0x216>
 80016d2:	4b43      	ldr	r3, [pc, #268]	; (80017e0 <selecting+0x2e4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d11b      	bne.n	8001712 <selecting+0x216>

		  	  {

		  		  while(setmode1==2)
 80016da:	e010      	b.n	80016fe <selecting+0x202>
		  				  {
		  				  resistorr();
 80016dc:	f000 fbf0 	bl	8001ec0 <resistorr>

		  				  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13)==GPIO_PIN_SET)
 80016e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e4:	483d      	ldr	r0, [pc, #244]	; (80017dc <selecting+0x2e0>)
 80016e6:	f002 fe51 	bl	800438c <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d106      	bne.n	80016fe <selecting+0x202>

		  					  {
		  					HAL_Delay(200);
 80016f0:	20c8      	movs	r0, #200	; 0xc8
 80016f2:	f001 fed5 	bl	80034a0 <HAL_Delay>
		  					  setmode1=0;
 80016f6:	4b35      	ldr	r3, [pc, #212]	; (80017cc <selecting+0x2d0>)
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
		  		  while(setmode1==2)
 80016fe:	4b33      	ldr	r3, [pc, #204]	; (80017cc <selecting+0x2d0>)
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001708:	eef4 7a47 	vcmp.f32	s15, s14
 800170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001710:	d0e4      	beq.n	80016dc <selecting+0x1e0>
		  					  }
		  				  }

		  	  }}

		  if (setmode1==3)
 8001712:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <selecting+0x2d0>)
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800171c:	eef4 7a47 	vcmp.f32	s15, s14
 8001720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001724:	d14f      	bne.n	80017c6 <selecting+0x2ca>
		  	  {

		  		  SSD1306_GotoXY (1,1);
 8001726:	2101      	movs	r1, #1
 8001728:	2001      	movs	r0, #1
 800172a:	f000 ffb5 	bl	8002698 <SSD1306_GotoXY>
		  		  SSD1306_Puts ("SELECT A MODE         ",&Font_7x10,1);
 800172e:	2201      	movs	r2, #1
 8001730:	492c      	ldr	r1, [pc, #176]	; (80017e4 <selecting+0x2e8>)
 8001732:	4832      	ldr	r0, [pc, #200]	; (80017fc <selecting+0x300>)
 8001734:	f001 f846 	bl	80027c4 <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,19);
 8001738:	2113      	movs	r1, #19
 800173a:	2001      	movs	r0, #1
 800173c:	f000 ffac 	bl	8002698 <SSD1306_GotoXY>
		  		  SSD1306_Puts("1-Cur 2-Res 3-Watt",&Font_7x10,1);
 8001740:	2201      	movs	r2, #1
 8001742:	4928      	ldr	r1, [pc, #160]	; (80017e4 <selecting+0x2e8>)
 8001744:	4829      	ldr	r0, [pc, #164]	; (80017ec <selecting+0x2f0>)
 8001746:	f001 f83d 	bl	80027c4 <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,30);
 800174a:	211e      	movs	r1, #30
 800174c:	2001      	movs	r0, #1
 800174e:	f000 ffa3 	bl	8002698 <SSD1306_GotoXY>
		  		  SSD1306_Puts("                  ",&Font_7x10,1);
 8001752:	2201      	movs	r2, #1
 8001754:	4923      	ldr	r1, [pc, #140]	; (80017e4 <selecting+0x2e8>)
 8001756:	4826      	ldr	r0, [pc, #152]	; (80017f0 <selecting+0x2f4>)
 8001758:	f001 f834 	bl	80027c4 <SSD1306_Puts>
		  		  SSD1306_GotoXY(1,40);
 800175c:	2128      	movs	r1, #40	; 0x28
 800175e:	2001      	movs	r0, #1
 8001760:	f000 ff9a 	bl	8002698 <SSD1306_GotoXY>
		  		  SSD1306_Puts("         ^          ",&Font_11x18,1);
 8001764:	2201      	movs	r2, #1
 8001766:	4923      	ldr	r1, [pc, #140]	; (80017f4 <selecting+0x2f8>)
 8001768:	4827      	ldr	r0, [pc, #156]	; (8001808 <selecting+0x30c>)
 800176a:	f001 f82b 	bl	80027c4 <SSD1306_Puts>
		  		  SSD1306_UpdateScreen();
 800176e:	f000 feed 	bl	800254c <SSD1306_UpdateScreen>

		  	  if(setmode1==3 && button == 1)
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <selecting+0x2d0>)
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800177c:	eef4 7a47 	vcmp.f32	s15, s14
 8001780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001784:	d11f      	bne.n	80017c6 <selecting+0x2ca>
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <selecting+0x2e4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d11b      	bne.n	80017c6 <selecting+0x2ca>

		  	  {
		  		 while(setmode1==3)
 800178e:	e010      	b.n	80017b2 <selecting+0x2b6>
		  		 {
		  			watter();
 8001790:	f001 fb5e 	bl	8002e50 <watter>


	                if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13)==GPIO_PIN_SET)
 8001794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001798:	4810      	ldr	r0, [pc, #64]	; (80017dc <selecting+0x2e0>)
 800179a:	f002 fdf7 	bl	800438c <HAL_GPIO_ReadPin>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d106      	bne.n	80017b2 <selecting+0x2b6>

		  			{

	                	HAL_Delay(200);
 80017a4:	20c8      	movs	r0, #200	; 0xc8
 80017a6:	f001 fe7b 	bl	80034a0 <HAL_Delay>
	                	setmode1=0;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <selecting+0x2d0>)
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
		  		 while(setmode1==3)
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <selecting+0x2d0>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80017bc:	eef4 7a47 	vcmp.f32	s15, s14
 80017c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c4:	d0e4      	beq.n	8001790 <selecting+0x294>
		  			}
		  			}


		  	  }}
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000078 	.word	0x20000078
 80017d0:	40400000 	.word	0x40400000
 80017d4:	40020400 	.word	0x40020400
 80017d8:	40020800 	.word	0x40020800
 80017dc:	40021400 	.word	0x40021400
 80017e0:	20000348 	.word	0x20000348
 80017e4:	20000060 	.word	0x20000060
 80017e8:	0800a53c 	.word	0x0800a53c
 80017ec:	0800a528 	.word	0x0800a528
 80017f0:	0800a554 	.word	0x0800a554
 80017f4:	20000068 	.word	0x20000068
 80017f8:	0800a568 	.word	0x0800a568
 80017fc:	0800a57c 	.word	0x0800a57c
 8001800:	0800a594 	.word	0x0800a594
 8001804:	0800a5a8 	.word	0x0800a5a8
 8001808:	0800a5bc 	.word	0x0800a5bc

0800180c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001810:	f001 fdd4 	bl	80033bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001814:	f000 f818 	bl	8001848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001818:	f000 fa16 	bl	8001c48 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800181c:	f000 f9bc 	bl	8001b98 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001820:	f000 f9e4 	bl	8001bec <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 8001824:	f000 f924 	bl	8001a70 <MX_DAC_Init>
  MX_I2C2_Init();
 8001828:	f000 f94c 	bl	8001ac4 <MX_I2C2_Init>
  MX_ADC1_Init();
 800182c:	f000 f87c 	bl	8001928 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001830:	f000 f8cc 	bl	80019cc <MX_ADC3_Init>
  MX_UART5_Init();
 8001834:	f000 f986 	bl	8001b44 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
welcome_lcd();
 8001838:	f001 fd60 	bl	80032fc <welcome_lcd>
interface();
 800183c:	f7ff fe40 	bl	80014c0 <interface>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
selecting();
 8001840:	f7ff fe5c 	bl	80014fc <selecting>
  {
 8001844:	e7fc      	b.n	8001840 <main+0x34>
	...

08001848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b094      	sub	sp, #80	; 0x50
 800184c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184e:	f107 0320 	add.w	r3, r7, #32
 8001852:	2230      	movs	r2, #48	; 0x30
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f004 ffdc 	bl	8006814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <SystemClock_Config+0xd8>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	4a2a      	ldr	r2, [pc, #168]	; (8001920 <SystemClock_Config+0xd8>)
 8001876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187a:	6413      	str	r3, [r2, #64]	; 0x40
 800187c:	4b28      	ldr	r3, [pc, #160]	; (8001920 <SystemClock_Config+0xd8>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <SystemClock_Config+0xdc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001894:	4a23      	ldr	r2, [pc, #140]	; (8001924 <SystemClock_Config+0xdc>)
 8001896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <SystemClock_Config+0xdc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80018a8:	2303      	movs	r3, #3
 80018aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018b2:	2301      	movs	r3, #1
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b6:	2310      	movs	r3, #16
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ba:	2302      	movs	r3, #2
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018c4:	2304      	movs	r3, #4
 80018c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018c8:	23a8      	movs	r3, #168	; 0xa8
 80018ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018cc:	2302      	movs	r3, #2
 80018ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018d0:	2307      	movs	r3, #7
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d4:	f107 0320 	add.w	r3, r7, #32
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 fc8f 	bl	80051fc <HAL_RCC_OscConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80018e4:	f000 fae4 	bl	8001eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e8:	230f      	movs	r3, #15
 80018ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f003 fee8 	bl	80056dc <HAL_RCC_ClockConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001912:	f000 facd 	bl	8001eb0 <Error_Handler>
  }
}
 8001916:	bf00      	nop
 8001918:	3750      	adds	r7, #80	; 0x50
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000

08001928 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800192e:	463b      	mov	r3, r7
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <MX_ADC1_Init+0x98>)
 800193c:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <MX_ADC1_Init+0x9c>)
 800193e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001942:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001946:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001948:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <MX_ADC1_Init+0x98>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001956:	2200      	movs	r2, #0
 8001958:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <MX_ADC1_Init+0x98>)
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001964:	2200      	movs	r2, #0
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <MX_ADC1_Init+0x98>)
 800196a:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <MX_ADC1_Init+0xa0>)
 800196c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001976:	2201      	movs	r2, #1
 8001978:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_ADC1_Init+0x98>)
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_ADC1_Init+0x98>)
 8001984:	2201      	movs	r2, #1
 8001986:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <MX_ADC1_Init+0x98>)
 800198a:	f001 fdab 	bl	80034e4 <HAL_ADC_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001994:	f000 fa8c 	bl	8001eb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001998:	2303      	movs	r3, #3
 800199a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800199c:	2301      	movs	r3, #1
 800199e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a4:	463b      	mov	r3, r7
 80019a6:	4619      	mov	r1, r3
 80019a8:	4805      	ldr	r0, [pc, #20]	; (80019c0 <MX_ADC1_Init+0x98>)
 80019aa:	f001 ff37 	bl	800381c <HAL_ADC_ConfigChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019b4:	f000 fa7c 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000790 	.word	0x20000790
 80019c4:	40012000 	.word	0x40012000
 80019c8:	0f000001 	.word	0x0f000001

080019cc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019d2:	463b      	mov	r3, r7
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80019de:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <MX_ADC3_Init+0x98>)
 80019e0:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <MX_ADC3_Init+0x9c>)
 80019e2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <MX_ADC3_Init+0x98>)
 80019e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ea:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <MX_ADC3_Init+0x98>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <MX_ADC3_Init+0x98>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_ADC3_Init+0x98>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <MX_ADC3_Init+0x98>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <MX_ADC3_Init+0x98>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MX_ADC3_Init+0x98>)
 8001a0e:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <MX_ADC3_Init+0xa0>)
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_ADC3_Init+0x98>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_ADC3_Init+0x98>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_ADC3_Init+0x98>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_ADC3_Init+0x98>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001a2c:	480d      	ldr	r0, [pc, #52]	; (8001a64 <MX_ADC3_Init+0x98>)
 8001a2e:	f001 fd59 	bl	80034e4 <HAL_ADC_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001a38:	f000 fa3a 	bl	8001eb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a40:	2301      	movs	r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a48:	463b      	mov	r3, r7
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_ADC3_Init+0x98>)
 8001a4e:	f001 fee5 	bl	800381c <HAL_ADC_ConfigChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001a58:	f000 fa2a 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	200007d8 	.word	0x200007d8
 8001a68:	40012200 	.word	0x40012200
 8001a6c:	0f000001 	.word	0x0f000001

08001a70 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a76:	463b      	mov	r3, r7
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <MX_DAC_Init+0x4c>)
 8001a80:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <MX_DAC_Init+0x50>)
 8001a82:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001a84:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_DAC_Init+0x4c>)
 8001a86:	f002 f9dc 	bl	8003e42 <HAL_DAC_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001a90:	f000 fa0e 	bl	8001eb0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4806      	ldr	r0, [pc, #24]	; (8001abc <MX_DAC_Init+0x4c>)
 8001aa4:	f002 fa55 	bl	8003f52 <HAL_DAC_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001aae:	f000 f9ff 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000820 	.word	0x20000820
 8001ac0:	40007400 	.word	0x40007400

08001ac4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001aca:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <MX_I2C2_Init+0x78>)
 8001acc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <MX_I2C2_Init+0x7c>)
 8001ad2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001ae2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ae6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b00:	480d      	ldr	r0, [pc, #52]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001b02:	f002 fc75 	bl	80043f0 <HAL_I2C_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b0c:	f000 f9d0 	bl	8001eb0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b10:	2100      	movs	r1, #0
 8001b12:	4809      	ldr	r0, [pc, #36]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001b14:	f003 f9d9 	bl	8004eca <HAL_I2CEx_ConfigAnalogFilter>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001b1e:	f000 f9c7 	bl	8001eb0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b22:	2100      	movs	r1, #0
 8001b24:	4804      	ldr	r0, [pc, #16]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001b26:	f003 fa0c 	bl	8004f42 <HAL_I2CEx_ConfigDigitalFilter>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001b30:	f000 f9be 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000c94 	.word	0x20000c94
 8001b3c:	40005800 	.word	0x40005800
 8001b40:	00061a80 	.word	0x00061a80

08001b44 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_UART5_Init+0x4c>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <MX_UART5_Init+0x50>)
 8001b4c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <MX_UART5_Init+0x4c>)
 8001b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b54:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_UART5_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_UART5_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <MX_UART5_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_UART5_Init+0x4c>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <MX_UART5_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_UART5_Init+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_UART5_Init+0x4c>)
 8001b7c:	f003 ffa0 	bl	8005ac0 <HAL_UART_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001b86:	f000 f993 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000ce8 	.word	0x20000ce8
 8001b94:	40005000 	.word	0x40005000

08001b98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MX_USART3_UART_Init+0x4c>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <MX_USART3_UART_Init+0x50>)
 8001ba0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <MX_USART3_UART_Init+0x4c>)
 8001ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <MX_USART3_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_USART3_UART_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <MX_USART3_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <MX_USART3_UART_Init+0x4c>)
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <MX_USART3_UART_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_USART3_UART_Init+0x4c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bce:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_USART3_UART_Init+0x4c>)
 8001bd0:	f003 ff76 	bl	8005ac0 <HAL_UART_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001bda:	f000 f969 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000084c 	.word	0x2000084c
 8001be8:	40004800 	.word	0x40004800

08001bec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bf2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001bf6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c00:	2202      	movs	r2, #2
 8001c02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c30:	f003 f9c6 	bl	8004fc0 <HAL_PCD_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001c3a:	f000 f939 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000088c 	.word	0x2000088c

08001c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08c      	sub	sp, #48	; 0x30
 8001c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
 8001c62:	4b8c      	ldr	r3, [pc, #560]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a8b      	ldr	r2, [pc, #556]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b89      	ldr	r3, [pc, #548]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	4b85      	ldr	r3, [pc, #532]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a84      	ldr	r2, [pc, #528]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001c84:	f043 0320 	orr.w	r3, r3, #32
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b82      	ldr	r3, [pc, #520]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	4b7e      	ldr	r3, [pc, #504]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a7d      	ldr	r2, [pc, #500]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b7b      	ldr	r3, [pc, #492]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b77      	ldr	r3, [pc, #476]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a76      	ldr	r2, [pc, #472]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b74      	ldr	r3, [pc, #464]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	4b70      	ldr	r3, [pc, #448]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a6f      	ldr	r2, [pc, #444]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b6d      	ldr	r3, [pc, #436]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b69      	ldr	r3, [pc, #420]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a68      	ldr	r2, [pc, #416]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	4b62      	ldr	r3, [pc, #392]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a61      	ldr	r2, [pc, #388]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b5f      	ldr	r3, [pc, #380]	; (8001e94 <MX_GPIO_Init+0x24c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2140      	movs	r1, #64	; 0x40
 8001d26:	485c      	ldr	r0, [pc, #368]	; (8001e98 <MX_GPIO_Init+0x250>)
 8001d28:	f002 fb48 	bl	80043bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2180      	movs	r1, #128	; 0x80
 8001d30:	485a      	ldr	r0, [pc, #360]	; (8001e9c <MX_GPIO_Init+0x254>)
 8001d32:	f002 fb43 	bl	80043bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001d36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d3c:	4b58      	ldr	r3, [pc, #352]	; (8001ea0 <MX_GPIO_Init+0x258>)
 8001d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 031c 	add.w	r3, r7, #28
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4856      	ldr	r0, [pc, #344]	; (8001ea4 <MX_GPIO_Init+0x25c>)
 8001d4c:	f002 f974 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_13;
 8001d50:	f242 0310 	movw	r3, #8208	; 0x2010
 8001d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d5e:	f107 031c 	add.w	r3, r7, #28
 8001d62:	4619      	mov	r1, r3
 8001d64:	4850      	ldr	r0, [pc, #320]	; (8001ea8 <MX_GPIO_Init+0x260>)
 8001d66:	f002 f967 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11;
 8001d6a:	f640 0302 	movw	r3, #2050	; 0x802
 8001d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d74:	2302      	movs	r3, #2
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4849      	ldr	r0, [pc, #292]	; (8001ea4 <MX_GPIO_Init+0x25c>)
 8001d80:	f002 f95a 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d84:	2386      	movs	r3, #134	; 0x86
 8001d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d90:	2303      	movs	r3, #3
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d94:	230b      	movs	r3, #11
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4843      	ldr	r0, [pc, #268]	; (8001eac <MX_GPIO_Init+0x264>)
 8001da0:	f002 f94a 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001da4:	2320      	movs	r3, #32
 8001da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dac:	2302      	movs	r3, #2
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	4619      	mov	r1, r3
 8001db6:	483d      	ldr	r0, [pc, #244]	; (8001eac <MX_GPIO_Init+0x264>)
 8001db8:	f002 f93e 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001dbc:	2330      	movs	r3, #48	; 0x30
 8001dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dcc:	230b      	movs	r3, #11
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4833      	ldr	r0, [pc, #204]	; (8001ea4 <MX_GPIO_Init+0x25c>)
 8001dd8:	f002 f92e 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8001ddc:	f244 0301 	movw	r3, #16385	; 0x4001
 8001de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001de6:	2302      	movs	r3, #2
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dea:	f107 031c 	add.w	r3, r7, #28
 8001dee:	4619      	mov	r1, r3
 8001df0:	482a      	ldr	r0, [pc, #168]	; (8001e9c <MX_GPIO_Init+0x254>)
 8001df2:	f002 f921 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e08:	230b      	movs	r3, #11
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	4619      	mov	r1, r3
 8001e12:	4822      	ldr	r0, [pc, #136]	; (8001e9c <MX_GPIO_Init+0x254>)
 8001e14:	f002 f910 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001e18:	2340      	movs	r3, #64	; 0x40
 8001e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	481a      	ldr	r0, [pc, #104]	; (8001e98 <MX_GPIO_Init+0x250>)
 8001e30:	f002 f902 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	4619      	mov	r1, r3
 8001e46:	4814      	ldr	r0, [pc, #80]	; (8001e98 <MX_GPIO_Init+0x250>)
 8001e48:	f002 f8f6 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001e4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e5e:	230b      	movs	r3, #11
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	480b      	ldr	r0, [pc, #44]	; (8001e98 <MX_GPIO_Init+0x250>)
 8001e6a:	f002 f8e5 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e7e:	f107 031c 	add.w	r3, r7, #28
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_GPIO_Init+0x254>)
 8001e86:	f002 f8d7 	bl	8004038 <HAL_GPIO_Init>

}
 8001e8a:	bf00      	nop
 8001e8c:	3730      	adds	r7, #48	; 0x30
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40021800 	.word	0x40021800
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	10110000 	.word	0x10110000
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	40021400 	.word	0x40021400
 8001eac:	40020000 	.word	0x40020000

08001eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <resistorr>:
float temp1 , vtemp1 , adcval1 ;


void resistorr(void)

{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	489f      	ldr	r0, [pc, #636]	; (8002148 <resistorr+0x288>)
 8001eca:	f001 ffdc 	bl	8003e86 <HAL_DAC_Start>
    HAL_ADC_Start(&hadc1);
 8001ece:	489f      	ldr	r0, [pc, #636]	; (800214c <resistorr+0x28c>)
 8001ed0:	f001 fb4c 	bl	800356c <HAL_ADC_Start>
    adcval1 = HAL_ADC_GetValue(&hadc1);
 8001ed4:	489d      	ldr	r0, [pc, #628]	; (800214c <resistorr+0x28c>)
 8001ed6:	f001 fc93 	bl	8003800 <HAL_ADC_GetValue>
 8001eda:	ee07 0a90 	vmov	s15, r0
 8001ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee2:	4b9b      	ldr	r3, [pc, #620]	; (8002150 <resistorr+0x290>)
 8001ee4:	edc3 7a00 	vstr	s15, [r3]
    vtemp1 = adcval1*0.806;
 8001ee8:	4b99      	ldr	r3, [pc, #612]	; (8002150 <resistorr+0x290>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fb3b 	bl	8000568 <__aeabi_f2d>
 8001ef2:	a387      	add	r3, pc, #540	; (adr r3, 8002110 <resistorr+0x250>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fb8e 	bl	8000618 <__aeabi_dmul>
 8001efc:	4603      	mov	r3, r0
 8001efe:	460c      	mov	r4, r1
 8001f00:	4618      	mov	r0, r3
 8001f02:	4621      	mov	r1, r4
 8001f04:	f7fe fe80 	bl	8000c08 <__aeabi_d2f>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b92      	ldr	r3, [pc, #584]	; (8002154 <resistorr+0x294>)
 8001f0c:	601a      	str	r2, [r3, #0]
    temp1 = ((13.582 - sqrt((13.582*13.582)+(4*0.00433)*(2230.8-vtemp1)))/(2*-0.00433))+30;
 8001f0e:	4b91      	ldr	r3, [pc, #580]	; (8002154 <resistorr+0x294>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fb28 	bl	8000568 <__aeabi_f2d>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	460c      	mov	r4, r1
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4623      	mov	r3, r4
 8001f20:	a17d      	add	r1, pc, #500	; (adr r1, 8002118 <resistorr+0x258>)
 8001f22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f26:	f7fe f9bf 	bl	80002a8 <__aeabi_dsub>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	460c      	mov	r4, r1
 8001f2e:	4618      	mov	r0, r3
 8001f30:	4621      	mov	r1, r4
 8001f32:	a37b      	add	r3, pc, #492	; (adr r3, 8002120 <resistorr+0x260>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe fb6e 	bl	8000618 <__aeabi_dmul>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	460c      	mov	r4, r1
 8001f40:	4618      	mov	r0, r3
 8001f42:	4621      	mov	r1, r4
 8001f44:	a378      	add	r3, pc, #480	; (adr r3, 8002128 <resistorr+0x268>)
 8001f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4a:	f7fe f9af 	bl	80002ac <__adddf3>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	460c      	mov	r4, r1
 8001f52:	ec44 3b17 	vmov	d7, r3, r4
 8001f56:	eeb0 0a47 	vmov.f32	s0, s14
 8001f5a:	eef0 0a67 	vmov.f32	s1, s15
 8001f5e:	f008 f999 	bl	800a294 <sqrt>
 8001f62:	ec54 3b10 	vmov	r3, r4, d0
 8001f66:	461a      	mov	r2, r3
 8001f68:	4623      	mov	r3, r4
 8001f6a:	a171      	add	r1, pc, #452	; (adr r1, 8002130 <resistorr+0x270>)
 8001f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f70:	f7fe f99a 	bl	80002a8 <__aeabi_dsub>
 8001f74:	4603      	mov	r3, r0
 8001f76:	460c      	mov	r4, r1
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	a36e      	add	r3, pc, #440	; (adr r3, 8002138 <resistorr+0x278>)
 8001f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f82:	f7fe fc73 	bl	800086c <__aeabi_ddiv>
 8001f86:	4603      	mov	r3, r0
 8001f88:	460c      	mov	r4, r1
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	4b71      	ldr	r3, [pc, #452]	; (8002158 <resistorr+0x298>)
 8001f94:	f7fe f98a 	bl	80002ac <__adddf3>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	460c      	mov	r4, r1
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	f7fe fe32 	bl	8000c08 <__aeabi_d2f>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b6d      	ldr	r3, [pc, #436]	; (800215c <resistorr+0x29c>)
 8001fa8:	601a      	str	r2, [r3, #0]
    data21 = temp1;
 8001faa:	4b6c      	ldr	r3, [pc, #432]	; (800215c <resistorr+0x29c>)
 8001fac:	edd3 7a00 	vldr	s15, [r3]
 8001fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb4:	ee17 2a90 	vmov	r2, s15
 8001fb8:	4b69      	ldr	r3, [pc, #420]	; (8002160 <resistorr+0x2a0>)
 8001fba:	601a      	str	r2, [r3, #0]

    	 HAL_Delay(10);
 8001fbc:	200a      	movs	r0, #10
 8001fbe:	f001 fa6f 	bl	80034a0 <HAL_Delay>



		HAL_ADC_Start(&hadc3);
 8001fc2:	4868      	ldr	r0, [pc, #416]	; (8002164 <resistorr+0x2a4>)
 8001fc4:	f001 fad2 	bl	800356c <HAL_ADC_Start>
		  if(HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK)
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	4865      	ldr	r0, [pc, #404]	; (8002164 <resistorr+0x2a4>)
 8001fce:	f001 fb93 	bl	80036f8 <HAL_ADC_PollForConversion>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d135      	bne.n	8002044 <resistorr+0x184>
		  {
			  raw1voltage = HAL_ADC_GetValue(&hadc3);
 8001fd8:	4862      	ldr	r0, [pc, #392]	; (8002164 <resistorr+0x2a4>)
 8001fda:	f001 fc11 	bl	8003800 <HAL_ADC_GetValue>
 8001fde:	ee07 0a90 	vmov	s15, r0
 8001fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe6:	4b60      	ldr	r3, [pc, #384]	; (8002168 <resistorr+0x2a8>)
 8001fe8:	edc3 7a00 	vstr	s15, [r3]
			  real1voltage = (raw1voltage*12.4100)/1000;
 8001fec:	4b5e      	ldr	r3, [pc, #376]	; (8002168 <resistorr+0x2a8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fab9 	bl	8000568 <__aeabi_f2d>
 8001ff6:	a352      	add	r3, pc, #328	; (adr r3, 8002140 <resistorr+0x280>)
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	f7fe fb0c 	bl	8000618 <__aeabi_dmul>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	4618      	mov	r0, r3
 8002006:	4621      	mov	r1, r4
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	4b57      	ldr	r3, [pc, #348]	; (800216c <resistorr+0x2ac>)
 800200e:	f7fe fc2d 	bl	800086c <__aeabi_ddiv>
 8002012:	4603      	mov	r3, r0
 8002014:	460c      	mov	r4, r1
 8002016:	4618      	mov	r0, r3
 8002018:	4621      	mov	r1, r4
 800201a:	f7fe fdf5 	bl	8000c08 <__aeabi_d2f>
 800201e:	4602      	mov	r2, r0
 8002020:	4b53      	ldr	r3, [pc, #332]	; (8002170 <resistorr+0x2b0>)
 8002022:	601a      	str	r2, [r3, #0]
			  if (z1 = 0) (resistor1 = 0);
 8002024:	4b53      	ldr	r3, [pc, #332]	; (8002174 <resistorr+0x2b4>)
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	4b51      	ldr	r3, [pc, #324]	; (8002174 <resistorr+0x2b4>)
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203a:	d003      	beq.n	8002044 <resistorr+0x184>
 800203c:	4b4e      	ldr	r3, [pc, #312]	; (8002178 <resistorr+0x2b8>)
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	601a      	str	r2, [r3, #0]


		  }
		  HAL_Delay(10);
 8002044:	200a      	movs	r0, #10
 8002046:	f001 fa2b 	bl	80034a0 <HAL_Delay>


		  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0))
 800204a:	2101      	movs	r1, #1
 800204c:	484b      	ldr	r0, [pc, #300]	; (800217c <resistorr+0x2bc>)
 800204e:	f002 f99d 	bl	800438c <HAL_GPIO_ReadPin>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d037      	beq.n	80020c8 <resistorr+0x208>
		  {
		 			  uint32_t time5=HAL_GetTick();
 8002058:	f001 fa16 	bl	8003488 <HAL_GetTick>
 800205c:	6078      	str	r0, [r7, #4]
		 			  while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)){
 800205e:	e02c      	b.n	80020ba <resistorr+0x1fa>
		 				  if (HAL_GetTick()-time5 > 300){
 8002060:	f001 fa12 	bl	8003488 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800206e:	d910      	bls.n	8002092 <resistorr+0x1d2>
		 					  time5=HAL_GetTick();
 8002070:	f001 fa0a 	bl	8003488 <HAL_GetTick>
 8002074:	6078      	str	r0, [r7, #4]
		 					  resistor1+=50;
 8002076:	4b40      	ldr	r3, [pc, #256]	; (8002178 <resistorr+0x2b8>)
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002180 <resistorr+0x2c0>
 8002080:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002084:	4b3c      	ldr	r3, [pc, #240]	; (8002178 <resistorr+0x2b8>)
 8002086:	edc3 7a00 	vstr	s15, [r3]
		 					  HAL_Delay(5);
 800208a:	2005      	movs	r0, #5
 800208c:	f001 fa08 	bl	80034a0 <HAL_Delay>
		 					  break;
 8002090:	e01a      	b.n	80020c8 <resistorr+0x208>
		 		   }
		 		 if (HAL_GetTick()-time5 > 20) {
 8002092:	f001 f9f9 	bl	8003488 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b14      	cmp	r3, #20
 800209e:	d90c      	bls.n	80020ba <resistorr+0x1fa>
		 		   resistor1 += 1;
 80020a0:	4b35      	ldr	r3, [pc, #212]	; (8002178 <resistorr+0x2b8>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020ae:	4b32      	ldr	r3, [pc, #200]	; (8002178 <resistorr+0x2b8>)
 80020b0:	edc3 7a00 	vstr	s15, [r3]

		 		   HAL_Delay(100);
 80020b4:	2064      	movs	r0, #100	; 0x64
 80020b6:	f001 f9f3 	bl	80034a0 <HAL_Delay>
		 			  while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)){
 80020ba:	2101      	movs	r1, #1
 80020bc:	482f      	ldr	r0, [pc, #188]	; (800217c <resistorr+0x2bc>)
 80020be:	f002 f965 	bl	800438c <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1cb      	bne.n	8002060 <resistorr+0x1a0>
		 		   }
		 		   }
		 		   }


		  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 80020c8:	2102      	movs	r1, #2
 80020ca:	482e      	ldr	r0, [pc, #184]	; (8002184 <resistorr+0x2c4>)
 80020cc:	f002 f95e 	bl	800438c <HAL_GPIO_ReadPin>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d073      	beq.n	80021be <resistorr+0x2fe>
		 			  uint32_t time4=HAL_GetTick();
 80020d6:	f001 f9d7 	bl	8003488 <HAL_GetTick>
 80020da:	6038      	str	r0, [r7, #0]
		 			  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 80020dc:	e068      	b.n	80021b0 <resistorr+0x2f0>
		 				  if (HAL_GetTick()-time4 > 300){
 80020de:	f001 f9d3 	bl	8003488 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80020ec:	d94c      	bls.n	8002188 <resistorr+0x2c8>
		 					  time4=HAL_GetTick();
 80020ee:	f001 f9cb 	bl	8003488 <HAL_GetTick>
 80020f2:	6038      	str	r0, [r7, #0]
		 					  resistor1 -= 50;
 80020f4:	4b20      	ldr	r3, [pc, #128]	; (8002178 <resistorr+0x2b8>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002180 <resistorr+0x2c0>
 80020fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002102:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <resistorr+0x2b8>)
 8002104:	edc3 7a00 	vstr	s15, [r3]
		 					  HAL_Delay(5);
 8002108:	2005      	movs	r0, #5
 800210a:	f001 f9c9 	bl	80034a0 <HAL_Delay>
		 					  break;
 800210e:	e056      	b.n	80021be <resistorr+0x2fe>
 8002110:	83126e98 	.word	0x83126e98
 8002114:	3fe9cac0 	.word	0x3fe9cac0
 8002118:	9999999a 	.word	0x9999999a
 800211c:	40a16d99 	.word	0x40a16d99
 8002120:	8644523f 	.word	0x8644523f
 8002124:	3f91bc55 	.word	0x3f91bc55
 8002128:	2bc72e28 	.word	0x2bc72e28
 800212c:	40670f10 	.word	0x40670f10
 8002130:	e76c8b44 	.word	0xe76c8b44
 8002134:	402b29fb 	.word	0x402b29fb
 8002138:	8644523f 	.word	0x8644523f
 800213c:	bf81bc55 	.word	0xbf81bc55
 8002140:	851eb852 	.word	0x851eb852
 8002144:	4028d1eb 	.word	0x4028d1eb
 8002148:	20000820 	.word	0x20000820
 800214c:	20000790 	.word	0x20000790
 8002150:	20000d48 	.word	0x20000d48
 8002154:	20000d28 	.word	0x20000d28
 8002158:	403e0000 	.word	0x403e0000
 800215c:	20000d3c 	.word	0x20000d3c
 8002160:	20000d2c 	.word	0x20000d2c
 8002164:	200007d8 	.word	0x200007d8
 8002168:	2000034c 	.word	0x2000034c
 800216c:	408f4000 	.word	0x408f4000
 8002170:	20000350 	.word	0x20000350
 8002174:	20000080 	.word	0x20000080
 8002178:	2000007c 	.word	0x2000007c
 800217c:	40020400 	.word	0x40020400
 8002180:	42480000 	.word	0x42480000
 8002184:	40020800 	.word	0x40020800
		 		   }
		 		   if (HAL_GetTick()-time4 > 20){
 8002188:	f001 f97e 	bl	8003488 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b14      	cmp	r3, #20
 8002194:	d90c      	bls.n	80021b0 <resistorr+0x2f0>
		 		   resistor1 -= 1;
 8002196:	4b74      	ldr	r3, [pc, #464]	; (8002368 <resistorr+0x4a8>)
 8002198:	edd3 7a00 	vldr	s15, [r3]
 800219c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021a4:	4b70      	ldr	r3, [pc, #448]	; (8002368 <resistorr+0x4a8>)
 80021a6:	edc3 7a00 	vstr	s15, [r3]

		 		   HAL_Delay(100);
 80021aa:	2064      	movs	r0, #100	; 0x64
 80021ac:	f001 f978 	bl	80034a0 <HAL_Delay>
		 			  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 80021b0:	2102      	movs	r1, #2
 80021b2:	486e      	ldr	r0, [pc, #440]	; (800236c <resistorr+0x4ac>)
 80021b4:	f002 f8ea 	bl	800438c <HAL_GPIO_ReadPin>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d18f      	bne.n	80020de <resistorr+0x21e>
		 		   }
		 		   }
		 		   }


		  z1 = (real1voltage / resistor1)*1000;
 80021be:	4b6c      	ldr	r3, [pc, #432]	; (8002370 <resistorr+0x4b0>)
 80021c0:	edd3 6a00 	vldr	s13, [r3]
 80021c4:	4b68      	ldr	r3, [pc, #416]	; (8002368 <resistorr+0x4a8>)
 80021c6:	ed93 7a00 	vldr	s14, [r3]
 80021ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021ce:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002374 <resistorr+0x4b4>
 80021d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d6:	4b68      	ldr	r3, [pc, #416]	; (8002378 <resistorr+0x4b8>)
 80021d8:	edc3 7a00 	vstr	s15, [r3]
		  //resistor1def = (real1voltage/z1)*100;
		  data31 = resistor1;
 80021dc:	4b62      	ldr	r3, [pc, #392]	; (8002368 <resistorr+0x4a8>)
 80021de:	edd3 7a00 	vldr	s15, [r3]
 80021e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021e6:	ee17 2a90 	vmov	r2, s15
 80021ea:	4b64      	ldr	r3, [pc, #400]	; (800237c <resistorr+0x4bc>)
 80021ec:	601a      	str	r2, [r3, #0]
		  data11 = z1;
 80021ee:	4b62      	ldr	r3, [pc, #392]	; (8002378 <resistorr+0x4b8>)
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021f8:	ee17 2a90 	vmov	r2, s15
 80021fc:	4b60      	ldr	r3, [pc, #384]	; (8002380 <resistorr+0x4c0>)
 80021fe:	601a      	str	r2, [r3, #0]

		  if(z1>100) (z1=100);
 8002200:	4b5d      	ldr	r3, [pc, #372]	; (8002378 <resistorr+0x4b8>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002384 <resistorr+0x4c4>
 800220a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800220e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002212:	dd02      	ble.n	800221a <resistorr+0x35a>
 8002214:	4b58      	ldr	r3, [pc, #352]	; (8002378 <resistorr+0x4b8>)
 8002216:	4a5c      	ldr	r2, [pc, #368]	; (8002388 <resistorr+0x4c8>)
 8002218:	601a      	str	r2, [r3, #0]
		  if(data11>100) (data11=100);
 800221a:	4b59      	ldr	r3, [pc, #356]	; (8002380 <resistorr+0x4c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d902      	bls.n	8002228 <resistorr+0x368>
 8002222:	4b57      	ldr	r3, [pc, #348]	; (8002380 <resistorr+0x4c0>)
 8002224:	2264      	movs	r2, #100	; 0x64
 8002226:	601a      	str	r2, [r3, #0]

		  SSD1306_GotoXY (1, 1);
 8002228:	2101      	movs	r1, #1
 800222a:	2001      	movs	r0, #1
 800222c:	f000 fa34 	bl	8002698 <SSD1306_GotoXY>
		  sprintf(yazi41,"Res| Curr %d            ",data11);
 8002230:	4b53      	ldr	r3, [pc, #332]	; (8002380 <resistorr+0x4c0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	4955      	ldr	r1, [pc, #340]	; (800238c <resistorr+0x4cc>)
 8002238:	4855      	ldr	r0, [pc, #340]	; (8002390 <resistorr+0x4d0>)
 800223a:	f005 f937 	bl	80074ac <siprintf>
		  SSD1306_Puts(yazi41,&Font_7x10,1);
 800223e:	2201      	movs	r2, #1
 8002240:	4954      	ldr	r1, [pc, #336]	; (8002394 <resistorr+0x4d4>)
 8002242:	4853      	ldr	r0, [pc, #332]	; (8002390 <resistorr+0x4d0>)
 8002244:	f000 fabe 	bl	80027c4 <SSD1306_Puts>
		  SSD1306_GotoXY(105,1);
 8002248:	2101      	movs	r1, #1
 800224a:	2069      	movs	r0, #105	; 0x69
 800224c:	f000 fa24 	bl	8002698 <SSD1306_GotoXY>
		  SSD1306_Puts("mA",&Font_7x10,1);
 8002250:	2201      	movs	r2, #1
 8002252:	4950      	ldr	r1, [pc, #320]	; (8002394 <resistorr+0x4d4>)
 8002254:	4850      	ldr	r0, [pc, #320]	; (8002398 <resistorr+0x4d8>)
 8002256:	f000 fab5 	bl	80027c4 <SSD1306_Puts>
		  sprintf(yazi31,"Temperature %d C    ",data21);
 800225a:	4b50      	ldr	r3, [pc, #320]	; (800239c <resistorr+0x4dc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	494f      	ldr	r1, [pc, #316]	; (80023a0 <resistorr+0x4e0>)
 8002262:	4850      	ldr	r0, [pc, #320]	; (80023a4 <resistorr+0x4e4>)
 8002264:	f005 f922 	bl	80074ac <siprintf>
		  SSD1306_GotoXY (1, 19);
 8002268:	2113      	movs	r1, #19
 800226a:	2001      	movs	r0, #1
 800226c:	f000 fa14 	bl	8002698 <SSD1306_GotoXY>
		  SSD1306_Puts(yazi31,&Font_7x10,1);
 8002270:	2201      	movs	r2, #1
 8002272:	4948      	ldr	r1, [pc, #288]	; (8002394 <resistorr+0x4d4>)
 8002274:	484b      	ldr	r0, [pc, #300]	; (80023a4 <resistorr+0x4e4>)
 8002276:	f000 faa5 	bl	80027c4 <SSD1306_Puts>
		  sprintf(yazi11,"%d       ",data31);
 800227a:	4b40      	ldr	r3, [pc, #256]	; (800237c <resistorr+0x4bc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	4949      	ldr	r1, [pc, #292]	; (80023a8 <resistorr+0x4e8>)
 8002282:	484a      	ldr	r0, [pc, #296]	; (80023ac <resistorr+0x4ec>)
 8002284:	f005 f912 	bl	80074ac <siprintf>
		  SSD1306_GotoXY (1, 37);
 8002288:	2125      	movs	r1, #37	; 0x25
 800228a:	2001      	movs	r0, #1
 800228c:	f000 fa04 	bl	8002698 <SSD1306_GotoXY>
		  SSD1306_Puts(yazi11,&Font_16x26,1);
 8002290:	2201      	movs	r2, #1
 8002292:	4947      	ldr	r1, [pc, #284]	; (80023b0 <resistorr+0x4f0>)
 8002294:	4845      	ldr	r0, [pc, #276]	; (80023ac <resistorr+0x4ec>)
 8002296:	f000 fa95 	bl	80027c4 <SSD1306_Puts>
		  SSD1306_GotoXY (75,37);
 800229a:	2125      	movs	r1, #37	; 0x25
 800229c:	204b      	movs	r0, #75	; 0x4b
 800229e:	f000 f9fb 	bl	8002698 <SSD1306_GotoXY>
		  SSD1306_Puts("ohm  ", &Font_16x26,1);
 80022a2:	2201      	movs	r2, #1
 80022a4:	4942      	ldr	r1, [pc, #264]	; (80023b0 <resistorr+0x4f0>)
 80022a6:	4843      	ldr	r0, [pc, #268]	; (80023b4 <resistorr+0x4f4>)
 80022a8:	f000 fa8c 	bl	80027c4 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 80022ac:	f000 f94e 	bl	800254c <SSD1306_UpdateScreen>
		  HAL_Delay(20);
 80022b0:	2014      	movs	r0, #20
 80022b2:	f001 f8f5 	bl	80034a0 <HAL_Delay>

		  if(resistor1<1) (resistor1=1);
 80022b6:	4b2c      	ldr	r3, [pc, #176]	; (8002368 <resistorr+0x4a8>)
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c8:	d503      	bpl.n	80022d2 <resistorr+0x412>
 80022ca:	4b27      	ldr	r3, [pc, #156]	; (8002368 <resistorr+0x4a8>)
 80022cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022d0:	601a      	str	r2, [r3, #0]
		  if(z1<0) (z1=0);
 80022d2:	4b29      	ldr	r3, [pc, #164]	; (8002378 <resistorr+0x4b8>)
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e0:	d503      	bpl.n	80022ea <resistorr+0x42a>
 80022e2:	4b25      	ldr	r3, [pc, #148]	; (8002378 <resistorr+0x4b8>)
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]


		  // z1 mA cinsinden değer bize voltaj lazım, resistor belli

		  y3 = z1*20;
 80022ea:	4b23      	ldr	r3, [pc, #140]	; (8002378 <resistorr+0x4b8>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80022f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f8:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <resistorr+0x4f8>)
 80022fa:	edc3 7a00 	vstr	s15, [r3]

		  x1 = y3 /((3.3/4096)*1000);
 80022fe:	4b2e      	ldr	r3, [pc, #184]	; (80023b8 <resistorr+0x4f8>)
 8002300:	ed93 7a00 	vldr	s14, [r3]
 8002304:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80023bc <resistorr+0x4fc>
 8002308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800230c:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <resistorr+0x500>)
 800230e:	edc3 7a00 	vstr	s15, [r3]

		  if(x1>4095) (x1 = 4095);
 8002312:	4b2b      	ldr	r3, [pc, #172]	; (80023c0 <resistorr+0x500>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80023c4 <resistorr+0x504>
 800231c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002324:	dd02      	ble.n	800232c <resistorr+0x46c>
 8002326:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <resistorr+0x500>)
 8002328:	4a27      	ldr	r2, [pc, #156]	; (80023c8 <resistorr+0x508>)
 800232a:	601a      	str	r2, [r3, #0]
		  if(z1>100) (z1=100);
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <resistorr+0x4b8>)
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002384 <resistorr+0x4c4>
 8002336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233e:	dd02      	ble.n	8002346 <resistorr+0x486>
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <resistorr+0x4b8>)
 8002342:	4a11      	ldr	r2, [pc, #68]	; (8002388 <resistorr+0x4c8>)
 8002344:	601a      	str	r2, [r3, #0]

		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, x1);
 8002346:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <resistorr+0x500>)
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002350:	ee17 3a90 	vmov	r3, s15
 8002354:	2200      	movs	r2, #0
 8002356:	2100      	movs	r1, #0
 8002358:	481c      	ldr	r0, [pc, #112]	; (80023cc <resistorr+0x50c>)
 800235a:	f001 fe47 	bl	8003fec <HAL_DAC_SetValue>

		 }
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bd90      	pop	{r4, r7, pc}
 8002366:	bf00      	nop
 8002368:	2000007c 	.word	0x2000007c
 800236c:	40020800 	.word	0x40020800
 8002370:	20000350 	.word	0x20000350
 8002374:	447a0000 	.word	0x447a0000
 8002378:	20000080 	.word	0x20000080
 800237c:	20000d44 	.word	0x20000d44
 8002380:	20000d40 	.word	0x20000d40
 8002384:	42c80000 	.word	0x42c80000
 8002388:	42c80000 	.word	0x42c80000
 800238c:	0800a5d4 	.word	0x0800a5d4
 8002390:	200000c4 	.word	0x200000c4
 8002394:	20000060 	.word	0x20000060
 8002398:	0800a5f0 	.word	0x0800a5f0
 800239c:	20000d2c 	.word	0x20000d2c
 80023a0:	0800a5f4 	.word	0x0800a5f4
 80023a4:	200000a4 	.word	0x200000a4
 80023a8:	0800a60c 	.word	0x0800a60c
 80023ac:	20000084 	.word	0x20000084
 80023b0:	20000070 	.word	0x20000070
 80023b4:	0800a618 	.word	0x0800a618
 80023b8:	20000d30 	.word	0x20000d30
 80023bc:	3f4e4000 	.word	0x3f4e4000
 80023c0:	20000354 	.word	0x20000354
 80023c4:	457ff000 	.word	0x457ff000
 80023c8:	457ff000 	.word	0x457ff000
 80023cc:	20000820 	.word	0x20000820

080023d0 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80023d6:	f000 fa1b 	bl	8002810 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80023da:	f644 6320 	movw	r3, #20000	; 0x4e20
 80023de:	2201      	movs	r2, #1
 80023e0:	2178      	movs	r1, #120	; 0x78
 80023e2:	4858      	ldr	r0, [pc, #352]	; (8002544 <SSD1306_Init+0x174>)
 80023e4:	f002 fa3a 	bl	800485c <HAL_I2C_IsDeviceReady>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e0a4      	b.n	800253c <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80023f2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80023f6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80023f8:	e002      	b.n	8002400 <SSD1306_Init+0x30>
		p--;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f9      	bne.n	80023fa <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002406:	22ae      	movs	r2, #174	; 0xae
 8002408:	2100      	movs	r1, #0
 800240a:	2078      	movs	r0, #120	; 0x78
 800240c:	f000 fa6e 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002410:	2220      	movs	r2, #32
 8002412:	2100      	movs	r1, #0
 8002414:	2078      	movs	r0, #120	; 0x78
 8002416:	f000 fa69 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800241a:	2210      	movs	r2, #16
 800241c:	2100      	movs	r1, #0
 800241e:	2078      	movs	r0, #120	; 0x78
 8002420:	f000 fa64 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002424:	22b0      	movs	r2, #176	; 0xb0
 8002426:	2100      	movs	r1, #0
 8002428:	2078      	movs	r0, #120	; 0x78
 800242a:	f000 fa5f 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800242e:	22c8      	movs	r2, #200	; 0xc8
 8002430:	2100      	movs	r1, #0
 8002432:	2078      	movs	r0, #120	; 0x78
 8002434:	f000 fa5a 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002438:	2200      	movs	r2, #0
 800243a:	2100      	movs	r1, #0
 800243c:	2078      	movs	r0, #120	; 0x78
 800243e:	f000 fa55 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002442:	2210      	movs	r2, #16
 8002444:	2100      	movs	r1, #0
 8002446:	2078      	movs	r0, #120	; 0x78
 8002448:	f000 fa50 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800244c:	2240      	movs	r2, #64	; 0x40
 800244e:	2100      	movs	r1, #0
 8002450:	2078      	movs	r0, #120	; 0x78
 8002452:	f000 fa4b 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002456:	2281      	movs	r2, #129	; 0x81
 8002458:	2100      	movs	r1, #0
 800245a:	2078      	movs	r0, #120	; 0x78
 800245c:	f000 fa46 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002460:	22ff      	movs	r2, #255	; 0xff
 8002462:	2100      	movs	r1, #0
 8002464:	2078      	movs	r0, #120	; 0x78
 8002466:	f000 fa41 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800246a:	22a1      	movs	r2, #161	; 0xa1
 800246c:	2100      	movs	r1, #0
 800246e:	2078      	movs	r0, #120	; 0x78
 8002470:	f000 fa3c 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002474:	22a6      	movs	r2, #166	; 0xa6
 8002476:	2100      	movs	r1, #0
 8002478:	2078      	movs	r0, #120	; 0x78
 800247a:	f000 fa37 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800247e:	22a8      	movs	r2, #168	; 0xa8
 8002480:	2100      	movs	r1, #0
 8002482:	2078      	movs	r0, #120	; 0x78
 8002484:	f000 fa32 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002488:	223f      	movs	r2, #63	; 0x3f
 800248a:	2100      	movs	r1, #0
 800248c:	2078      	movs	r0, #120	; 0x78
 800248e:	f000 fa2d 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002492:	22a4      	movs	r2, #164	; 0xa4
 8002494:	2100      	movs	r1, #0
 8002496:	2078      	movs	r0, #120	; 0x78
 8002498:	f000 fa28 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800249c:	22d3      	movs	r2, #211	; 0xd3
 800249e:	2100      	movs	r1, #0
 80024a0:	2078      	movs	r0, #120	; 0x78
 80024a2:	f000 fa23 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	2078      	movs	r0, #120	; 0x78
 80024ac:	f000 fa1e 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80024b0:	22d5      	movs	r2, #213	; 0xd5
 80024b2:	2100      	movs	r1, #0
 80024b4:	2078      	movs	r0, #120	; 0x78
 80024b6:	f000 fa19 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80024ba:	22f0      	movs	r2, #240	; 0xf0
 80024bc:	2100      	movs	r1, #0
 80024be:	2078      	movs	r0, #120	; 0x78
 80024c0:	f000 fa14 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80024c4:	22d9      	movs	r2, #217	; 0xd9
 80024c6:	2100      	movs	r1, #0
 80024c8:	2078      	movs	r0, #120	; 0x78
 80024ca:	f000 fa0f 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80024ce:	2222      	movs	r2, #34	; 0x22
 80024d0:	2100      	movs	r1, #0
 80024d2:	2078      	movs	r0, #120	; 0x78
 80024d4:	f000 fa0a 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80024d8:	22da      	movs	r2, #218	; 0xda
 80024da:	2100      	movs	r1, #0
 80024dc:	2078      	movs	r0, #120	; 0x78
 80024de:	f000 fa05 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80024e2:	2212      	movs	r2, #18
 80024e4:	2100      	movs	r1, #0
 80024e6:	2078      	movs	r0, #120	; 0x78
 80024e8:	f000 fa00 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80024ec:	22db      	movs	r2, #219	; 0xdb
 80024ee:	2100      	movs	r1, #0
 80024f0:	2078      	movs	r0, #120	; 0x78
 80024f2:	f000 f9fb 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80024f6:	2220      	movs	r2, #32
 80024f8:	2100      	movs	r1, #0
 80024fa:	2078      	movs	r0, #120	; 0x78
 80024fc:	f000 f9f6 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002500:	228d      	movs	r2, #141	; 0x8d
 8002502:	2100      	movs	r1, #0
 8002504:	2078      	movs	r0, #120	; 0x78
 8002506:	f000 f9f1 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800250a:	2214      	movs	r2, #20
 800250c:	2100      	movs	r1, #0
 800250e:	2078      	movs	r0, #120	; 0x78
 8002510:	f000 f9ec 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002514:	22af      	movs	r2, #175	; 0xaf
 8002516:	2100      	movs	r1, #0
 8002518:	2078      	movs	r0, #120	; 0x78
 800251a:	f000 f9e7 	bl	80028ec <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800251e:	2000      	movs	r0, #0
 8002520:	f000 f842 	bl	80025a8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002524:	f000 f812 	bl	800254c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <SSD1306_Init+0x178>)
 800252a:	2200      	movs	r2, #0
 800252c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <SSD1306_Init+0x178>)
 8002530:	2200      	movs	r2, #0
 8002532:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <SSD1306_Init+0x178>)
 8002536:	2201      	movs	r2, #1
 8002538:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800253a:	2301      	movs	r3, #1
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000c94 	.word	0x20000c94
 8002548:	20000758 	.word	0x20000758

0800254c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002552:	2300      	movs	r3, #0
 8002554:	71fb      	strb	r3, [r7, #7]
 8002556:	e01d      	b.n	8002594 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	3b50      	subs	r3, #80	; 0x50
 800255c:	b2db      	uxtb	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	2100      	movs	r1, #0
 8002562:	2078      	movs	r0, #120	; 0x78
 8002564:	f000 f9c2 	bl	80028ec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002568:	2200      	movs	r2, #0
 800256a:	2100      	movs	r1, #0
 800256c:	2078      	movs	r0, #120	; 0x78
 800256e:	f000 f9bd 	bl	80028ec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002572:	2210      	movs	r2, #16
 8002574:	2100      	movs	r1, #0
 8002576:	2078      	movs	r0, #120	; 0x78
 8002578:	f000 f9b8 	bl	80028ec <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	01db      	lsls	r3, r3, #7
 8002580:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <SSD1306_UpdateScreen+0x58>)
 8002582:	441a      	add	r2, r3
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	2140      	movs	r1, #64	; 0x40
 8002588:	2078      	movs	r0, #120	; 0x78
 800258a:	f000 f955 	bl	8002838 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	3301      	adds	r3, #1
 8002592:	71fb      	strb	r3, [r7, #7]
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	2b07      	cmp	r3, #7
 8002598:	d9de      	bls.n	8002558 <SSD1306_UpdateScreen+0xc>
	}
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000358 	.word	0x20000358

080025a8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <SSD1306_Fill+0x14>
 80025b8:	2300      	movs	r3, #0
 80025ba:	e000      	b.n	80025be <SSD1306_Fill+0x16>
 80025bc:	23ff      	movs	r3, #255	; 0xff
 80025be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c2:	4619      	mov	r1, r3
 80025c4:	4803      	ldr	r0, [pc, #12]	; (80025d4 <SSD1306_Fill+0x2c>)
 80025c6:	f004 f925 	bl	8006814 <memset>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000358 	.word	0x20000358

080025d8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	80fb      	strh	r3, [r7, #6]
 80025e2:	460b      	mov	r3, r1
 80025e4:	80bb      	strh	r3, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	70fb      	strb	r3, [r7, #3]
	if (
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	2b7f      	cmp	r3, #127	; 0x7f
 80025ee:	d848      	bhi.n	8002682 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80025f0:	88bb      	ldrh	r3, [r7, #4]
 80025f2:	2b3f      	cmp	r3, #63	; 0x3f
 80025f4:	d845      	bhi.n	8002682 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80025f6:	4b26      	ldr	r3, [pc, #152]	; (8002690 <SSD1306_DrawPixel+0xb8>)
 80025f8:	791b      	ldrb	r3, [r3, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d006      	beq.n	800260c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d11a      	bne.n	8002648 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002612:	88fa      	ldrh	r2, [r7, #6]
 8002614:	88bb      	ldrh	r3, [r7, #4]
 8002616:	08db      	lsrs	r3, r3, #3
 8002618:	b298      	uxth	r0, r3
 800261a:	4603      	mov	r3, r0
 800261c:	01db      	lsls	r3, r3, #7
 800261e:	4413      	add	r3, r2
 8002620:	4a1c      	ldr	r2, [pc, #112]	; (8002694 <SSD1306_DrawPixel+0xbc>)
 8002622:	5cd3      	ldrb	r3, [r2, r3]
 8002624:	b25a      	sxtb	r2, r3
 8002626:	88bb      	ldrh	r3, [r7, #4]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	2101      	movs	r1, #1
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	b25b      	sxtb	r3, r3
 8002634:	4313      	orrs	r3, r2
 8002636:	b259      	sxtb	r1, r3
 8002638:	88fa      	ldrh	r2, [r7, #6]
 800263a:	4603      	mov	r3, r0
 800263c:	01db      	lsls	r3, r3, #7
 800263e:	4413      	add	r3, r2
 8002640:	b2c9      	uxtb	r1, r1
 8002642:	4a14      	ldr	r2, [pc, #80]	; (8002694 <SSD1306_DrawPixel+0xbc>)
 8002644:	54d1      	strb	r1, [r2, r3]
 8002646:	e01d      	b.n	8002684 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002648:	88fa      	ldrh	r2, [r7, #6]
 800264a:	88bb      	ldrh	r3, [r7, #4]
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	b298      	uxth	r0, r3
 8002650:	4603      	mov	r3, r0
 8002652:	01db      	lsls	r3, r3, #7
 8002654:	4413      	add	r3, r2
 8002656:	4a0f      	ldr	r2, [pc, #60]	; (8002694 <SSD1306_DrawPixel+0xbc>)
 8002658:	5cd3      	ldrb	r3, [r2, r3]
 800265a:	b25a      	sxtb	r2, r3
 800265c:	88bb      	ldrh	r3, [r7, #4]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	2101      	movs	r1, #1
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	b25b      	sxtb	r3, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	b25b      	sxtb	r3, r3
 800266e:	4013      	ands	r3, r2
 8002670:	b259      	sxtb	r1, r3
 8002672:	88fa      	ldrh	r2, [r7, #6]
 8002674:	4603      	mov	r3, r0
 8002676:	01db      	lsls	r3, r3, #7
 8002678:	4413      	add	r3, r2
 800267a:	b2c9      	uxtb	r1, r1
 800267c:	4a05      	ldr	r2, [pc, #20]	; (8002694 <SSD1306_DrawPixel+0xbc>)
 800267e:	54d1      	strb	r1, [r2, r3]
 8002680:	e000      	b.n	8002684 <SSD1306_DrawPixel+0xac>
		return;
 8002682:	bf00      	nop
	}
}
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000758 	.word	0x20000758
 8002694:	20000358 	.word	0x20000358

08002698 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	460a      	mov	r2, r1
 80026a2:	80fb      	strh	r3, [r7, #6]
 80026a4:	4613      	mov	r3, r2
 80026a6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80026a8:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <SSD1306_GotoXY+0x28>)
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80026ae:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <SSD1306_GotoXY+0x28>)
 80026b0:	88bb      	ldrh	r3, [r7, #4]
 80026b2:	8053      	strh	r3, [r2, #2]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	20000758 	.word	0x20000758

080026c4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	71fb      	strb	r3, [r7, #7]
 80026d0:	4613      	mov	r3, r2
 80026d2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80026d4:	4b3a      	ldr	r3, [pc, #232]	; (80027c0 <SSD1306_Putc+0xfc>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	4413      	add	r3, r2
	if (
 80026e0:	2b7f      	cmp	r3, #127	; 0x7f
 80026e2:	dc07      	bgt.n	80026f4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80026e4:	4b36      	ldr	r3, [pc, #216]	; (80027c0 <SSD1306_Putc+0xfc>)
 80026e6:	885b      	ldrh	r3, [r3, #2]
 80026e8:	461a      	mov	r2, r3
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	785b      	ldrb	r3, [r3, #1]
 80026ee:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80026f0:	2b3f      	cmp	r3, #63	; 0x3f
 80026f2:	dd01      	ble.n	80026f8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	e05e      	b.n	80027b6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	e04b      	b.n	8002796 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	3b20      	subs	r3, #32
 8002706:	6839      	ldr	r1, [r7, #0]
 8002708:	7849      	ldrb	r1, [r1, #1]
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4619      	mov	r1, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	440b      	add	r3, r1
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	e030      	b.n	8002784 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d010      	beq.n	8002754 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002732:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <SSD1306_Putc+0xfc>)
 8002734:	881a      	ldrh	r2, [r3, #0]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	b29b      	uxth	r3, r3
 800273a:	4413      	add	r3, r2
 800273c:	b298      	uxth	r0, r3
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <SSD1306_Putc+0xfc>)
 8002740:	885a      	ldrh	r2, [r3, #2]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	b29b      	uxth	r3, r3
 8002746:	4413      	add	r3, r2
 8002748:	b29b      	uxth	r3, r3
 800274a:	79ba      	ldrb	r2, [r7, #6]
 800274c:	4619      	mov	r1, r3
 800274e:	f7ff ff43 	bl	80025d8 <SSD1306_DrawPixel>
 8002752:	e014      	b.n	800277e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002754:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <SSD1306_Putc+0xfc>)
 8002756:	881a      	ldrh	r2, [r3, #0]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	b29b      	uxth	r3, r3
 800275c:	4413      	add	r3, r2
 800275e:	b298      	uxth	r0, r3
 8002760:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <SSD1306_Putc+0xfc>)
 8002762:	885a      	ldrh	r2, [r3, #2]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	b29b      	uxth	r3, r3
 8002768:	4413      	add	r3, r2
 800276a:	b299      	uxth	r1, r3
 800276c:	79bb      	ldrb	r3, [r7, #6]
 800276e:	2b00      	cmp	r3, #0
 8002770:	bf0c      	ite	eq
 8002772:	2301      	moveq	r3, #1
 8002774:	2300      	movne	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	f7ff ff2d 	bl	80025d8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	3301      	adds	r3, #1
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4293      	cmp	r3, r2
 800278e:	d3c8      	bcc.n	8002722 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	3301      	adds	r3, #1
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	785b      	ldrb	r3, [r3, #1]
 800279a:	461a      	mov	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	4293      	cmp	r3, r2
 80027a0:	d3ad      	bcc.n	80026fe <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <SSD1306_Putc+0xfc>)
 80027a4:	881a      	ldrh	r2, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <SSD1306_Putc+0xfc>)
 80027b2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80027b4:	79fb      	ldrb	r3, [r7, #7]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000758 	.word	0x20000758

080027c4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	4613      	mov	r3, r2
 80027d0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80027d2:	e012      	b.n	80027fa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	79fa      	ldrb	r2, [r7, #7]
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff71 	bl	80026c4 <SSD1306_Putc>
 80027e2:	4603      	mov	r3, r0
 80027e4:	461a      	mov	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d002      	beq.n	80027f4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	e008      	b.n	8002806 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3301      	adds	r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1e8      	bne.n	80027d4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	781b      	ldrb	r3, [r3, #0]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002816:	4b07      	ldr	r3, [pc, #28]	; (8002834 <ssd1306_I2C_Init+0x24>)
 8002818:	607b      	str	r3, [r7, #4]
	while(p>0)
 800281a:	e002      	b.n	8002822 <ssd1306_I2C_Init+0x12>
		p--;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f9      	bne.n	800281c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	0003d090 	.word	0x0003d090

08002838 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002838:	b5b0      	push	{r4, r5, r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af02      	add	r7, sp, #8
 800283e:	603a      	str	r2, [r7, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	4603      	mov	r3, r0
 8002844:	71fb      	strb	r3, [r7, #7]
 8002846:	460b      	mov	r3, r1
 8002848:	71bb      	strb	r3, [r7, #6]
 800284a:	4613      	mov	r3, r2
 800284c:	80bb      	strh	r3, [r7, #4]
 800284e:	466b      	mov	r3, sp
 8002850:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 8002852:	88bb      	ldrh	r3, [r7, #4]
 8002854:	1c58      	adds	r0, r3, #1
 8002856:	1e43      	subs	r3, r0, #1
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	4603      	mov	r3, r0
 800285c:	4619      	mov	r1, r3
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	f04f 0400 	mov.w	r4, #0
 800286a:	00d4      	lsls	r4, r2, #3
 800286c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002870:	00cb      	lsls	r3, r1, #3
 8002872:	4603      	mov	r3, r0
 8002874:	4619      	mov	r1, r3
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	f04f 0400 	mov.w	r4, #0
 8002882:	00d4      	lsls	r4, r2, #3
 8002884:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002888:	00cb      	lsls	r3, r1, #3
 800288a:	4603      	mov	r3, r0
 800288c:	3307      	adds	r3, #7
 800288e:	08db      	lsrs	r3, r3, #3
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	ebad 0d03 	sub.w	sp, sp, r3
 8002896:	ab02      	add	r3, sp, #8
 8002898:	3300      	adds	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	79ba      	ldrb	r2, [r7, #6]
 80028a0:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
 80028a6:	e00a      	b.n	80028be <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	441a      	add	r2, r3
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	7811      	ldrb	r1, [r2, #0]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	3301      	adds	r3, #1
 80028bc:	75fb      	strb	r3, [r7, #23]
 80028be:	7dfb      	ldrb	r3, [r7, #23]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	88ba      	ldrh	r2, [r7, #4]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d2ef      	bcs.n	80028a8 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, count, 10);
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	b299      	uxth	r1, r3
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	88b8      	ldrh	r0, [r7, #4]
 80028d0:	230a      	movs	r3, #10
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	4603      	mov	r3, r0
 80028d6:	4804      	ldr	r0, [pc, #16]	; (80028e8 <ssd1306_I2C_WriteMulti+0xb0>)
 80028d8:	f001 fec2 	bl	8004660 <HAL_I2C_Master_Transmit>
 80028dc:	46ad      	mov	sp, r5
}
 80028de:	bf00      	nop
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bdb0      	pop	{r4, r5, r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000c94 	.word	0x20000c94

080028ec <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
 80028f6:	460b      	mov	r3, r1
 80028f8:	71bb      	strb	r3, [r7, #6]
 80028fa:	4613      	mov	r3, r2
 80028fc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80028fe:	79bb      	ldrb	r3, [r7, #6]
 8002900:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002902:	797b      	ldrb	r3, [r7, #5]
 8002904:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	b299      	uxth	r1, r3
 800290a:	f107 020c 	add.w	r2, r7, #12
 800290e:	230a      	movs	r3, #10
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	2302      	movs	r3, #2
 8002914:	4803      	ldr	r0, [pc, #12]	; (8002924 <ssd1306_I2C_Write+0x38>)
 8002916:	f001 fea3 	bl	8004660 <HAL_I2C_Master_Transmit>
}
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000c94 	.word	0x20000c94

08002928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HAL_MspInit+0x4c>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	4a0f      	ldr	r2, [pc, #60]	; (8002974 <HAL_MspInit+0x4c>)
 8002938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800293c:	6453      	str	r3, [r2, #68]	; 0x44
 800293e:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <HAL_MspInit+0x4c>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_MspInit+0x4c>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	4a08      	ldr	r2, [pc, #32]	; (8002974 <HAL_MspInit+0x4c>)
 8002954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002958:	6413      	str	r3, [r2, #64]	; 0x40
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_MspInit+0x4c>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800

08002978 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08c      	sub	sp, #48	; 0x30
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 031c 	add.w	r3, r7, #28
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a2e      	ldr	r2, [pc, #184]	; (8002a50 <HAL_ADC_MspInit+0xd8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d128      	bne.n	80029ec <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_ADC_MspInit+0xdc>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	4a2c      	ldr	r2, [pc, #176]	; (8002a54 <HAL_ADC_MspInit+0xdc>)
 80029a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a8:	6453      	str	r3, [r2, #68]	; 0x44
 80029aa:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <HAL_ADC_MspInit+0xdc>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_ADC_MspInit+0xdc>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <HAL_ADC_MspInit+0xdc>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <HAL_ADC_MspInit+0xdc>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029d2:	2308      	movs	r3, #8
 80029d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029d6:	2303      	movs	r3, #3
 80029d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	f107 031c 	add.w	r3, r7, #28
 80029e2:	4619      	mov	r1, r3
 80029e4:	481c      	ldr	r0, [pc, #112]	; (8002a58 <HAL_ADC_MspInit+0xe0>)
 80029e6:	f001 fb27 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80029ea:	e02c      	b.n	8002a46 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC3)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1a      	ldr	r2, [pc, #104]	; (8002a5c <HAL_ADC_MspInit+0xe4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d127      	bne.n	8002a46 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <HAL_ADC_MspInit+0xdc>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <HAL_ADC_MspInit+0xdc>)
 8002a00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a04:	6453      	str	r3, [r2, #68]	; 0x44
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_ADC_MspInit+0xdc>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <HAL_ADC_MspInit+0xdc>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <HAL_ADC_MspInit+0xdc>)
 8002a1c:	f043 0304 	orr.w	r3, r3, #4
 8002a20:	6313      	str	r3, [r2, #48]	; 0x30
 8002a22:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <HAL_ADC_MspInit+0xdc>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a32:	2303      	movs	r3, #3
 8002a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3a:	f107 031c 	add.w	r3, r7, #28
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4807      	ldr	r0, [pc, #28]	; (8002a60 <HAL_ADC_MspInit+0xe8>)
 8002a42:	f001 faf9 	bl	8004038 <HAL_GPIO_Init>
}
 8002a46:	bf00      	nop
 8002a48:	3730      	adds	r7, #48	; 0x30
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40012000 	.word	0x40012000
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40020000 	.word	0x40020000
 8002a5c:	40012200 	.word	0x40012200
 8002a60:	40020800 	.word	0x40020800

08002a64 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a17      	ldr	r2, [pc, #92]	; (8002ae0 <HAL_DAC_MspInit+0x7c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d127      	bne.n	8002ad6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <HAL_DAC_MspInit+0x80>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a15      	ldr	r2, [pc, #84]	; (8002ae4 <HAL_DAC_MspInit+0x80>)
 8002a90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <HAL_DAC_MspInit+0x80>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <HAL_DAC_MspInit+0x80>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <HAL_DAC_MspInit+0x80>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <HAL_DAC_MspInit+0x80>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002abe:	2310      	movs	r3, #16
 8002ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <HAL_DAC_MspInit+0x84>)
 8002ad2:	f001 fab1 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002ad6:	bf00      	nop
 8002ad8:	3728      	adds	r7, #40	; 0x28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40007400 	.word	0x40007400
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40020000 	.word	0x40020000

08002aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <HAL_I2C_MspInit+0x84>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d12b      	bne.n	8002b66 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_I2C_MspInit+0x88>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <HAL_I2C_MspInit+0x88>)
 8002b18:	f043 0320 	orr.w	r3, r3, #32
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <HAL_I2C_MspInit+0x88>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b2e:	2312      	movs	r3, #18
 8002b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b32:	2301      	movs	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b36:	2303      	movs	r3, #3
 8002b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	4619      	mov	r1, r3
 8002b44:	480c      	ldr	r0, [pc, #48]	; (8002b78 <HAL_I2C_MspInit+0x8c>)
 8002b46:	f001 fa77 	bl	8004038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_I2C_MspInit+0x88>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <HAL_I2C_MspInit+0x88>)
 8002b54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_I2C_MspInit+0x88>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b66:	bf00      	nop
 8002b68:	3728      	adds	r7, #40	; 0x28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40005800 	.word	0x40005800
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40021400 	.word	0x40021400

08002b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08c      	sub	sp, #48	; 0x30
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 031c 	add.w	r3, r7, #28
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a42      	ldr	r2, [pc, #264]	; (8002ca4 <HAL_UART_MspInit+0x128>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d14b      	bne.n	8002c36 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	4b41      	ldr	r3, [pc, #260]	; (8002ca8 <HAL_UART_MspInit+0x12c>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	4a40      	ldr	r2, [pc, #256]	; (8002ca8 <HAL_UART_MspInit+0x12c>)
 8002ba8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40
 8002bae:	4b3e      	ldr	r3, [pc, #248]	; (8002ca8 <HAL_UART_MspInit+0x12c>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb6:	61bb      	str	r3, [r7, #24]
 8002bb8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	4b3a      	ldr	r3, [pc, #232]	; (8002ca8 <HAL_UART_MspInit+0x12c>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	4a39      	ldr	r2, [pc, #228]	; (8002ca8 <HAL_UART_MspInit+0x12c>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bca:	4b37      	ldr	r3, [pc, #220]	; (8002ca8 <HAL_UART_MspInit+0x12c>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	4b33      	ldr	r3, [pc, #204]	; (8002ca8 <HAL_UART_MspInit+0x12c>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	4a32      	ldr	r2, [pc, #200]	; (8002ca8 <HAL_UART_MspInit+0x12c>)
 8002be0:	f043 0308 	orr.w	r3, r3, #8
 8002be4:	6313      	str	r3, [r2, #48]	; 0x30
 8002be6:	4b30      	ldr	r3, [pc, #192]	; (8002ca8 <HAL_UART_MspInit+0x12c>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c00:	2303      	movs	r3, #3
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c04:	2308      	movs	r3, #8
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c08:	f107 031c 	add.w	r3, r7, #28
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4827      	ldr	r0, [pc, #156]	; (8002cac <HAL_UART_MspInit+0x130>)
 8002c10:	f001 fa12 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c14:	2304      	movs	r3, #4
 8002c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c20:	2303      	movs	r3, #3
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c24:	2308      	movs	r3, #8
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c28:	f107 031c 	add.w	r3, r7, #28
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4820      	ldr	r0, [pc, #128]	; (8002cb0 <HAL_UART_MspInit+0x134>)
 8002c30:	f001 fa02 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c34:	e031      	b.n	8002c9a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1e      	ldr	r2, [pc, #120]	; (8002cb4 <HAL_UART_MspInit+0x138>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d12c      	bne.n	8002c9a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <HAL_UART_MspInit+0x12c>)
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	4a17      	ldr	r2, [pc, #92]	; (8002ca8 <HAL_UART_MspInit+0x12c>)
 8002c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c50:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <HAL_UART_MspInit+0x12c>)
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <HAL_UART_MspInit+0x12c>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	4a10      	ldr	r2, [pc, #64]	; (8002ca8 <HAL_UART_MspInit+0x12c>)
 8002c66:	f043 0308 	orr.w	r3, r3, #8
 8002c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <HAL_UART_MspInit+0x12c>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c86:	2303      	movs	r3, #3
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c8e:	f107 031c 	add.w	r3, r7, #28
 8002c92:	4619      	mov	r1, r3
 8002c94:	4806      	ldr	r0, [pc, #24]	; (8002cb0 <HAL_UART_MspInit+0x134>)
 8002c96:	f001 f9cf 	bl	8004038 <HAL_GPIO_Init>
}
 8002c9a:	bf00      	nop
 8002c9c:	3730      	adds	r7, #48	; 0x30
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40005000 	.word	0x40005000
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020800 	.word	0x40020800
 8002cb0:	40020c00 	.word	0x40020c00
 8002cb4:	40004800 	.word	0x40004800

08002cb8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd8:	d13f      	bne.n	8002d5a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <HAL_PCD_MspInit+0xac>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a20      	ldr	r2, [pc, #128]	; (8002d64 <HAL_PCD_MspInit+0xac>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b1e      	ldr	r3, [pc, #120]	; (8002d64 <HAL_PCD_MspInit+0xac>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002cf6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d04:	2303      	movs	r3, #3
 8002d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d08:	230a      	movs	r3, #10
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	4619      	mov	r1, r3
 8002d12:	4815      	ldr	r0, [pc, #84]	; (8002d68 <HAL_PCD_MspInit+0xb0>)
 8002d14:	f001 f990 	bl	8004038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	480e      	ldr	r0, [pc, #56]	; (8002d68 <HAL_PCD_MspInit+0xb0>)
 8002d2e:	f001 f983 	bl	8004038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <HAL_PCD_MspInit+0xac>)
 8002d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d36:	4a0b      	ldr	r2, [pc, #44]	; (8002d64 <HAL_PCD_MspInit+0xac>)
 8002d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3c:	6353      	str	r3, [r2, #52]	; 0x34
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_PCD_MspInit+0xac>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <HAL_PCD_MspInit+0xac>)
 8002d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_PCD_MspInit+0xac>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002d5a:	bf00      	nop
 8002d5c:	3728      	adds	r7, #40	; 0x28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40020000 	.word	0x40020000

08002d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d7e:	e7fe      	b.n	8002d7e <HardFault_Handler+0x4>

08002d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <MemManage_Handler+0x4>

08002d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d8a:	e7fe      	b.n	8002d8a <BusFault_Handler+0x4>

08002d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d90:	e7fe      	b.n	8002d90 <UsageFault_Handler+0x4>

08002d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dc0:	f000 fb4e 	bl	8003460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <_sbrk+0x50>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <_sbrk+0x16>
		heap_end = &end;
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <_sbrk+0x50>)
 8002dda:	4a10      	ldr	r2, [pc, #64]	; (8002e1c <_sbrk+0x54>)
 8002ddc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <_sbrk+0x50>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <_sbrk+0x50>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	466a      	mov	r2, sp
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d907      	bls.n	8002e02 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002df2:	f003 fce5 	bl	80067c0 <__errno>
 8002df6:	4602      	mov	r2, r0
 8002df8:	230c      	movs	r3, #12
 8002dfa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002e00:	e006      	b.n	8002e10 <_sbrk+0x48>
	}

	heap_end += incr;
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <_sbrk+0x50>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	4a03      	ldr	r2, [pc, #12]	; (8002e18 <_sbrk+0x50>)
 8002e0c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000760 	.word	0x20000760
 8002e1c:	20000d78 	.word	0x20000d78

08002e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e24:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <SystemInit+0x28>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	4a07      	ldr	r2, [pc, #28]	; (8002e48 <SystemInit+0x28>)
 8002e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <SystemInit+0x28>)
 8002e36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e3a:	609a      	str	r2, [r3, #8]
#endif
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	e000ed00 	.word	0xe000ed00
 8002e4c:	00000000 	.word	0x00000000

08002e50 <watter>:
float temp2 , vtemp2 , adcval2 ;


void watter(void)

{
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002e56:	2100      	movs	r1, #0
 8002e58:	4897      	ldr	r0, [pc, #604]	; (80030b8 <watter+0x268>)
 8002e5a:	f001 f814 	bl	8003e86 <HAL_DAC_Start>
    HAL_ADC_Start(&hadc1);
 8002e5e:	4897      	ldr	r0, [pc, #604]	; (80030bc <watter+0x26c>)
 8002e60:	f000 fb84 	bl	800356c <HAL_ADC_Start>
    adcval2 = HAL_ADC_GetValue(&hadc1);
 8002e64:	4895      	ldr	r0, [pc, #596]	; (80030bc <watter+0x26c>)
 8002e66:	f000 fccb 	bl	8003800 <HAL_ADC_GetValue>
 8002e6a:	ee07 0a90 	vmov	s15, r0
 8002e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e72:	4b93      	ldr	r3, [pc, #588]	; (80030c0 <watter+0x270>)
 8002e74:	edc3 7a00 	vstr	s15, [r3]
    vtemp2 = adcval2*0.806;
 8002e78:	4b91      	ldr	r3, [pc, #580]	; (80030c0 <watter+0x270>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd fb73 	bl	8000568 <__aeabi_f2d>
 8002e82:	a37f      	add	r3, pc, #508	; (adr r3, 8003080 <watter+0x230>)
 8002e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e88:	f7fd fbc6 	bl	8000618 <__aeabi_dmul>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	460c      	mov	r4, r1
 8002e90:	4618      	mov	r0, r3
 8002e92:	4621      	mov	r1, r4
 8002e94:	f7fd feb8 	bl	8000c08 <__aeabi_d2f>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b8a      	ldr	r3, [pc, #552]	; (80030c4 <watter+0x274>)
 8002e9c:	601a      	str	r2, [r3, #0]
    temp2 = ((13.582 - sqrt((13.582*13.582)+(4*0.00433)*(2230.8-vtemp2)))/(2*-0.00433))+30;
 8002e9e:	4b89      	ldr	r3, [pc, #548]	; (80030c4 <watter+0x274>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd fb60 	bl	8000568 <__aeabi_f2d>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	460c      	mov	r4, r1
 8002eac:	461a      	mov	r2, r3
 8002eae:	4623      	mov	r3, r4
 8002eb0:	a175      	add	r1, pc, #468	; (adr r1, 8003088 <watter+0x238>)
 8002eb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002eb6:	f7fd f9f7 	bl	80002a8 <__aeabi_dsub>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	a373      	add	r3, pc, #460	; (adr r3, 8003090 <watter+0x240>)
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	f7fd fba6 	bl	8000618 <__aeabi_dmul>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	460c      	mov	r4, r1
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	a370      	add	r3, pc, #448	; (adr r3, 8003098 <watter+0x248>)
 8002ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eda:	f7fd f9e7 	bl	80002ac <__adddf3>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	460c      	mov	r4, r1
 8002ee2:	ec44 3b17 	vmov	d7, r3, r4
 8002ee6:	eeb0 0a47 	vmov.f32	s0, s14
 8002eea:	eef0 0a67 	vmov.f32	s1, s15
 8002eee:	f007 f9d1 	bl	800a294 <sqrt>
 8002ef2:	ec54 3b10 	vmov	r3, r4, d0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4623      	mov	r3, r4
 8002efa:	a169      	add	r1, pc, #420	; (adr r1, 80030a0 <watter+0x250>)
 8002efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f00:	f7fd f9d2 	bl	80002a8 <__aeabi_dsub>
 8002f04:	4603      	mov	r3, r0
 8002f06:	460c      	mov	r4, r1
 8002f08:	4618      	mov	r0, r3
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	a366      	add	r3, pc, #408	; (adr r3, 80030a8 <watter+0x258>)
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	f7fd fcab 	bl	800086c <__aeabi_ddiv>
 8002f16:	4603      	mov	r3, r0
 8002f18:	460c      	mov	r4, r1
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	4b69      	ldr	r3, [pc, #420]	; (80030c8 <watter+0x278>)
 8002f24:	f7fd f9c2 	bl	80002ac <__adddf3>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	460c      	mov	r4, r1
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	4621      	mov	r1, r4
 8002f30:	f7fd fe6a 	bl	8000c08 <__aeabi_d2f>
 8002f34:	4602      	mov	r2, r0
 8002f36:	4b65      	ldr	r3, [pc, #404]	; (80030cc <watter+0x27c>)
 8002f38:	601a      	str	r2, [r3, #0]
    data22 = temp2;
 8002f3a:	4b64      	ldr	r3, [pc, #400]	; (80030cc <watter+0x27c>)
 8002f3c:	edd3 7a00 	vldr	s15, [r3]
 8002f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f44:	ee17 2a90 	vmov	r2, s15
 8002f48:	4b61      	ldr	r3, [pc, #388]	; (80030d0 <watter+0x280>)
 8002f4a:	601a      	str	r2, [r3, #0]
    HAL_Delay(10);
 8002f4c:	200a      	movs	r0, #10
 8002f4e:	f000 faa7 	bl	80034a0 <HAL_Delay>



    HAL_ADC_Start(&hadc3);
 8002f52:	4860      	ldr	r0, [pc, #384]	; (80030d4 <watter+0x284>)
 8002f54:	f000 fb0a 	bl	800356c <HAL_ADC_Start>
    if(HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK)
 8002f58:	f04f 31ff 	mov.w	r1, #4294967295
 8002f5c:	485d      	ldr	r0, [pc, #372]	; (80030d4 <watter+0x284>)
 8002f5e:	f000 fbcb 	bl	80036f8 <HAL_ADC_PollForConversion>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d125      	bne.n	8002fb4 <watter+0x164>
    {
    raw2voltage = HAL_ADC_GetValue(&hadc3);
 8002f68:	485a      	ldr	r0, [pc, #360]	; (80030d4 <watter+0x284>)
 8002f6a:	f000 fc49 	bl	8003800 <HAL_ADC_GetValue>
 8002f6e:	ee07 0a90 	vmov	s15, r0
 8002f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f76:	4b58      	ldr	r3, [pc, #352]	; (80030d8 <watter+0x288>)
 8002f78:	edc3 7a00 	vstr	s15, [r3]
    real2voltage = (raw2voltage*12.4100)/1000;
 8002f7c:	4b56      	ldr	r3, [pc, #344]	; (80030d8 <watter+0x288>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fd faf1 	bl	8000568 <__aeabi_f2d>
 8002f86:	a34a      	add	r3, pc, #296	; (adr r3, 80030b0 <watter+0x260>)
 8002f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8c:	f7fd fb44 	bl	8000618 <__aeabi_dmul>
 8002f90:	4603      	mov	r3, r0
 8002f92:	460c      	mov	r4, r1
 8002f94:	4618      	mov	r0, r3
 8002f96:	4621      	mov	r1, r4
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	4b4f      	ldr	r3, [pc, #316]	; (80030dc <watter+0x28c>)
 8002f9e:	f7fd fc65 	bl	800086c <__aeabi_ddiv>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	460c      	mov	r4, r1
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	4621      	mov	r1, r4
 8002faa:	f7fd fe2d 	bl	8000c08 <__aeabi_d2f>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	4b4b      	ldr	r3, [pc, #300]	; (80030e0 <watter+0x290>)
 8002fb2:	601a      	str	r2, [r3, #0]
    }

    if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0))
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	484b      	ldr	r0, [pc, #300]	; (80030e4 <watter+0x294>)
 8002fb8:	f001 f9e8 	bl	800438c <HAL_GPIO_ReadPin>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d037      	beq.n	8003032 <watter+0x1e2>

    {
		  uint32_t time3=HAL_GetTick();
 8002fc2:	f000 fa61 	bl	8003488 <HAL_GetTick>
 8002fc6:	6078      	str	r0, [r7, #4]
		  while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)){
 8002fc8:	e02c      	b.n	8003024 <watter+0x1d4>
			  if (HAL_GetTick()-time3 > 300){
 8002fca:	f000 fa5d 	bl	8003488 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002fd8:	d910      	bls.n	8002ffc <watter+0x1ac>
				  time3=HAL_GetTick();
 8002fda:	f000 fa55 	bl	8003488 <HAL_GetTick>
 8002fde:	6078      	str	r0, [r7, #4]
				  setwatt+=100;
 8002fe0:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <watter+0x298>)
 8002fe2:	edd3 7a00 	vldr	s15, [r3]
 8002fe6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80030ec <watter+0x29c>
 8002fea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fee:	4b3e      	ldr	r3, [pc, #248]	; (80030e8 <watter+0x298>)
 8002ff0:	edc3 7a00 	vstr	s15, [r3]
				  HAL_Delay(5);
 8002ff4:	2005      	movs	r0, #5
 8002ff6:	f000 fa53 	bl	80034a0 <HAL_Delay>
				  break;
 8002ffa:	e01a      	b.n	8003032 <watter+0x1e2>
	   }
	  if (HAL_GetTick()-time3 > 20) {
 8002ffc:	f000 fa44 	bl	8003488 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b14      	cmp	r3, #20
 8003008:	d90c      	bls.n	8003024 <watter+0x1d4>
	   setwatt += 50;
 800300a:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <watter+0x298>)
 800300c:	edd3 7a00 	vldr	s15, [r3]
 8003010:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80030f0 <watter+0x2a0>
 8003014:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003018:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <watter+0x298>)
 800301a:	edc3 7a00 	vstr	s15, [r3]

	   HAL_Delay(100);
 800301e:	2064      	movs	r0, #100	; 0x64
 8003020:	f000 fa3e 	bl	80034a0 <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)){
 8003024:	2101      	movs	r1, #1
 8003026:	482f      	ldr	r0, [pc, #188]	; (80030e4 <watter+0x294>)
 8003028:	f001 f9b0 	bl	800438c <HAL_GPIO_ReadPin>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1cb      	bne.n	8002fca <watter+0x17a>
	   }
	   }
	   }


    if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 8003032:	2102      	movs	r1, #2
 8003034:	482f      	ldr	r0, [pc, #188]	; (80030f4 <watter+0x2a4>)
 8003036:	f001 f9a9 	bl	800438c <HAL_GPIO_ReadPin>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d076      	beq.n	800312e <watter+0x2de>
		  uint32_t time7=HAL_GetTick();
 8003040:	f000 fa22 	bl	8003488 <HAL_GetTick>
 8003044:	6038      	str	r0, [r7, #0]
		  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 8003046:	e06b      	b.n	8003120 <watter+0x2d0>
			  if (HAL_GetTick()-time7 > 300){
 8003048:	f000 fa1e 	bl	8003488 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003056:	d94f      	bls.n	80030f8 <watter+0x2a8>
				  time7=HAL_GetTick();
 8003058:	f000 fa16 	bl	8003488 <HAL_GetTick>
 800305c:	6038      	str	r0, [r7, #0]
				  setwatt-=100;
 800305e:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <watter+0x298>)
 8003060:	edd3 7a00 	vldr	s15, [r3]
 8003064:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80030ec <watter+0x29c>
 8003068:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800306c:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <watter+0x298>)
 800306e:	edc3 7a00 	vstr	s15, [r3]
				  HAL_Delay(5);
 8003072:	2005      	movs	r0, #5
 8003074:	f000 fa14 	bl	80034a0 <HAL_Delay>
				  break;
 8003078:	e059      	b.n	800312e <watter+0x2de>
 800307a:	bf00      	nop
 800307c:	f3af 8000 	nop.w
 8003080:	83126e98 	.word	0x83126e98
 8003084:	3fe9cac0 	.word	0x3fe9cac0
 8003088:	9999999a 	.word	0x9999999a
 800308c:	40a16d99 	.word	0x40a16d99
 8003090:	8644523f 	.word	0x8644523f
 8003094:	3f91bc55 	.word	0x3f91bc55
 8003098:	2bc72e28 	.word	0x2bc72e28
 800309c:	40670f10 	.word	0x40670f10
 80030a0:	e76c8b44 	.word	0xe76c8b44
 80030a4:	402b29fb 	.word	0x402b29fb
 80030a8:	8644523f 	.word	0x8644523f
 80030ac:	bf81bc55 	.word	0xbf81bc55
 80030b0:	851eb852 	.word	0x851eb852
 80030b4:	4028d1eb 	.word	0x4028d1eb
 80030b8:	20000820 	.word	0x20000820
 80030bc:	20000790 	.word	0x20000790
 80030c0:	20000d4c 	.word	0x20000d4c
 80030c4:	20000d60 	.word	0x20000d60
 80030c8:	403e0000 	.word	0x403e0000
 80030cc:	20000d50 	.word	0x20000d50
 80030d0:	20000d5c 	.word	0x20000d5c
 80030d4:	200007d8 	.word	0x200007d8
 80030d8:	20000764 	.word	0x20000764
 80030dc:	408f4000 	.word	0x408f4000
 80030e0:	20000768 	.word	0x20000768
 80030e4:	40020400 	.word	0x40020400
 80030e8:	20000d68 	.word	0x20000d68
 80030ec:	42c80000 	.word	0x42c80000
 80030f0:	42480000 	.word	0x42480000
 80030f4:	40020800 	.word	0x40020800
	   }
	   if (HAL_GetTick()-time7 > 20) {
 80030f8:	f000 f9c6 	bl	8003488 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b14      	cmp	r3, #20
 8003104:	d90c      	bls.n	8003120 <watter+0x2d0>
	   setwatt -= 50;
 8003106:	4b67      	ldr	r3, [pc, #412]	; (80032a4 <watter+0x454>)
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80032a8 <watter+0x458>
 8003110:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003114:	4b63      	ldr	r3, [pc, #396]	; (80032a4 <watter+0x454>)
 8003116:	edc3 7a00 	vstr	s15, [r3]

	   HAL_Delay(100);
 800311a:	2064      	movs	r0, #100	; 0x64
 800311c:	f000 f9c0 	bl	80034a0 <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 8003120:	2102      	movs	r1, #2
 8003122:	4862      	ldr	r0, [pc, #392]	; (80032ac <watter+0x45c>)
 8003124:	f001 f932 	bl	800438c <HAL_GPIO_ReadPin>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d18c      	bne.n	8003048 <watter+0x1f8>
	   }
	   }



	  if(real2voltage < 1) (z2 = 0);
 800312e:	4b60      	ldr	r3, [pc, #384]	; (80032b0 <watter+0x460>)
 8003130:	edd3 7a00 	vldr	s15, [r3]
 8003134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003140:	d503      	bpl.n	800314a <watter+0x2fa>
 8003142:	4b5c      	ldr	r3, [pc, #368]	; (80032b4 <watter+0x464>)
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	601a      	str	r2, [r3, #0]


    z2 =  setwatt / real2voltage;
 800314a:	4b56      	ldr	r3, [pc, #344]	; (80032a4 <watter+0x454>)
 800314c:	edd3 6a00 	vldr	s13, [r3]
 8003150:	4b57      	ldr	r3, [pc, #348]	; (80032b0 <watter+0x460>)
 8003152:	ed93 7a00 	vldr	s14, [r3]
 8003156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800315a:	4b56      	ldr	r3, [pc, #344]	; (80032b4 <watter+0x464>)
 800315c:	edc3 7a00 	vstr	s15, [r3]

    y2 = z2*20;
 8003160:	4b54      	ldr	r3, [pc, #336]	; (80032b4 <watter+0x464>)
 8003162:	edd3 7a00 	vldr	s15, [r3]
 8003166:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800316a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800316e:	4b52      	ldr	r3, [pc, #328]	; (80032b8 <watter+0x468>)
 8003170:	edc3 7a00 	vstr	s15, [r3]
    x2 = y2 /((3.3/4096)*1000);
 8003174:	4b50      	ldr	r3, [pc, #320]	; (80032b8 <watter+0x468>)
 8003176:	ed93 7a00 	vldr	s14, [r3]
 800317a:	eddf 6a50 	vldr	s13, [pc, #320]	; 80032bc <watter+0x46c>
 800317e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003182:	4b4f      	ldr	r3, [pc, #316]	; (80032c0 <watter+0x470>)
 8003184:	edc3 7a00 	vstr	s15, [r3]
    data12 = z2 - 1;
 8003188:	4b4a      	ldr	r3, [pc, #296]	; (80032b4 <watter+0x464>)
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003192:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800319a:	ee17 2a90 	vmov	r2, s15
 800319e:	4b49      	ldr	r3, [pc, #292]	; (80032c4 <watter+0x474>)
 80031a0:	601a      	str	r2, [r3, #0]
    if(data12>100) (data12 = 100);
 80031a2:	4b48      	ldr	r3, [pc, #288]	; (80032c4 <watter+0x474>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d902      	bls.n	80031b0 <watter+0x360>
 80031aa:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <watter+0x474>)
 80031ac:	2264      	movs	r2, #100	; 0x64
 80031ae:	601a      	str	r2, [r3, #0]
    data32 = setwatt;
 80031b0:	4b3c      	ldr	r3, [pc, #240]	; (80032a4 <watter+0x454>)
 80031b2:	edd3 7a00 	vldr	s15, [r3]
 80031b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ba:	ee17 2a90 	vmov	r2, s15
 80031be:	4b42      	ldr	r3, [pc, #264]	; (80032c8 <watter+0x478>)
 80031c0:	601a      	str	r2, [r3, #0]
    if (setwatt<0)(setwatt=0);
 80031c2:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <watter+0x454>)
 80031c4:	edd3 7a00 	vldr	s15, [r3]
 80031c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d0:	d503      	bpl.n	80031da <watter+0x38a>
 80031d2:	4b34      	ldr	r3, [pc, #208]	; (80032a4 <watter+0x454>)
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]

    SSD1306_GotoXY (1, 1);
 80031da:	2101      	movs	r1, #1
 80031dc:	2001      	movs	r0, #1
 80031de:	f7ff fa5b 	bl	8002698 <SSD1306_GotoXY>
   		  sprintf(yazi42,"Watt|Curr %d            ",data12);
 80031e2:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <watter+0x474>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	4938      	ldr	r1, [pc, #224]	; (80032cc <watter+0x47c>)
 80031ea:	4839      	ldr	r0, [pc, #228]	; (80032d0 <watter+0x480>)
 80031ec:	f004 f95e 	bl	80074ac <siprintf>
   		  SSD1306_Puts(yazi42,&Font_7x10,1);
 80031f0:	2201      	movs	r2, #1
 80031f2:	4938      	ldr	r1, [pc, #224]	; (80032d4 <watter+0x484>)
 80031f4:	4836      	ldr	r0, [pc, #216]	; (80032d0 <watter+0x480>)
 80031f6:	f7ff fae5 	bl	80027c4 <SSD1306_Puts>
   		  SSD1306_GotoXY(105,1);
 80031fa:	2101      	movs	r1, #1
 80031fc:	2069      	movs	r0, #105	; 0x69
 80031fe:	f7ff fa4b 	bl	8002698 <SSD1306_GotoXY>
   		  SSD1306_Puts("mA",&Font_7x10,1);
 8003202:	2201      	movs	r2, #1
 8003204:	4933      	ldr	r1, [pc, #204]	; (80032d4 <watter+0x484>)
 8003206:	4834      	ldr	r0, [pc, #208]	; (80032d8 <watter+0x488>)
 8003208:	f7ff fadc 	bl	80027c4 <SSD1306_Puts>
   		  sprintf(yazi32,"Temperature %d C    ",data22);
 800320c:	4b33      	ldr	r3, [pc, #204]	; (80032dc <watter+0x48c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	4933      	ldr	r1, [pc, #204]	; (80032e0 <watter+0x490>)
 8003214:	4833      	ldr	r0, [pc, #204]	; (80032e4 <watter+0x494>)
 8003216:	f004 f949 	bl	80074ac <siprintf>
   		  SSD1306_GotoXY (1, 19);
 800321a:	2113      	movs	r1, #19
 800321c:	2001      	movs	r0, #1
 800321e:	f7ff fa3b 	bl	8002698 <SSD1306_GotoXY>
   		  SSD1306_Puts(yazi32,&Font_7x10,1);
 8003222:	2201      	movs	r2, #1
 8003224:	492b      	ldr	r1, [pc, #172]	; (80032d4 <watter+0x484>)
 8003226:	482f      	ldr	r0, [pc, #188]	; (80032e4 <watter+0x494>)
 8003228:	f7ff facc 	bl	80027c4 <SSD1306_Puts>
   		  sprintf(yazi12," %d       ",data32);
 800322c:	4b26      	ldr	r3, [pc, #152]	; (80032c8 <watter+0x478>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	492d      	ldr	r1, [pc, #180]	; (80032e8 <watter+0x498>)
 8003234:	482d      	ldr	r0, [pc, #180]	; (80032ec <watter+0x49c>)
 8003236:	f004 f939 	bl	80074ac <siprintf>
   		  SSD1306_GotoXY (1, 37);
 800323a:	2125      	movs	r1, #37	; 0x25
 800323c:	2001      	movs	r0, #1
 800323e:	f7ff fa2b 	bl	8002698 <SSD1306_GotoXY>
   		  SSD1306_Puts(yazi12,&Font_16x26,1);
 8003242:	2201      	movs	r2, #1
 8003244:	492a      	ldr	r1, [pc, #168]	; (80032f0 <watter+0x4a0>)
 8003246:	4829      	ldr	r0, [pc, #164]	; (80032ec <watter+0x49c>)
 8003248:	f7ff fabc 	bl	80027c4 <SSD1306_Puts>
   		  SSD1306_GotoXY (87,37);
 800324c:	2125      	movs	r1, #37	; 0x25
 800324e:	2057      	movs	r0, #87	; 0x57
 8003250:	f7ff fa22 	bl	8002698 <SSD1306_GotoXY>
   		  SSD1306_Puts("mW   ", &Font_16x26,1);
 8003254:	2201      	movs	r2, #1
 8003256:	4926      	ldr	r1, [pc, #152]	; (80032f0 <watter+0x4a0>)
 8003258:	4826      	ldr	r0, [pc, #152]	; (80032f4 <watter+0x4a4>)
 800325a:	f7ff fab3 	bl	80027c4 <SSD1306_Puts>
   		  SSD1306_UpdateScreen();
 800325e:	f7ff f975 	bl	800254c <SSD1306_UpdateScreen>
   		  HAL_Delay(20);
 8003262:	2014      	movs	r0, #20
 8003264:	f000 f91c 	bl	80034a0 <HAL_Delay>

   		  if(real2voltage < 1) (data12 = 0);
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <watter+0x460>)
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327a:	d502      	bpl.n	8003282 <watter+0x432>
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <watter+0x474>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]

      HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, x2);
 8003282:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <watter+0x470>)
 8003284:	edd3 7a00 	vldr	s15, [r3]
 8003288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800328c:	ee17 3a90 	vmov	r3, s15
 8003290:	2200      	movs	r2, #0
 8003292:	2100      	movs	r1, #0
 8003294:	4818      	ldr	r0, [pc, #96]	; (80032f8 <watter+0x4a8>)
 8003296:	f000 fea9 	bl	8003fec <HAL_DAC_SetValue>




}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd90      	pop	{r4, r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000d68 	.word	0x20000d68
 80032a8:	42480000 	.word	0x42480000
 80032ac:	40020800 	.word	0x40020800
 80032b0:	20000768 	.word	0x20000768
 80032b4:	20000770 	.word	0x20000770
 80032b8:	20000d58 	.word	0x20000d58
 80032bc:	3f4e4000 	.word	0x3f4e4000
 80032c0:	2000076c 	.word	0x2000076c
 80032c4:	20000d64 	.word	0x20000d64
 80032c8:	20000d54 	.word	0x20000d54
 80032cc:	0800a620 	.word	0x0800a620
 80032d0:	20000128 	.word	0x20000128
 80032d4:	20000060 	.word	0x20000060
 80032d8:	0800a63c 	.word	0x0800a63c
 80032dc:	20000d5c 	.word	0x20000d5c
 80032e0:	0800a640 	.word	0x0800a640
 80032e4:	20000108 	.word	0x20000108
 80032e8:	0800a658 	.word	0x0800a658
 80032ec:	200000e8 	.word	0x200000e8
 80032f0:	20000070 	.word	0x20000070
 80032f4:	0800a664 	.word	0x0800a664
 80032f8:	20000820 	.word	0x20000820

080032fc <welcome_lcd>:
 */
#include <ssd1306.h>
#include <i2c-lcd.h>

void welcome_lcd(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  lcd_init ();
 8003300:	f7fe f8ce 	bl	80014a0 <lcd_init>
  SSD1306_Init ();
 8003304:	f7ff f864 	bl	80023d0 <SSD1306_Init>
  SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003308:	2000      	movs	r0, #0
 800330a:	f7ff f94d 	bl	80025a8 <SSD1306_Fill>
  SSD1306_UpdateScreen();
 800330e:	f7ff f91d 	bl	800254c <SSD1306_UpdateScreen>
  SSD1306_GotoXY (10, 18);
 8003312:	2112      	movs	r1, #18
 8003314:	200a      	movs	r0, #10
 8003316:	f7ff f9bf 	bl	8002698 <SSD1306_GotoXY>
  SSD1306_Puts ("WELCOME", &Font_11x18, 1);
 800331a:	2201      	movs	r2, #1
 800331c:	490e      	ldr	r1, [pc, #56]	; (8003358 <welcome_lcd+0x5c>)
 800331e:	480f      	ldr	r0, [pc, #60]	; (800335c <welcome_lcd+0x60>)
 8003320:	f7ff fa50 	bl	80027c4 <SSD1306_Puts>
  SSD1306_GotoXY(2,45);
 8003324:	212d      	movs	r1, #45	; 0x2d
 8003326:	2002      	movs	r0, #2
 8003328:	f7ff f9b6 	bl	8002698 <SSD1306_GotoXY>
  SSD1306_Puts("   ANTSIS ELC.",&Font_7x10,1);
 800332c:	2201      	movs	r2, #1
 800332e:	490c      	ldr	r1, [pc, #48]	; (8003360 <welcome_lcd+0x64>)
 8003330:	480c      	ldr	r0, [pc, #48]	; (8003364 <welcome_lcd+0x68>)
 8003332:	f7ff fa47 	bl	80027c4 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8003336:	f7ff f909 	bl	800254c <SSD1306_UpdateScreen>
  HAL_Delay(500);
 800333a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800333e:	f000 f8af 	bl	80034a0 <HAL_Delay>
  SSD1306_Fill (0);
 8003342:	2000      	movs	r0, #0
 8003344:	f7ff f930 	bl	80025a8 <SSD1306_Fill>
  SSD1306_UpdateScreen(); //display
 8003348:	f7ff f900 	bl	800254c <SSD1306_UpdateScreen>
  SSD1306_GotoXY (0, 0);
 800334c:	2100      	movs	r1, #0
 800334e:	2000      	movs	r0, #0
 8003350:	f7ff f9a2 	bl	8002698 <SSD1306_GotoXY>
}
 8003354:	bf00      	nop
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000068 	.word	0x20000068
 800335c:	0800a66c 	.word	0x0800a66c
 8003360:	20000060 	.word	0x20000060
 8003364:	0800a674 	.word	0x0800a674

08003368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033a0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800336c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800336e:	e003      	b.n	8003378 <LoopCopyDataInit>

08003370 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003372:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003374:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003376:	3104      	adds	r1, #4

08003378 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003378:	480b      	ldr	r0, [pc, #44]	; (80033a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800337c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800337e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003380:	d3f6      	bcc.n	8003370 <CopyDataInit>
  ldr  r2, =_sbss
 8003382:	4a0b      	ldr	r2, [pc, #44]	; (80033b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003384:	e002      	b.n	800338c <LoopFillZerobss>

08003386 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003386:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003388:	f842 3b04 	str.w	r3, [r2], #4

0800338c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800338e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003390:	d3f9      	bcc.n	8003386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003392:	f7ff fd45 	bl	8002e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003396:	f003 fa19 	bl	80067cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800339a:	f7fe fa37 	bl	800180c <main>
  bx  lr    
 800339e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80033a0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80033a4:	0800d17c 	.word	0x0800d17c
  ldr  r0, =_sdata
 80033a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80033ac:	20000324 	.word	0x20000324
  ldr  r2, =_sbss
 80033b0:	20000324 	.word	0x20000324
  ldr  r3, = _ebss
 80033b4:	20000d78 	.word	0x20000d78

080033b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033b8:	e7fe      	b.n	80033b8 <ADC_IRQHandler>
	...

080033bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033c0:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <HAL_Init+0x40>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0d      	ldr	r2, [pc, #52]	; (80033fc <HAL_Init+0x40>)
 80033c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_Init+0x40>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <HAL_Init+0x40>)
 80033d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033d8:	4b08      	ldr	r3, [pc, #32]	; (80033fc <HAL_Init+0x40>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a07      	ldr	r2, [pc, #28]	; (80033fc <HAL_Init+0x40>)
 80033de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033e4:	2003      	movs	r0, #3
 80033e6:	f000 fcf9 	bl	8003ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ea:	2000      	movs	r0, #0
 80033ec:	f000 f808 	bl	8003400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033f0:	f7ff fa9a 	bl	8002928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023c00 	.word	0x40023c00

08003400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003408:	4b12      	ldr	r3, [pc, #72]	; (8003454 <HAL_InitTick+0x54>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4b12      	ldr	r3, [pc, #72]	; (8003458 <HAL_InitTick+0x58>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	4619      	mov	r1, r3
 8003412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003416:	fbb3 f3f1 	udiv	r3, r3, r1
 800341a:	fbb2 f3f3 	udiv	r3, r2, r3
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fd03 	bl	8003e2a <HAL_SYSTICK_Config>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e00e      	b.n	800344c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b0f      	cmp	r3, #15
 8003432:	d80a      	bhi.n	800344a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003434:	2200      	movs	r2, #0
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	f04f 30ff 	mov.w	r0, #4294967295
 800343c:	f000 fcd9 	bl	8003df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003440:	4a06      	ldr	r2, [pc, #24]	; (800345c <HAL_InitTick+0x5c>)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	e000      	b.n	800344c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
}
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	200000e4 	.word	0x200000e4
 8003458:	2000014c 	.word	0x2000014c
 800345c:	20000148 	.word	0x20000148

08003460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003464:	4b06      	ldr	r3, [pc, #24]	; (8003480 <HAL_IncTick+0x20>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_IncTick+0x24>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4413      	add	r3, r2
 8003470:	4a04      	ldr	r2, [pc, #16]	; (8003484 <HAL_IncTick+0x24>)
 8003472:	6013      	str	r3, [r2, #0]
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	2000014c 	.word	0x2000014c
 8003484:	20000d70 	.word	0x20000d70

08003488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return uwTick;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_GetTick+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000d70 	.word	0x20000d70

080034a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034a8:	f7ff ffee 	bl	8003488 <HAL_GetTick>
 80034ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d005      	beq.n	80034c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_Delay+0x40>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034c6:	bf00      	nop
 80034c8:	f7ff ffde 	bl	8003488 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d8f7      	bhi.n	80034c8 <HAL_Delay+0x28>
  {
  }
}
 80034d8:	bf00      	nop
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	2000014c 	.word	0x2000014c

080034e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e033      	b.n	8003562 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d109      	bne.n	8003516 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff fa38 	bl	8002978 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	2b00      	cmp	r3, #0
 8003520:	d118      	bne.n	8003554 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800352a:	f023 0302 	bic.w	r3, r3, #2
 800352e:	f043 0202 	orr.w	r2, r3, #2
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 faa2 	bl	8003a80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f023 0303 	bic.w	r3, r3, #3
 800354a:	f043 0201 	orr.w	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	641a      	str	r2, [r3, #64]	; 0x40
 8003552:	e001      	b.n	8003558 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003560:	7bfb      	ldrb	r3, [r7, #15]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_ADC_Start+0x1a>
 8003582:	2302      	movs	r3, #2
 8003584:	e0a5      	b.n	80036d2 <HAL_ADC_Start+0x166>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d018      	beq.n	80035ce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035ac:	4b4c      	ldr	r3, [pc, #304]	; (80036e0 <HAL_ADC_Start+0x174>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a4c      	ldr	r2, [pc, #304]	; (80036e4 <HAL_ADC_Start+0x178>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0c9a      	lsrs	r2, r3, #18
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80035c0:	e002      	b.n	80035c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f9      	bne.n	80035c2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d179      	bne.n	80036d0 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d007      	beq.n	800360e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003606:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361a:	d106      	bne.n	800362a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	f023 0206 	bic.w	r2, r3, #6
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	645a      	str	r2, [r3, #68]	; 0x44
 8003628:	e002      	b.n	8003630 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003638:	4b2b      	ldr	r3, [pc, #172]	; (80036e8 <HAL_ADC_Start+0x17c>)
 800363a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003644:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	2b00      	cmp	r3, #0
 8003650:	d12a      	bne.n	80036a8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a25      	ldr	r2, [pc, #148]	; (80036ec <HAL_ADC_Start+0x180>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d015      	beq.n	8003688 <HAL_ADC_Start+0x11c>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a23      	ldr	r2, [pc, #140]	; (80036f0 <HAL_ADC_Start+0x184>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d105      	bne.n	8003672 <HAL_ADC_Start+0x106>
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_ADC_Start+0x17c>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1f      	ldr	r2, [pc, #124]	; (80036f4 <HAL_ADC_Start+0x188>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d129      	bne.n	80036d0 <HAL_ADC_Start+0x164>
 800367c:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <HAL_ADC_Start+0x17c>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	2b0f      	cmp	r3, #15
 8003686:	d823      	bhi.n	80036d0 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d11c      	bne.n	80036d0 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036a4:	609a      	str	r2, [r3, #8]
 80036a6:	e013      	b.n	80036d0 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0f      	ldr	r2, [pc, #60]	; (80036ec <HAL_ADC_Start+0x180>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10e      	bne.n	80036d0 <HAL_ADC_Start+0x164>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d107      	bne.n	80036d0 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036ce:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	200000e4 	.word	0x200000e4
 80036e4:	431bde83 	.word	0x431bde83
 80036e8:	40012300 	.word	0x40012300
 80036ec:	40012000 	.word	0x40012000
 80036f0:	40012100 	.word	0x40012100
 80036f4:	40012200 	.word	0x40012200

080036f8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003714:	d113      	bne.n	800373e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003724:	d10b      	bne.n	800373e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f043 0220 	orr.w	r2, r3, #32
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e05c      	b.n	80037f8 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800373e:	f7ff fea3 	bl	8003488 <HAL_GetTick>
 8003742:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003744:	e01a      	b.n	800377c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d016      	beq.n	800377c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_ADC_PollForConversion+0x6c>
 8003754:	f7ff fe98 	bl	8003488 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d20b      	bcs.n	800377c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	f043 0204 	orr.w	r2, r3, #4
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e03d      	b.n	80037f8 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b02      	cmp	r3, #2
 8003788:	d1dd      	bne.n	8003746 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f06f 0212 	mvn.w	r2, #18
 8003792:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d123      	bne.n	80037f6 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d11f      	bne.n	80037f6 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d006      	beq.n	80037d2 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d111      	bne.n	80037f6 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d105      	bne.n	80037f6 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f043 0201 	orr.w	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800380e:	4618      	mov	r0, r3
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
	...

0800381c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x1c>
 8003834:	2302      	movs	r3, #2
 8003836:	e113      	b.n	8003a60 <HAL_ADC_ConfigChannel+0x244>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b09      	cmp	r3, #9
 8003846:	d925      	bls.n	8003894 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68d9      	ldr	r1, [r3, #12]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	3b1e      	subs	r3, #30
 800385e:	2207      	movs	r2, #7
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43da      	mvns	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	400a      	ands	r2, r1
 800386c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68d9      	ldr	r1, [r3, #12]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	b29b      	uxth	r3, r3
 800387e:	4618      	mov	r0, r3
 8003880:	4603      	mov	r3, r0
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	4403      	add	r3, r0
 8003886:	3b1e      	subs	r3, #30
 8003888:	409a      	lsls	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	e022      	b.n	80038da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6919      	ldr	r1, [r3, #16]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	4613      	mov	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4413      	add	r3, r2
 80038a8:	2207      	movs	r2, #7
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43da      	mvns	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	400a      	ands	r2, r1
 80038b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6919      	ldr	r1, [r3, #16]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	4618      	mov	r0, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4403      	add	r3, r0
 80038d0:	409a      	lsls	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b06      	cmp	r3, #6
 80038e0:	d824      	bhi.n	800392c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	3b05      	subs	r3, #5
 80038f4:	221f      	movs	r2, #31
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43da      	mvns	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	400a      	ands	r2, r1
 8003902:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	4618      	mov	r0, r3
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	3b05      	subs	r3, #5
 800391e:	fa00 f203 	lsl.w	r2, r0, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	635a      	str	r2, [r3, #52]	; 0x34
 800392a:	e04c      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b0c      	cmp	r3, #12
 8003932:	d824      	bhi.n	800397e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	3b23      	subs	r3, #35	; 0x23
 8003946:	221f      	movs	r2, #31
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43da      	mvns	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	400a      	ands	r2, r1
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	b29b      	uxth	r3, r3
 8003962:	4618      	mov	r0, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	3b23      	subs	r3, #35	; 0x23
 8003970:	fa00 f203 	lsl.w	r2, r0, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
 800397c:	e023      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	3b41      	subs	r3, #65	; 0x41
 8003990:	221f      	movs	r2, #31
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43da      	mvns	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	400a      	ands	r2, r1
 800399e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	4618      	mov	r0, r3
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	3b41      	subs	r3, #65	; 0x41
 80039ba:	fa00 f203 	lsl.w	r2, r0, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039c6:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <HAL_ADC_ConfigChannel+0x250>)
 80039c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a28      	ldr	r2, [pc, #160]	; (8003a70 <HAL_ADC_ConfigChannel+0x254>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d10f      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x1d8>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b12      	cmp	r3, #18
 80039da:	d10b      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1d      	ldr	r2, [pc, #116]	; (8003a70 <HAL_ADC_ConfigChannel+0x254>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d12b      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x23a>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <HAL_ADC_ConfigChannel+0x258>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d003      	beq.n	8003a10 <HAL_ADC_ConfigChannel+0x1f4>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b11      	cmp	r3, #17
 8003a0e:	d122      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a11      	ldr	r2, [pc, #68]	; (8003a74 <HAL_ADC_ConfigChannel+0x258>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d111      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <HAL_ADC_ConfigChannel+0x25c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a11      	ldr	r2, [pc, #68]	; (8003a7c <HAL_ADC_ConfigChannel+0x260>)
 8003a38:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3c:	0c9a      	lsrs	r2, r3, #18
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a48:	e002      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f9      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	40012300 	.word	0x40012300
 8003a70:	40012000 	.word	0x40012000
 8003a74:	10000012 	.word	0x10000012
 8003a78:	200000e4 	.word	0x200000e4
 8003a7c:	431bde83 	.word	0x431bde83

08003a80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a88:	4b79      	ldr	r3, [pc, #484]	; (8003c70 <ADC_Init+0x1f0>)
 8003a8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ab4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	021a      	lsls	r2, r3, #8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ad8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003afa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6899      	ldr	r1, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	4a58      	ldr	r2, [pc, #352]	; (8003c74 <ADC_Init+0x1f4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d022      	beq.n	8003b5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6899      	ldr	r1, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6899      	ldr	r1, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	e00f      	b.n	8003b7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0202 	bic.w	r2, r2, #2
 8003b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6899      	ldr	r1, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	7e1b      	ldrb	r3, [r3, #24]
 8003b98:	005a      	lsls	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01b      	beq.n	8003be4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003bca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6859      	ldr	r1, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	035a      	lsls	r2, r3, #13
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	e007      	b.n	8003bf4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	051a      	lsls	r2, r3, #20
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6899      	ldr	r1, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c36:	025a      	lsls	r2, r3, #9
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6899      	ldr	r1, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	029a      	lsls	r2, r3, #10
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	609a      	str	r2, [r3, #8]
}
 8003c64:	bf00      	nop
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	40012300 	.word	0x40012300
 8003c74:	0f000001 	.word	0x0f000001

08003c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c88:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <__NVIC_SetPriorityGrouping+0x44>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c94:	4013      	ands	r3, r2
 8003c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003caa:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <__NVIC_SetPriorityGrouping+0x44>)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	60d3      	str	r3, [r2, #12]
}
 8003cb0:	bf00      	nop
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	e000ed00 	.word	0xe000ed00

08003cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	0a1b      	lsrs	r3, r3, #8
 8003cca:	f003 0307 	and.w	r3, r3, #7
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	6039      	str	r1, [r7, #0]
 8003ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	db0a      	blt.n	8003d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	490c      	ldr	r1, [pc, #48]	; (8003d28 <__NVIC_SetPriority+0x4c>)
 8003cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfa:	0112      	lsls	r2, r2, #4
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	440b      	add	r3, r1
 8003d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d04:	e00a      	b.n	8003d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	4908      	ldr	r1, [pc, #32]	; (8003d2c <__NVIC_SetPriority+0x50>)
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	3b04      	subs	r3, #4
 8003d14:	0112      	lsls	r2, r2, #4
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	440b      	add	r3, r1
 8003d1a:	761a      	strb	r2, [r3, #24]
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	e000e100 	.word	0xe000e100
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b089      	sub	sp, #36	; 0x24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f1c3 0307 	rsb	r3, r3, #7
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	bf28      	it	cs
 8003d4e:	2304      	movcs	r3, #4
 8003d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	3304      	adds	r3, #4
 8003d56:	2b06      	cmp	r3, #6
 8003d58:	d902      	bls.n	8003d60 <NVIC_EncodePriority+0x30>
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	3b03      	subs	r3, #3
 8003d5e:	e000      	b.n	8003d62 <NVIC_EncodePriority+0x32>
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d64:	f04f 32ff 	mov.w	r2, #4294967295
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	43da      	mvns	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	401a      	ands	r2, r3
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d78:	f04f 31ff 	mov.w	r1, #4294967295
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d82:	43d9      	mvns	r1, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d88:	4313      	orrs	r3, r2
         );
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3724      	adds	r7, #36	; 0x24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da8:	d301      	bcc.n	8003dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003daa:	2301      	movs	r3, #1
 8003dac:	e00f      	b.n	8003dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <SysTick_Config+0x40>)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003db6:	210f      	movs	r1, #15
 8003db8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbc:	f7ff ff8e 	bl	8003cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dc0:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <SysTick_Config+0x40>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dc6:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <SysTick_Config+0x40>)
 8003dc8:	2207      	movs	r2, #7
 8003dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	e000e010 	.word	0xe000e010

08003ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff ff47 	bl	8003c78 <__NVIC_SetPriorityGrouping>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b086      	sub	sp, #24
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	4603      	mov	r3, r0
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e04:	f7ff ff5c 	bl	8003cc0 <__NVIC_GetPriorityGrouping>
 8003e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	6978      	ldr	r0, [r7, #20]
 8003e10:	f7ff ff8e 	bl	8003d30 <NVIC_EncodePriority>
 8003e14:	4602      	mov	r2, r0
 8003e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff ff5d 	bl	8003cdc <__NVIC_SetPriority>
}
 8003e22:	bf00      	nop
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff ffb0 	bl	8003d98 <SysTick_Config>
 8003e38:	4603      	mov	r3, r0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e014      	b.n	8003e7e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	791b      	ldrb	r3, [r3, #4]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d105      	bne.n	8003e6a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7fe fdfd 	bl	8002a64 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b085      	sub	sp, #20
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	2300      	movs	r3, #0
 8003e96:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	795b      	ldrb	r3, [r3, #5]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_DAC_Start+0x1e>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e050      	b.n	8003f46 <HAL_DAC_Start+0xc0>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6819      	ldr	r1, [r3, #0]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d11a      	bne.n	8003f00 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ee0:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d127      	bne.n	8003f38 <HAL_DAC_Start+0xb2>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b38      	cmp	r3, #56	; 0x38
 8003eec:	d124      	bne.n	8003f38 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0201 	orr.w	r2, r2, #1
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	e01b      	b.n	8003f38 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f0a:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8003f16:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f1e:	d10b      	bne.n	8003f38 <HAL_DAC_Start+0xb2>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003f26:	d107      	bne.n	8003f38 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0202 	orr.w	r2, r2, #2
 8003f36:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b087      	sub	sp, #28
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	795b      	ldrb	r3, [r3, #5]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_DAC_ConfigChannel+0x20>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e036      	b.n	8003fe0 <HAL_DAC_ConfigChannel+0x8e>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003f86:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4013      	ands	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6819      	ldr	r1, [r3, #0]
 8003fc0:	22c0      	movs	r2, #192	; 0xc0
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43da      	mvns	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	400a      	ands	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d105      	bne.n	8004016 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4413      	add	r3, r2
 8004010:	3308      	adds	r3, #8
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e004      	b.n	8004020 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4413      	add	r3, r2
 800401c:	3314      	adds	r3, #20
 800401e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	461a      	mov	r2, r3
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004038:	b480      	push	{r7}
 800403a:	b089      	sub	sp, #36	; 0x24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800404a:	2300      	movs	r3, #0
 800404c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e177      	b.n	8004344 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004054:	2201      	movs	r2, #1
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4013      	ands	r3, r2
 8004066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	429a      	cmp	r2, r3
 800406e:	f040 8166 	bne.w	800433e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d00b      	beq.n	8004092 <HAL_GPIO_Init+0x5a>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d007      	beq.n	8004092 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004086:	2b11      	cmp	r3, #17
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b12      	cmp	r3, #18
 8004090:	d130      	bne.n	80040f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	2203      	movs	r2, #3
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43db      	mvns	r3, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4013      	ands	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040c8:	2201      	movs	r2, #1
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4013      	ands	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	091b      	lsrs	r3, r3, #4
 80040de:	f003 0201 	and.w	r2, r3, #1
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	2203      	movs	r2, #3
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d003      	beq.n	8004134 <HAL_GPIO_Init+0xfc>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b12      	cmp	r3, #18
 8004132:	d123      	bne.n	800417c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	08da      	lsrs	r2, r3, #3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3208      	adds	r2, #8
 800413c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	220f      	movs	r2, #15
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	08da      	lsrs	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3208      	adds	r2, #8
 8004176:	69b9      	ldr	r1, [r7, #24]
 8004178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	2203      	movs	r2, #3
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4013      	ands	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 0203 	and.w	r2, r3, #3
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80c0 	beq.w	800433e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	4b65      	ldr	r3, [pc, #404]	; (8004358 <HAL_GPIO_Init+0x320>)
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	4a64      	ldr	r2, [pc, #400]	; (8004358 <HAL_GPIO_Init+0x320>)
 80041c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041cc:	6453      	str	r3, [r2, #68]	; 0x44
 80041ce:	4b62      	ldr	r3, [pc, #392]	; (8004358 <HAL_GPIO_Init+0x320>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041da:	4a60      	ldr	r2, [pc, #384]	; (800435c <HAL_GPIO_Init+0x324>)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	089b      	lsrs	r3, r3, #2
 80041e0:	3302      	adds	r3, #2
 80041e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	220f      	movs	r2, #15
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4013      	ands	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a57      	ldr	r2, [pc, #348]	; (8004360 <HAL_GPIO_Init+0x328>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d037      	beq.n	8004276 <HAL_GPIO_Init+0x23e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a56      	ldr	r2, [pc, #344]	; (8004364 <HAL_GPIO_Init+0x32c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d031      	beq.n	8004272 <HAL_GPIO_Init+0x23a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a55      	ldr	r2, [pc, #340]	; (8004368 <HAL_GPIO_Init+0x330>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d02b      	beq.n	800426e <HAL_GPIO_Init+0x236>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a54      	ldr	r2, [pc, #336]	; (800436c <HAL_GPIO_Init+0x334>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d025      	beq.n	800426a <HAL_GPIO_Init+0x232>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a53      	ldr	r2, [pc, #332]	; (8004370 <HAL_GPIO_Init+0x338>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01f      	beq.n	8004266 <HAL_GPIO_Init+0x22e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a52      	ldr	r2, [pc, #328]	; (8004374 <HAL_GPIO_Init+0x33c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d019      	beq.n	8004262 <HAL_GPIO_Init+0x22a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a51      	ldr	r2, [pc, #324]	; (8004378 <HAL_GPIO_Init+0x340>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <HAL_GPIO_Init+0x226>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a50      	ldr	r2, [pc, #320]	; (800437c <HAL_GPIO_Init+0x344>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00d      	beq.n	800425a <HAL_GPIO_Init+0x222>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a4f      	ldr	r2, [pc, #316]	; (8004380 <HAL_GPIO_Init+0x348>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <HAL_GPIO_Init+0x21e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a4e      	ldr	r2, [pc, #312]	; (8004384 <HAL_GPIO_Init+0x34c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d101      	bne.n	8004252 <HAL_GPIO_Init+0x21a>
 800424e:	2309      	movs	r3, #9
 8004250:	e012      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004252:	230a      	movs	r3, #10
 8004254:	e010      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004256:	2308      	movs	r3, #8
 8004258:	e00e      	b.n	8004278 <HAL_GPIO_Init+0x240>
 800425a:	2307      	movs	r3, #7
 800425c:	e00c      	b.n	8004278 <HAL_GPIO_Init+0x240>
 800425e:	2306      	movs	r3, #6
 8004260:	e00a      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004262:	2305      	movs	r3, #5
 8004264:	e008      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004266:	2304      	movs	r3, #4
 8004268:	e006      	b.n	8004278 <HAL_GPIO_Init+0x240>
 800426a:	2303      	movs	r3, #3
 800426c:	e004      	b.n	8004278 <HAL_GPIO_Init+0x240>
 800426e:	2302      	movs	r3, #2
 8004270:	e002      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <HAL_GPIO_Init+0x240>
 8004276:	2300      	movs	r3, #0
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	f002 0203 	and.w	r2, r2, #3
 800427e:	0092      	lsls	r2, r2, #2
 8004280:	4093      	lsls	r3, r2
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004288:	4934      	ldr	r1, [pc, #208]	; (800435c <HAL_GPIO_Init+0x324>)
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	089b      	lsrs	r3, r3, #2
 800428e:	3302      	adds	r3, #2
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004296:	4b3c      	ldr	r3, [pc, #240]	; (8004388 <HAL_GPIO_Init+0x350>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	43db      	mvns	r3, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4013      	ands	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042ba:	4a33      	ldr	r2, [pc, #204]	; (8004388 <HAL_GPIO_Init+0x350>)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80042c0:	4b31      	ldr	r3, [pc, #196]	; (8004388 <HAL_GPIO_Init+0x350>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042e4:	4a28      	ldr	r2, [pc, #160]	; (8004388 <HAL_GPIO_Init+0x350>)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042ea:	4b27      	ldr	r3, [pc, #156]	; (8004388 <HAL_GPIO_Init+0x350>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	43db      	mvns	r3, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	4013      	ands	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800430e:	4a1e      	ldr	r2, [pc, #120]	; (8004388 <HAL_GPIO_Init+0x350>)
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004314:	4b1c      	ldr	r3, [pc, #112]	; (8004388 <HAL_GPIO_Init+0x350>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004338:	4a13      	ldr	r2, [pc, #76]	; (8004388 <HAL_GPIO_Init+0x350>)
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3301      	adds	r3, #1
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	2b0f      	cmp	r3, #15
 8004348:	f67f ae84 	bls.w	8004054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800434c:	bf00      	nop
 800434e:	3724      	adds	r7, #36	; 0x24
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40023800 	.word	0x40023800
 800435c:	40013800 	.word	0x40013800
 8004360:	40020000 	.word	0x40020000
 8004364:	40020400 	.word	0x40020400
 8004368:	40020800 	.word	0x40020800
 800436c:	40020c00 	.word	0x40020c00
 8004370:	40021000 	.word	0x40021000
 8004374:	40021400 	.word	0x40021400
 8004378:	40021800 	.word	0x40021800
 800437c:	40021c00 	.word	0x40021c00
 8004380:	40022000 	.word	0x40022000
 8004384:	40022400 	.word	0x40022400
 8004388:	40013c00 	.word	0x40013c00

0800438c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	887b      	ldrh	r3, [r7, #2]
 800439e:	4013      	ands	r3, r2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
 80043a8:	e001      	b.n	80043ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043aa:	2300      	movs	r3, #0
 80043ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	807b      	strh	r3, [r7, #2]
 80043c8:	4613      	mov	r3, r2
 80043ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043cc:	787b      	ldrb	r3, [r7, #1]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043d2:	887a      	ldrh	r2, [r7, #2]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043d8:	e003      	b.n	80043e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043da:	887b      	ldrh	r3, [r7, #2]
 80043dc:	041a      	lsls	r2, r3, #16
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	619a      	str	r2, [r3, #24]
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e11f      	b.n	8004642 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fe fb68 	bl	8002aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2224      	movs	r2, #36	; 0x24
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004442:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004452:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004454:	f001 fb0c 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8004458:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	4a7b      	ldr	r2, [pc, #492]	; (800464c <HAL_I2C_Init+0x25c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d807      	bhi.n	8004474 <HAL_I2C_Init+0x84>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4a7a      	ldr	r2, [pc, #488]	; (8004650 <HAL_I2C_Init+0x260>)
 8004468:	4293      	cmp	r3, r2
 800446a:	bf94      	ite	ls
 800446c:	2301      	movls	r3, #1
 800446e:	2300      	movhi	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	e006      	b.n	8004482 <HAL_I2C_Init+0x92>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4a77      	ldr	r2, [pc, #476]	; (8004654 <HAL_I2C_Init+0x264>)
 8004478:	4293      	cmp	r3, r2
 800447a:	bf94      	ite	ls
 800447c:	2301      	movls	r3, #1
 800447e:	2300      	movhi	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e0db      	b.n	8004642 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4a72      	ldr	r2, [pc, #456]	; (8004658 <HAL_I2C_Init+0x268>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	0c9b      	lsrs	r3, r3, #18
 8004494:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4a64      	ldr	r2, [pc, #400]	; (800464c <HAL_I2C_Init+0x25c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d802      	bhi.n	80044c4 <HAL_I2C_Init+0xd4>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	3301      	adds	r3, #1
 80044c2:	e009      	b.n	80044d8 <HAL_I2C_Init+0xe8>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044ca:	fb02 f303 	mul.w	r3, r2, r3
 80044ce:	4a63      	ldr	r2, [pc, #396]	; (800465c <HAL_I2C_Init+0x26c>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	099b      	lsrs	r3, r3, #6
 80044d6:	3301      	adds	r3, #1
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	430b      	orrs	r3, r1
 80044de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4956      	ldr	r1, [pc, #344]	; (800464c <HAL_I2C_Init+0x25c>)
 80044f4:	428b      	cmp	r3, r1
 80044f6:	d80d      	bhi.n	8004514 <HAL_I2C_Init+0x124>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	1e59      	subs	r1, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	fbb1 f3f3 	udiv	r3, r1, r3
 8004506:	3301      	adds	r3, #1
 8004508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800450c:	2b04      	cmp	r3, #4
 800450e:	bf38      	it	cc
 8004510:	2304      	movcc	r3, #4
 8004512:	e04f      	b.n	80045b4 <HAL_I2C_Init+0x1c4>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d111      	bne.n	8004540 <HAL_I2C_Init+0x150>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	1e58      	subs	r0, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6859      	ldr	r1, [r3, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	440b      	add	r3, r1
 800452a:	fbb0 f3f3 	udiv	r3, r0, r3
 800452e:	3301      	adds	r3, #1
 8004530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	e012      	b.n	8004566 <HAL_I2C_Init+0x176>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	1e58      	subs	r0, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6859      	ldr	r1, [r3, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	0099      	lsls	r1, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	fbb0 f3f3 	udiv	r3, r0, r3
 8004556:	3301      	adds	r3, #1
 8004558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800455c:	2b00      	cmp	r3, #0
 800455e:	bf0c      	ite	eq
 8004560:	2301      	moveq	r3, #1
 8004562:	2300      	movne	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_I2C_Init+0x17e>
 800456a:	2301      	movs	r3, #1
 800456c:	e022      	b.n	80045b4 <HAL_I2C_Init+0x1c4>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10e      	bne.n	8004594 <HAL_I2C_Init+0x1a4>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	1e58      	subs	r0, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6859      	ldr	r1, [r3, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	440b      	add	r3, r1
 8004584:	fbb0 f3f3 	udiv	r3, r0, r3
 8004588:	3301      	adds	r3, #1
 800458a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800458e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004592:	e00f      	b.n	80045b4 <HAL_I2C_Init+0x1c4>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	1e58      	subs	r0, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6859      	ldr	r1, [r3, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	0099      	lsls	r1, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045aa:	3301      	adds	r3, #1
 80045ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	6809      	ldr	r1, [r1, #0]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69da      	ldr	r2, [r3, #28]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6911      	ldr	r1, [r2, #16]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	68d2      	ldr	r2, [r2, #12]
 80045ee:	4311      	orrs	r1, r2
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	430b      	orrs	r3, r1
 80045f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	000186a0 	.word	0x000186a0
 8004650:	001e847f 	.word	0x001e847f
 8004654:	003d08ff 	.word	0x003d08ff
 8004658:	431bde83 	.word	0x431bde83
 800465c:	10624dd3 	.word	0x10624dd3

08004660 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	607a      	str	r2, [r7, #4]
 800466a:	461a      	mov	r2, r3
 800466c:	460b      	mov	r3, r1
 800466e:	817b      	strh	r3, [r7, #10]
 8004670:	4613      	mov	r3, r2
 8004672:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004674:	f7fe ff08 	bl	8003488 <HAL_GetTick>
 8004678:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b20      	cmp	r3, #32
 8004684:	f040 80e0 	bne.w	8004848 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2319      	movs	r3, #25
 800468e:	2201      	movs	r2, #1
 8004690:	4970      	ldr	r1, [pc, #448]	; (8004854 <HAL_I2C_Master_Transmit+0x1f4>)
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fa92 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800469e:	2302      	movs	r3, #2
 80046a0:	e0d3      	b.n	800484a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_I2C_Master_Transmit+0x50>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e0cc      	b.n	800484a <HAL_I2C_Master_Transmit+0x1ea>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d007      	beq.n	80046d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0201 	orr.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2221      	movs	r2, #33	; 0x21
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2210      	movs	r2, #16
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	893a      	ldrh	r2, [r7, #8]
 8004706:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4a50      	ldr	r2, [pc, #320]	; (8004858 <HAL_I2C_Master_Transmit+0x1f8>)
 8004716:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004718:	8979      	ldrh	r1, [r7, #10]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	6a3a      	ldr	r2, [r7, #32]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f9ca 	bl	8004ab8 <I2C_MasterRequestWrite>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e08d      	b.n	800484a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800472e:	2300      	movs	r3, #0
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004744:	e066      	b.n	8004814 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	6a39      	ldr	r1, [r7, #32]
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fb0c 	bl	8004d68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00d      	beq.n	8004772 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	2b04      	cmp	r3, #4
 800475c:	d107      	bne.n	800476e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e06b      	b.n	800484a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	781a      	ldrb	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d11b      	bne.n	80047e8 <HAL_I2C_Master_Transmit+0x188>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d017      	beq.n	80047e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	781a      	ldrb	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	6a39      	ldr	r1, [r7, #32]
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fafc 	bl	8004dea <I2C_WaitOnBTFFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00d      	beq.n	8004814 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d107      	bne.n	8004810 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800480e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e01a      	b.n	800484a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004818:	2b00      	cmp	r3, #0
 800481a:	d194      	bne.n	8004746 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	e000      	b.n	800484a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004848:	2302      	movs	r3, #2
  }
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	00100002 	.word	0x00100002
 8004858:	ffff0000 	.word	0xffff0000

0800485c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	; 0x28
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	607a      	str	r2, [r7, #4]
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	460b      	mov	r3, r1
 800486a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800486c:	f7fe fe0c 	bl	8003488 <HAL_GetTick>
 8004870:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004872:	2301      	movs	r3, #1
 8004874:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b20      	cmp	r3, #32
 8004880:	f040 8111 	bne.w	8004aa6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2319      	movs	r3, #25
 800488a:	2201      	movs	r2, #1
 800488c:	4988      	ldr	r1, [pc, #544]	; (8004ab0 <HAL_I2C_IsDeviceReady+0x254>)
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f994 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800489a:	2302      	movs	r3, #2
 800489c:	e104      	b.n	8004aa8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_I2C_IsDeviceReady+0x50>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e0fd      	b.n	8004aa8 <HAL_I2C_IsDeviceReady+0x24c>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d007      	beq.n	80048d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2224      	movs	r2, #36	; 0x24
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4a70      	ldr	r2, [pc, #448]	; (8004ab4 <HAL_I2C_IsDeviceReady+0x258>)
 80048f4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004904:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2200      	movs	r2, #0
 800490e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 f952 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00d      	beq.n	800493a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492c:	d103      	bne.n	8004936 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004934:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e0b6      	b.n	8004aa8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800493a:	897b      	ldrh	r3, [r7, #10]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	461a      	mov	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004948:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800494a:	f7fe fd9d 	bl	8003488 <HAL_GetTick>
 800494e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b02      	cmp	r3, #2
 800495c:	bf0c      	ite	eq
 800495e:	2301      	moveq	r3, #1
 8004960:	2300      	movne	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004974:	bf0c      	ite	eq
 8004976:	2301      	moveq	r3, #1
 8004978:	2300      	movne	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800497e:	e025      	b.n	80049cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004980:	f7fe fd82 	bl	8003488 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d302      	bcc.n	8004996 <HAL_I2C_IsDeviceReady+0x13a>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	22a0      	movs	r2, #160	; 0xa0
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2ba0      	cmp	r3, #160	; 0xa0
 80049d6:	d005      	beq.n	80049e4 <HAL_I2C_IsDeviceReady+0x188>
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <HAL_I2C_IsDeviceReady+0x188>
 80049de:	7dbb      	ldrb	r3, [r7, #22]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0cd      	beq.n	8004980 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d129      	bne.n	8004a4e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a08:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	2319      	movs	r3, #25
 8004a26:	2201      	movs	r2, #1
 8004a28:	4921      	ldr	r1, [pc, #132]	; (8004ab0 <HAL_I2C_IsDeviceReady+0x254>)
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f8c6 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e036      	b.n	8004aa8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e02c      	b.n	8004aa8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a5c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a66:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	2319      	movs	r3, #25
 8004a6e:	2201      	movs	r2, #1
 8004a70:	490f      	ldr	r1, [pc, #60]	; (8004ab0 <HAL_I2C_IsDeviceReady+0x254>)
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f8a2 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e012      	b.n	8004aa8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	3301      	adds	r3, #1
 8004a86:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	f4ff af32 	bcc.w	80048f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004aa6:	2302      	movs	r3, #2
  }
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3720      	adds	r7, #32
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	00100002 	.word	0x00100002
 8004ab4:	ffff0000 	.word	0xffff0000

08004ab8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	607a      	str	r2, [r7, #4]
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d006      	beq.n	8004ae2 <I2C_MasterRequestWrite+0x2a>
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d003      	beq.n	8004ae2 <I2C_MasterRequestWrite+0x2a>
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ae0:	d108      	bne.n	8004af4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e00b      	b.n	8004b0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af8:	2b12      	cmp	r3, #18
 8004afa:	d107      	bne.n	8004b0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f84f 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00d      	beq.n	8004b40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b32:	d103      	bne.n	8004b3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e035      	b.n	8004bac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b48:	d108      	bne.n	8004b5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b4a:	897b      	ldrh	r3, [r7, #10]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b58:	611a      	str	r2, [r3, #16]
 8004b5a:	e01b      	b.n	8004b94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b5c:	897b      	ldrh	r3, [r7, #10]
 8004b5e:	11db      	asrs	r3, r3, #7
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f003 0306 	and.w	r3, r3, #6
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f063 030f 	orn	r3, r3, #15
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	490e      	ldr	r1, [pc, #56]	; (8004bb4 <I2C_MasterRequestWrite+0xfc>)
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 f875 	bl	8004c6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e010      	b.n	8004bac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b8a:	897b      	ldrh	r3, [r7, #10]
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	4907      	ldr	r1, [pc, #28]	; (8004bb8 <I2C_MasterRequestWrite+0x100>)
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f865 	bl	8004c6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	00010008 	.word	0x00010008
 8004bb8:	00010002 	.word	0x00010002

08004bbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bcc:	e025      	b.n	8004c1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d021      	beq.n	8004c1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd6:	f7fe fc57 	bl	8003488 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d302      	bcc.n	8004bec <I2C_WaitOnFlagUntilTimeout+0x30>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d116      	bne.n	8004c1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f043 0220 	orr.w	r2, r3, #32
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e023      	b.n	8004c62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	0c1b      	lsrs	r3, r3, #16
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d10d      	bne.n	8004c40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	43da      	mvns	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	bf0c      	ite	eq
 8004c36:	2301      	moveq	r3, #1
 8004c38:	2300      	movne	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	e00c      	b.n	8004c5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	43da      	mvns	r2, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	bf0c      	ite	eq
 8004c52:	2301      	moveq	r3, #1
 8004c54:	2300      	movne	r3, #0
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d0b6      	beq.n	8004bce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c78:	e051      	b.n	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c88:	d123      	bne.n	8004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ca2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f043 0204 	orr.w	r2, r3, #4
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e046      	b.n	8004d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd8:	d021      	beq.n	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cda:	f7fe fbd5 	bl	8003488 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d302      	bcc.n	8004cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d116      	bne.n	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f043 0220 	orr.w	r2, r3, #32
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e020      	b.n	8004d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	0c1b      	lsrs	r3, r3, #16
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d10c      	bne.n	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	43da      	mvns	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4013      	ands	r3, r2
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bf14      	ite	ne
 8004d3a:	2301      	movne	r3, #1
 8004d3c:	2300      	moveq	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	e00b      	b.n	8004d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	43da      	mvns	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d18d      	bne.n	8004c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d74:	e02d      	b.n	8004dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f878 	bl	8004e6c <I2C_IsAcknowledgeFailed>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e02d      	b.n	8004de2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8c:	d021      	beq.n	8004dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8e:	f7fe fb7b 	bl	8003488 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d302      	bcc.n	8004da4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d116      	bne.n	8004dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	f043 0220 	orr.w	r2, r3, #32
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e007      	b.n	8004de2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ddc:	2b80      	cmp	r3, #128	; 0x80
 8004dde:	d1ca      	bne.n	8004d76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004df6:	e02d      	b.n	8004e54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f837 	bl	8004e6c <I2C_IsAcknowledgeFailed>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e02d      	b.n	8004e64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0e:	d021      	beq.n	8004e54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e10:	f7fe fb3a 	bl	8003488 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d302      	bcc.n	8004e26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d116      	bne.n	8004e54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	f043 0220 	orr.w	r2, r3, #32
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e007      	b.n	8004e64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d1ca      	bne.n	8004df8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e82:	d11b      	bne.n	8004ebc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	f043 0204 	orr.w	r2, r3, #4
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	d129      	bne.n	8004f34 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2224      	movs	r2, #36	; 0x24
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0210 	bic.w	r2, r2, #16
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	e000      	b.n	8004f36 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
  }
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d12a      	bne.n	8004fb2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2224      	movs	r2, #36	; 0x24
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0201 	bic.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004f7c:	89fb      	ldrh	r3, [r7, #14]
 8004f7e:	f023 030f 	bic.w	r3, r3, #15
 8004f82:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	89fb      	ldrh	r3, [r7, #14]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	89fa      	ldrh	r2, [r7, #14]
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0201 	orr.w	r2, r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e000      	b.n	8004fb4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004fb2:	2302      	movs	r3, #2
  }
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc2:	b08f      	sub	sp, #60	; 0x3c
 8004fc4:	af0a      	add	r7, sp, #40	; 0x28
 8004fc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e10f      	b.n	80051f2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d106      	bne.n	8004ff2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7fd fe63 	bl	8002cb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2203      	movs	r2, #3
 8004ff6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f001 f980 	bl	8006316 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	687e      	ldr	r6, [r7, #4]
 800501e:	466d      	mov	r5, sp
 8005020:	f106 0410 	add.w	r4, r6, #16
 8005024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800502a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800502c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005030:	e885 0003 	stmia.w	r5, {r0, r1}
 8005034:	1d33      	adds	r3, r6, #4
 8005036:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005038:	6838      	ldr	r0, [r7, #0]
 800503a:	f001 f90b 	bl	8006254 <USB_CoreInit>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0d0      	b.n	80051f2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2100      	movs	r1, #0
 8005056:	4618      	mov	r0, r3
 8005058:	f001 f96e 	bl	8006338 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800505c:	2300      	movs	r3, #0
 800505e:	73fb      	strb	r3, [r7, #15]
 8005060:	e04a      	b.n	80050f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005062:	7bfa      	ldrb	r2, [r7, #15]
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	333d      	adds	r3, #61	; 0x3d
 8005072:	2201      	movs	r2, #1
 8005074:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005076:	7bfa      	ldrb	r2, [r7, #15]
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	333c      	adds	r3, #60	; 0x3c
 8005086:	7bfa      	ldrb	r2, [r7, #15]
 8005088:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800508a:	7bfa      	ldrb	r2, [r7, #15]
 800508c:	7bfb      	ldrb	r3, [r7, #15]
 800508e:	b298      	uxth	r0, r3
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	440b      	add	r3, r1
 800509c:	3342      	adds	r3, #66	; 0x42
 800509e:	4602      	mov	r2, r0
 80050a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050a2:	7bfa      	ldrb	r2, [r7, #15]
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	4613      	mov	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	333f      	adds	r3, #63	; 0x3f
 80050b2:	2200      	movs	r2, #0
 80050b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050b6:	7bfa      	ldrb	r2, [r7, #15]
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	3344      	adds	r3, #68	; 0x44
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050ca:	7bfa      	ldrb	r2, [r7, #15]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	3348      	adds	r3, #72	; 0x48
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050de:	7bfa      	ldrb	r2, [r7, #15]
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	1a9b      	subs	r3, r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	3350      	adds	r3, #80	; 0x50
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	3301      	adds	r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
 80050f8:	7bfa      	ldrb	r2, [r7, #15]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d3af      	bcc.n	8005062 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005102:	2300      	movs	r3, #0
 8005104:	73fb      	strb	r3, [r7, #15]
 8005106:	e044      	b.n	8005192 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005108:	7bfa      	ldrb	r2, [r7, #15]
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	4613      	mov	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800511a:	2200      	movs	r2, #0
 800511c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800511e:	7bfa      	ldrb	r2, [r7, #15]
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005130:	7bfa      	ldrb	r2, [r7, #15]
 8005132:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005134:	7bfa      	ldrb	r2, [r7, #15]
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	4613      	mov	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	1a9b      	subs	r3, r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	440b      	add	r3, r1
 8005142:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800514a:	7bfa      	ldrb	r2, [r7, #15]
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	4613      	mov	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	1a9b      	subs	r3, r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	440b      	add	r3, r1
 8005158:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005160:	7bfa      	ldrb	r2, [r7, #15]
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005176:	7bfa      	ldrb	r2, [r7, #15]
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	440b      	add	r3, r1
 8005184:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	3301      	adds	r3, #1
 8005190:	73fb      	strb	r3, [r7, #15]
 8005192:	7bfa      	ldrb	r2, [r7, #15]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	429a      	cmp	r2, r3
 800519a:	d3b5      	bcc.n	8005108 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	603b      	str	r3, [r7, #0]
 80051a2:	687e      	ldr	r6, [r7, #4]
 80051a4:	466d      	mov	r5, sp
 80051a6:	f106 0410 	add.w	r4, r6, #16
 80051aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80051ba:	1d33      	adds	r3, r6, #4
 80051bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051be:	6838      	ldr	r0, [r7, #0]
 80051c0:	f001 f8e4 	bl	800638c <USB_DevInit>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e00d      	b.n	80051f2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f001 fa93 	bl	8006716 <USB_DevDisconnect>

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080051fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e25b      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d075      	beq.n	8005306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800521a:	4ba3      	ldr	r3, [pc, #652]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 030c 	and.w	r3, r3, #12
 8005222:	2b04      	cmp	r3, #4
 8005224:	d00c      	beq.n	8005240 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005226:	4ba0      	ldr	r3, [pc, #640]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800522e:	2b08      	cmp	r3, #8
 8005230:	d112      	bne.n	8005258 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005232:	4b9d      	ldr	r3, [pc, #628]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800523a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800523e:	d10b      	bne.n	8005258 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005240:	4b99      	ldr	r3, [pc, #612]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d05b      	beq.n	8005304 <HAL_RCC_OscConfig+0x108>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d157      	bne.n	8005304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e236      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005260:	d106      	bne.n	8005270 <HAL_RCC_OscConfig+0x74>
 8005262:	4b91      	ldr	r3, [pc, #580]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a90      	ldr	r2, [pc, #576]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 8005268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	e01d      	b.n	80052ac <HAL_RCC_OscConfig+0xb0>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005278:	d10c      	bne.n	8005294 <HAL_RCC_OscConfig+0x98>
 800527a:	4b8b      	ldr	r3, [pc, #556]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a8a      	ldr	r2, [pc, #552]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 8005280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	4b88      	ldr	r3, [pc, #544]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a87      	ldr	r2, [pc, #540]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 800528c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	e00b      	b.n	80052ac <HAL_RCC_OscConfig+0xb0>
 8005294:	4b84      	ldr	r3, [pc, #528]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a83      	ldr	r2, [pc, #524]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 800529a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	4b81      	ldr	r3, [pc, #516]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a80      	ldr	r2, [pc, #512]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 80052a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d013      	beq.n	80052dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b4:	f7fe f8e8 	bl	8003488 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052bc:	f7fe f8e4 	bl	8003488 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b64      	cmp	r3, #100	; 0x64
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e1fb      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ce:	4b76      	ldr	r3, [pc, #472]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0xc0>
 80052da:	e014      	b.n	8005306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052dc:	f7fe f8d4 	bl	8003488 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052e4:	f7fe f8d0 	bl	8003488 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b64      	cmp	r3, #100	; 0x64
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e1e7      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052f6:	4b6c      	ldr	r3, [pc, #432]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f0      	bne.n	80052e4 <HAL_RCC_OscConfig+0xe8>
 8005302:	e000      	b.n	8005306 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d063      	beq.n	80053da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005312:	4b65      	ldr	r3, [pc, #404]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 030c 	and.w	r3, r3, #12
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800531e:	4b62      	ldr	r3, [pc, #392]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005326:	2b08      	cmp	r3, #8
 8005328:	d11c      	bne.n	8005364 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800532a:	4b5f      	ldr	r3, [pc, #380]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d116      	bne.n	8005364 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005336:	4b5c      	ldr	r3, [pc, #368]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_RCC_OscConfig+0x152>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d001      	beq.n	800534e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e1bb      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534e:	4b56      	ldr	r3, [pc, #344]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	4952      	ldr	r1, [pc, #328]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 800535e:	4313      	orrs	r3, r2
 8005360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005362:	e03a      	b.n	80053da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d020      	beq.n	80053ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800536c:	4b4f      	ldr	r3, [pc, #316]	; (80054ac <HAL_RCC_OscConfig+0x2b0>)
 800536e:	2201      	movs	r2, #1
 8005370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005372:	f7fe f889 	bl	8003488 <HAL_GetTick>
 8005376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800537a:	f7fe f885 	bl	8003488 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e19c      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538c:	4b46      	ldr	r3, [pc, #280]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0f0      	beq.n	800537a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005398:	4b43      	ldr	r3, [pc, #268]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	4940      	ldr	r1, [pc, #256]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	600b      	str	r3, [r1, #0]
 80053ac:	e015      	b.n	80053da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ae:	4b3f      	ldr	r3, [pc, #252]	; (80054ac <HAL_RCC_OscConfig+0x2b0>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b4:	f7fe f868 	bl	8003488 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053bc:	f7fe f864 	bl	8003488 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e17b      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ce:	4b36      	ldr	r3, [pc, #216]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d030      	beq.n	8005448 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d016      	beq.n	800541c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ee:	4b30      	ldr	r3, [pc, #192]	; (80054b0 <HAL_RCC_OscConfig+0x2b4>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f4:	f7fe f848 	bl	8003488 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053fc:	f7fe f844 	bl	8003488 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e15b      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800540e:	4b26      	ldr	r3, [pc, #152]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 8005410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f0      	beq.n	80053fc <HAL_RCC_OscConfig+0x200>
 800541a:	e015      	b.n	8005448 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800541c:	4b24      	ldr	r3, [pc, #144]	; (80054b0 <HAL_RCC_OscConfig+0x2b4>)
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005422:	f7fe f831 	bl	8003488 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800542a:	f7fe f82d 	bl	8003488 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e144      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800543c:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 800543e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f0      	bne.n	800542a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80a0 	beq.w	8005596 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005456:	2300      	movs	r3, #0
 8005458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800545a:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10f      	bne.n	8005486 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005466:	2300      	movs	r3, #0
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	4b0f      	ldr	r3, [pc, #60]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	4a0e      	ldr	r2, [pc, #56]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 8005470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005474:	6413      	str	r3, [r2, #64]	; 0x40
 8005476:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <HAL_RCC_OscConfig+0x2ac>)
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547e:	60bb      	str	r3, [r7, #8]
 8005480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005482:	2301      	movs	r3, #1
 8005484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005486:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <HAL_RCC_OscConfig+0x2b8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d121      	bne.n	80054d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005492:	4b08      	ldr	r3, [pc, #32]	; (80054b4 <HAL_RCC_OscConfig+0x2b8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a07      	ldr	r2, [pc, #28]	; (80054b4 <HAL_RCC_OscConfig+0x2b8>)
 8005498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800549e:	f7fd fff3 	bl	8003488 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a4:	e011      	b.n	80054ca <HAL_RCC_OscConfig+0x2ce>
 80054a6:	bf00      	nop
 80054a8:	40023800 	.word	0x40023800
 80054ac:	42470000 	.word	0x42470000
 80054b0:	42470e80 	.word	0x42470e80
 80054b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b8:	f7fd ffe6 	bl	8003488 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e0fd      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ca:	4b81      	ldr	r3, [pc, #516]	; (80056d0 <HAL_RCC_OscConfig+0x4d4>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f0      	beq.n	80054b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d106      	bne.n	80054ec <HAL_RCC_OscConfig+0x2f0>
 80054de:	4b7d      	ldr	r3, [pc, #500]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 80054e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e2:	4a7c      	ldr	r2, [pc, #496]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 80054e4:	f043 0301 	orr.w	r3, r3, #1
 80054e8:	6713      	str	r3, [r2, #112]	; 0x70
 80054ea:	e01c      	b.n	8005526 <HAL_RCC_OscConfig+0x32a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b05      	cmp	r3, #5
 80054f2:	d10c      	bne.n	800550e <HAL_RCC_OscConfig+0x312>
 80054f4:	4b77      	ldr	r3, [pc, #476]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 80054f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f8:	4a76      	ldr	r2, [pc, #472]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 80054fa:	f043 0304 	orr.w	r3, r3, #4
 80054fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005500:	4b74      	ldr	r3, [pc, #464]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 8005502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005504:	4a73      	ldr	r2, [pc, #460]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 8005506:	f043 0301 	orr.w	r3, r3, #1
 800550a:	6713      	str	r3, [r2, #112]	; 0x70
 800550c:	e00b      	b.n	8005526 <HAL_RCC_OscConfig+0x32a>
 800550e:	4b71      	ldr	r3, [pc, #452]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 8005510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005512:	4a70      	ldr	r2, [pc, #448]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 8005514:	f023 0301 	bic.w	r3, r3, #1
 8005518:	6713      	str	r3, [r2, #112]	; 0x70
 800551a:	4b6e      	ldr	r3, [pc, #440]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 800551c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551e:	4a6d      	ldr	r2, [pc, #436]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 8005520:	f023 0304 	bic.w	r3, r3, #4
 8005524:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d015      	beq.n	800555a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552e:	f7fd ffab 	bl	8003488 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005534:	e00a      	b.n	800554c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005536:	f7fd ffa7 	bl	8003488 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	f241 3288 	movw	r2, #5000	; 0x1388
 8005544:	4293      	cmp	r3, r2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e0bc      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554c:	4b61      	ldr	r3, [pc, #388]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 800554e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0ee      	beq.n	8005536 <HAL_RCC_OscConfig+0x33a>
 8005558:	e014      	b.n	8005584 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800555a:	f7fd ff95 	bl	8003488 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005560:	e00a      	b.n	8005578 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005562:	f7fd ff91 	bl	8003488 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005570:	4293      	cmp	r3, r2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e0a6      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005578:	4b56      	ldr	r3, [pc, #344]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 800557a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1ee      	bne.n	8005562 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d105      	bne.n	8005596 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800558a:	4b52      	ldr	r3, [pc, #328]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	4a51      	ldr	r2, [pc, #324]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 8005590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005594:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 8092 	beq.w	80056c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055a0:	4b4c      	ldr	r3, [pc, #304]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 030c 	and.w	r3, r3, #12
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d05c      	beq.n	8005666 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d141      	bne.n	8005638 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b4:	4b48      	ldr	r3, [pc, #288]	; (80056d8 <HAL_RCC_OscConfig+0x4dc>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ba:	f7fd ff65 	bl	8003488 <HAL_GetTick>
 80055be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c2:	f7fd ff61 	bl	8003488 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e078      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d4:	4b3f      	ldr	r3, [pc, #252]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1f0      	bne.n	80055c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69da      	ldr	r2, [r3, #28]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	019b      	lsls	r3, r3, #6
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	085b      	lsrs	r3, r3, #1
 80055f8:	3b01      	subs	r3, #1
 80055fa:	041b      	lsls	r3, r3, #16
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	061b      	lsls	r3, r3, #24
 8005604:	4933      	ldr	r1, [pc, #204]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 8005606:	4313      	orrs	r3, r2
 8005608:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800560a:	4b33      	ldr	r3, [pc, #204]	; (80056d8 <HAL_RCC_OscConfig+0x4dc>)
 800560c:	2201      	movs	r2, #1
 800560e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005610:	f7fd ff3a 	bl	8003488 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005618:	f7fd ff36 	bl	8003488 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e04d      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562a:	4b2a      	ldr	r3, [pc, #168]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0f0      	beq.n	8005618 <HAL_RCC_OscConfig+0x41c>
 8005636:	e045      	b.n	80056c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005638:	4b27      	ldr	r3, [pc, #156]	; (80056d8 <HAL_RCC_OscConfig+0x4dc>)
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563e:	f7fd ff23 	bl	8003488 <HAL_GetTick>
 8005642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005644:	e008      	b.n	8005658 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005646:	f7fd ff1f 	bl	8003488 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e036      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005658:	4b1e      	ldr	r3, [pc, #120]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1f0      	bne.n	8005646 <HAL_RCC_OscConfig+0x44a>
 8005664:	e02e      	b.n	80056c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e029      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005672:	4b18      	ldr	r3, [pc, #96]	; (80056d4 <HAL_RCC_OscConfig+0x4d8>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	429a      	cmp	r2, r3
 8005684:	d11c      	bne.n	80056c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005690:	429a      	cmp	r2, r3
 8005692:	d115      	bne.n	80056c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800569a:	4013      	ands	r3, r2
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d10d      	bne.n	80056c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d106      	bne.n	80056c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80056bc:	429a      	cmp	r2, r3
 80056be:	d001      	beq.n	80056c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	40007000 	.word	0x40007000
 80056d4:	40023800 	.word	0x40023800
 80056d8:	42470060 	.word	0x42470060

080056dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0cc      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056f0:	4b68      	ldr	r3, [pc, #416]	; (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 030f 	and.w	r3, r3, #15
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d90c      	bls.n	8005718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fe:	4b65      	ldr	r3, [pc, #404]	; (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005706:	4b63      	ldr	r3, [pc, #396]	; (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d001      	beq.n	8005718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e0b8      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d020      	beq.n	8005766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005730:	4b59      	ldr	r3, [pc, #356]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	4a58      	ldr	r2, [pc, #352]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800573a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005748:	4b53      	ldr	r3, [pc, #332]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	4a52      	ldr	r2, [pc, #328]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005754:	4b50      	ldr	r3, [pc, #320]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	494d      	ldr	r1, [pc, #308]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	4313      	orrs	r3, r2
 8005764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d044      	beq.n	80057fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d107      	bne.n	800578a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577a:	4b47      	ldr	r3, [pc, #284]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d119      	bne.n	80057ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e07f      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d003      	beq.n	800579a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005796:	2b03      	cmp	r3, #3
 8005798:	d107      	bne.n	80057aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800579a:	4b3f      	ldr	r3, [pc, #252]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d109      	bne.n	80057ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e06f      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057aa:	4b3b      	ldr	r3, [pc, #236]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e067      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057ba:	4b37      	ldr	r3, [pc, #220]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f023 0203 	bic.w	r2, r3, #3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	4934      	ldr	r1, [pc, #208]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057cc:	f7fd fe5c 	bl	8003488 <HAL_GetTick>
 80057d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057d2:	e00a      	b.n	80057ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057d4:	f7fd fe58 	bl	8003488 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e04f      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ea:	4b2b      	ldr	r3, [pc, #172]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 020c 	and.w	r2, r3, #12
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d1eb      	bne.n	80057d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057fc:	4b25      	ldr	r3, [pc, #148]	; (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d20c      	bcs.n	8005824 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800580a:	4b22      	ldr	r3, [pc, #136]	; (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005812:	4b20      	ldr	r3, [pc, #128]	; (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	429a      	cmp	r2, r3
 800581e:	d001      	beq.n	8005824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e032      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005830:	4b19      	ldr	r3, [pc, #100]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	4916      	ldr	r1, [pc, #88]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	4313      	orrs	r3, r2
 8005840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800584e:	4b12      	ldr	r3, [pc, #72]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	490e      	ldr	r1, [pc, #56]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	4313      	orrs	r3, r2
 8005860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005862:	f000 f821 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8005866:	4601      	mov	r1, r0
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	4a0a      	ldr	r2, [pc, #40]	; (800589c <HAL_RCC_ClockConfig+0x1c0>)
 8005874:	5cd3      	ldrb	r3, [r2, r3]
 8005876:	fa21 f303 	lsr.w	r3, r1, r3
 800587a:	4a09      	ldr	r2, [pc, #36]	; (80058a0 <HAL_RCC_ClockConfig+0x1c4>)
 800587c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f7fd fdbc 	bl	8003400 <HAL_InitTick>

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	40023c00 	.word	0x40023c00
 8005898:	40023800 	.word	0x40023800
 800589c:	0800ce98 	.word	0x0800ce98
 80058a0:	200000e4 	.word	0x200000e4
 80058a4:	20000148 	.word	0x20000148

080058a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	607b      	str	r3, [r7, #4]
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	2300      	movs	r3, #0
 80058b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058be:	4b63      	ldr	r3, [pc, #396]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 030c 	and.w	r3, r3, #12
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d007      	beq.n	80058da <HAL_RCC_GetSysClockFreq+0x32>
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d008      	beq.n	80058e0 <HAL_RCC_GetSysClockFreq+0x38>
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f040 80b4 	bne.w	8005a3c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058d4:	4b5e      	ldr	r3, [pc, #376]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80058d6:	60bb      	str	r3, [r7, #8]
       break;
 80058d8:	e0b3      	b.n	8005a42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058da:	4b5e      	ldr	r3, [pc, #376]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80058dc:	60bb      	str	r3, [r7, #8]
      break;
 80058de:	e0b0      	b.n	8005a42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058e0:	4b5a      	ldr	r3, [pc, #360]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058ea:	4b58      	ldr	r3, [pc, #352]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d04a      	beq.n	800598c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058f6:	4b55      	ldr	r3, [pc, #340]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	099b      	lsrs	r3, r3, #6
 80058fc:	f04f 0400 	mov.w	r4, #0
 8005900:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	ea03 0501 	and.w	r5, r3, r1
 800590c:	ea04 0602 	and.w	r6, r4, r2
 8005910:	4629      	mov	r1, r5
 8005912:	4632      	mov	r2, r6
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	f04f 0400 	mov.w	r4, #0
 800591c:	0154      	lsls	r4, r2, #5
 800591e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005922:	014b      	lsls	r3, r1, #5
 8005924:	4619      	mov	r1, r3
 8005926:	4622      	mov	r2, r4
 8005928:	1b49      	subs	r1, r1, r5
 800592a:	eb62 0206 	sbc.w	r2, r2, r6
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	f04f 0400 	mov.w	r4, #0
 8005936:	0194      	lsls	r4, r2, #6
 8005938:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800593c:	018b      	lsls	r3, r1, #6
 800593e:	1a5b      	subs	r3, r3, r1
 8005940:	eb64 0402 	sbc.w	r4, r4, r2
 8005944:	f04f 0100 	mov.w	r1, #0
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	00e2      	lsls	r2, r4, #3
 800594e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005952:	00d9      	lsls	r1, r3, #3
 8005954:	460b      	mov	r3, r1
 8005956:	4614      	mov	r4, r2
 8005958:	195b      	adds	r3, r3, r5
 800595a:	eb44 0406 	adc.w	r4, r4, r6
 800595e:	f04f 0100 	mov.w	r1, #0
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	0262      	lsls	r2, r4, #9
 8005968:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800596c:	0259      	lsls	r1, r3, #9
 800596e:	460b      	mov	r3, r1
 8005970:	4614      	mov	r4, r2
 8005972:	4618      	mov	r0, r3
 8005974:	4621      	mov	r1, r4
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f04f 0400 	mov.w	r4, #0
 800597c:	461a      	mov	r2, r3
 800597e:	4623      	mov	r3, r4
 8005980:	f7fb f992 	bl	8000ca8 <__aeabi_uldivmod>
 8005984:	4603      	mov	r3, r0
 8005986:	460c      	mov	r4, r1
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	e049      	b.n	8005a20 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800598c:	4b2f      	ldr	r3, [pc, #188]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	099b      	lsrs	r3, r3, #6
 8005992:	f04f 0400 	mov.w	r4, #0
 8005996:	f240 11ff 	movw	r1, #511	; 0x1ff
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	ea03 0501 	and.w	r5, r3, r1
 80059a2:	ea04 0602 	and.w	r6, r4, r2
 80059a6:	4629      	mov	r1, r5
 80059a8:	4632      	mov	r2, r6
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	f04f 0400 	mov.w	r4, #0
 80059b2:	0154      	lsls	r4, r2, #5
 80059b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80059b8:	014b      	lsls	r3, r1, #5
 80059ba:	4619      	mov	r1, r3
 80059bc:	4622      	mov	r2, r4
 80059be:	1b49      	subs	r1, r1, r5
 80059c0:	eb62 0206 	sbc.w	r2, r2, r6
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	f04f 0400 	mov.w	r4, #0
 80059cc:	0194      	lsls	r4, r2, #6
 80059ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80059d2:	018b      	lsls	r3, r1, #6
 80059d4:	1a5b      	subs	r3, r3, r1
 80059d6:	eb64 0402 	sbc.w	r4, r4, r2
 80059da:	f04f 0100 	mov.w	r1, #0
 80059de:	f04f 0200 	mov.w	r2, #0
 80059e2:	00e2      	lsls	r2, r4, #3
 80059e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80059e8:	00d9      	lsls	r1, r3, #3
 80059ea:	460b      	mov	r3, r1
 80059ec:	4614      	mov	r4, r2
 80059ee:	195b      	adds	r3, r3, r5
 80059f0:	eb44 0406 	adc.w	r4, r4, r6
 80059f4:	f04f 0100 	mov.w	r1, #0
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	02a2      	lsls	r2, r4, #10
 80059fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005a02:	0299      	lsls	r1, r3, #10
 8005a04:	460b      	mov	r3, r1
 8005a06:	4614      	mov	r4, r2
 8005a08:	4618      	mov	r0, r3
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f04f 0400 	mov.w	r4, #0
 8005a12:	461a      	mov	r2, r3
 8005a14:	4623      	mov	r3, r4
 8005a16:	f7fb f947 	bl	8000ca8 <__aeabi_uldivmod>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a20:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	0c1b      	lsrs	r3, r3, #16
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a38:	60bb      	str	r3, [r7, #8]
      break;
 8005a3a:	e002      	b.n	8005a42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a3c:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005a3e:	60bb      	str	r3, [r7, #8]
      break;
 8005a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a42:	68bb      	ldr	r3, [r7, #8]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	00f42400 	.word	0x00f42400
 8005a54:	007a1200 	.word	0x007a1200

08005a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	200000e4 	.word	0x200000e4

08005a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a74:	f7ff fff0 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005a78:	4601      	mov	r1, r0
 8005a7a:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	0a9b      	lsrs	r3, r3, #10
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	4a03      	ldr	r2, [pc, #12]	; (8005a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a86:	5cd3      	ldrb	r3, [r2, r3]
 8005a88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40023800 	.word	0x40023800
 8005a94:	0800cea8 	.word	0x0800cea8

08005a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a9c:	f7ff ffdc 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005aa0:	4601      	mov	r1, r0
 8005aa2:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	0b5b      	lsrs	r3, r3, #13
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	4a03      	ldr	r2, [pc, #12]	; (8005abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aae:	5cd3      	ldrb	r3, [r2, r3]
 8005ab0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40023800 	.word	0x40023800
 8005abc:	0800cea8 	.word	0x0800cea8

08005ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e03f      	b.n	8005b52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d106      	bne.n	8005aec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fd f848 	bl	8002b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2224      	movs	r2, #36	; 0x24
 8005af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f829 	bl	8005b5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	691a      	ldr	r2, [r3, #16]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695a      	ldr	r2, [r3, #20]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b60:	b085      	sub	sp, #20
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b9e:	f023 030c 	bic.w	r3, r3, #12
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	68f9      	ldr	r1, [r7, #12]
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699a      	ldr	r2, [r3, #24]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bca:	f040 818b 	bne.w	8005ee4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4ac1      	ldr	r2, [pc, #772]	; (8005ed8 <UART_SetConfig+0x37c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d005      	beq.n	8005be4 <UART_SetConfig+0x88>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4abf      	ldr	r2, [pc, #764]	; (8005edc <UART_SetConfig+0x380>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	f040 80bd 	bne.w	8005d5e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005be4:	f7ff ff58 	bl	8005a98 <HAL_RCC_GetPCLK2Freq>
 8005be8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	461d      	mov	r5, r3
 8005bee:	f04f 0600 	mov.w	r6, #0
 8005bf2:	46a8      	mov	r8, r5
 8005bf4:	46b1      	mov	r9, r6
 8005bf6:	eb18 0308 	adds.w	r3, r8, r8
 8005bfa:	eb49 0409 	adc.w	r4, r9, r9
 8005bfe:	4698      	mov	r8, r3
 8005c00:	46a1      	mov	r9, r4
 8005c02:	eb18 0805 	adds.w	r8, r8, r5
 8005c06:	eb49 0906 	adc.w	r9, r9, r6
 8005c0a:	f04f 0100 	mov.w	r1, #0
 8005c0e:	f04f 0200 	mov.w	r2, #0
 8005c12:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c16:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c1a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c1e:	4688      	mov	r8, r1
 8005c20:	4691      	mov	r9, r2
 8005c22:	eb18 0005 	adds.w	r0, r8, r5
 8005c26:	eb49 0106 	adc.w	r1, r9, r6
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	461d      	mov	r5, r3
 8005c30:	f04f 0600 	mov.w	r6, #0
 8005c34:	196b      	adds	r3, r5, r5
 8005c36:	eb46 0406 	adc.w	r4, r6, r6
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	f7fb f833 	bl	8000ca8 <__aeabi_uldivmod>
 8005c42:	4603      	mov	r3, r0
 8005c44:	460c      	mov	r4, r1
 8005c46:	461a      	mov	r2, r3
 8005c48:	4ba5      	ldr	r3, [pc, #660]	; (8005ee0 <UART_SetConfig+0x384>)
 8005c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	461d      	mov	r5, r3
 8005c58:	f04f 0600 	mov.w	r6, #0
 8005c5c:	46a9      	mov	r9, r5
 8005c5e:	46b2      	mov	sl, r6
 8005c60:	eb19 0309 	adds.w	r3, r9, r9
 8005c64:	eb4a 040a 	adc.w	r4, sl, sl
 8005c68:	4699      	mov	r9, r3
 8005c6a:	46a2      	mov	sl, r4
 8005c6c:	eb19 0905 	adds.w	r9, r9, r5
 8005c70:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c74:	f04f 0100 	mov.w	r1, #0
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c88:	4689      	mov	r9, r1
 8005c8a:	4692      	mov	sl, r2
 8005c8c:	eb19 0005 	adds.w	r0, r9, r5
 8005c90:	eb4a 0106 	adc.w	r1, sl, r6
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	461d      	mov	r5, r3
 8005c9a:	f04f 0600 	mov.w	r6, #0
 8005c9e:	196b      	adds	r3, r5, r5
 8005ca0:	eb46 0406 	adc.w	r4, r6, r6
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	4623      	mov	r3, r4
 8005ca8:	f7fa fffe 	bl	8000ca8 <__aeabi_uldivmod>
 8005cac:	4603      	mov	r3, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4b8b      	ldr	r3, [pc, #556]	; (8005ee0 <UART_SetConfig+0x384>)
 8005cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005cb8:	095b      	lsrs	r3, r3, #5
 8005cba:	2164      	movs	r1, #100	; 0x64
 8005cbc:	fb01 f303 	mul.w	r3, r1, r3
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	3332      	adds	r3, #50	; 0x32
 8005cc6:	4a86      	ldr	r2, [pc, #536]	; (8005ee0 <UART_SetConfig+0x384>)
 8005cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cd4:	4498      	add	r8, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	461d      	mov	r5, r3
 8005cda:	f04f 0600 	mov.w	r6, #0
 8005cde:	46a9      	mov	r9, r5
 8005ce0:	46b2      	mov	sl, r6
 8005ce2:	eb19 0309 	adds.w	r3, r9, r9
 8005ce6:	eb4a 040a 	adc.w	r4, sl, sl
 8005cea:	4699      	mov	r9, r3
 8005cec:	46a2      	mov	sl, r4
 8005cee:	eb19 0905 	adds.w	r9, r9, r5
 8005cf2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005cf6:	f04f 0100 	mov.w	r1, #0
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d0a:	4689      	mov	r9, r1
 8005d0c:	4692      	mov	sl, r2
 8005d0e:	eb19 0005 	adds.w	r0, r9, r5
 8005d12:	eb4a 0106 	adc.w	r1, sl, r6
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	461d      	mov	r5, r3
 8005d1c:	f04f 0600 	mov.w	r6, #0
 8005d20:	196b      	adds	r3, r5, r5
 8005d22:	eb46 0406 	adc.w	r4, r6, r6
 8005d26:	461a      	mov	r2, r3
 8005d28:	4623      	mov	r3, r4
 8005d2a:	f7fa ffbd 	bl	8000ca8 <__aeabi_uldivmod>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	460c      	mov	r4, r1
 8005d32:	461a      	mov	r2, r3
 8005d34:	4b6a      	ldr	r3, [pc, #424]	; (8005ee0 <UART_SetConfig+0x384>)
 8005d36:	fba3 1302 	umull	r1, r3, r3, r2
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	2164      	movs	r1, #100	; 0x64
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	3332      	adds	r3, #50	; 0x32
 8005d48:	4a65      	ldr	r2, [pc, #404]	; (8005ee0 <UART_SetConfig+0x384>)
 8005d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4e:	095b      	lsrs	r3, r3, #5
 8005d50:	f003 0207 	and.w	r2, r3, #7
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4442      	add	r2, r8
 8005d5a:	609a      	str	r2, [r3, #8]
 8005d5c:	e26f      	b.n	800623e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d5e:	f7ff fe87 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8005d62:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	461d      	mov	r5, r3
 8005d68:	f04f 0600 	mov.w	r6, #0
 8005d6c:	46a8      	mov	r8, r5
 8005d6e:	46b1      	mov	r9, r6
 8005d70:	eb18 0308 	adds.w	r3, r8, r8
 8005d74:	eb49 0409 	adc.w	r4, r9, r9
 8005d78:	4698      	mov	r8, r3
 8005d7a:	46a1      	mov	r9, r4
 8005d7c:	eb18 0805 	adds.w	r8, r8, r5
 8005d80:	eb49 0906 	adc.w	r9, r9, r6
 8005d84:	f04f 0100 	mov.w	r1, #0
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d90:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d94:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d98:	4688      	mov	r8, r1
 8005d9a:	4691      	mov	r9, r2
 8005d9c:	eb18 0005 	adds.w	r0, r8, r5
 8005da0:	eb49 0106 	adc.w	r1, r9, r6
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	461d      	mov	r5, r3
 8005daa:	f04f 0600 	mov.w	r6, #0
 8005dae:	196b      	adds	r3, r5, r5
 8005db0:	eb46 0406 	adc.w	r4, r6, r6
 8005db4:	461a      	mov	r2, r3
 8005db6:	4623      	mov	r3, r4
 8005db8:	f7fa ff76 	bl	8000ca8 <__aeabi_uldivmod>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	4b47      	ldr	r3, [pc, #284]	; (8005ee0 <UART_SetConfig+0x384>)
 8005dc4:	fba3 2302 	umull	r2, r3, r3, r2
 8005dc8:	095b      	lsrs	r3, r3, #5
 8005dca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	461d      	mov	r5, r3
 8005dd2:	f04f 0600 	mov.w	r6, #0
 8005dd6:	46a9      	mov	r9, r5
 8005dd8:	46b2      	mov	sl, r6
 8005dda:	eb19 0309 	adds.w	r3, r9, r9
 8005dde:	eb4a 040a 	adc.w	r4, sl, sl
 8005de2:	4699      	mov	r9, r3
 8005de4:	46a2      	mov	sl, r4
 8005de6:	eb19 0905 	adds.w	r9, r9, r5
 8005dea:	eb4a 0a06 	adc.w	sl, sl, r6
 8005dee:	f04f 0100 	mov.w	r1, #0
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dfa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dfe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e02:	4689      	mov	r9, r1
 8005e04:	4692      	mov	sl, r2
 8005e06:	eb19 0005 	adds.w	r0, r9, r5
 8005e0a:	eb4a 0106 	adc.w	r1, sl, r6
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	461d      	mov	r5, r3
 8005e14:	f04f 0600 	mov.w	r6, #0
 8005e18:	196b      	adds	r3, r5, r5
 8005e1a:	eb46 0406 	adc.w	r4, r6, r6
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4623      	mov	r3, r4
 8005e22:	f7fa ff41 	bl	8000ca8 <__aeabi_uldivmod>
 8005e26:	4603      	mov	r3, r0
 8005e28:	460c      	mov	r4, r1
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	4b2c      	ldr	r3, [pc, #176]	; (8005ee0 <UART_SetConfig+0x384>)
 8005e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	2164      	movs	r1, #100	; 0x64
 8005e36:	fb01 f303 	mul.w	r3, r1, r3
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	3332      	adds	r3, #50	; 0x32
 8005e40:	4a27      	ldr	r2, [pc, #156]	; (8005ee0 <UART_SetConfig+0x384>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e4e:	4498      	add	r8, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	461d      	mov	r5, r3
 8005e54:	f04f 0600 	mov.w	r6, #0
 8005e58:	46a9      	mov	r9, r5
 8005e5a:	46b2      	mov	sl, r6
 8005e5c:	eb19 0309 	adds.w	r3, r9, r9
 8005e60:	eb4a 040a 	adc.w	r4, sl, sl
 8005e64:	4699      	mov	r9, r3
 8005e66:	46a2      	mov	sl, r4
 8005e68:	eb19 0905 	adds.w	r9, r9, r5
 8005e6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e70:	f04f 0100 	mov.w	r1, #0
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e84:	4689      	mov	r9, r1
 8005e86:	4692      	mov	sl, r2
 8005e88:	eb19 0005 	adds.w	r0, r9, r5
 8005e8c:	eb4a 0106 	adc.w	r1, sl, r6
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	461d      	mov	r5, r3
 8005e96:	f04f 0600 	mov.w	r6, #0
 8005e9a:	196b      	adds	r3, r5, r5
 8005e9c:	eb46 0406 	adc.w	r4, r6, r6
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4623      	mov	r3, r4
 8005ea4:	f7fa ff00 	bl	8000ca8 <__aeabi_uldivmod>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	460c      	mov	r4, r1
 8005eac:	461a      	mov	r2, r3
 8005eae:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <UART_SetConfig+0x384>)
 8005eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb4:	095b      	lsrs	r3, r3, #5
 8005eb6:	2164      	movs	r1, #100	; 0x64
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	3332      	adds	r3, #50	; 0x32
 8005ec2:	4a07      	ldr	r2, [pc, #28]	; (8005ee0 <UART_SetConfig+0x384>)
 8005ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec8:	095b      	lsrs	r3, r3, #5
 8005eca:	f003 0207 	and.w	r2, r3, #7
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4442      	add	r2, r8
 8005ed4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005ed6:	e1b2      	b.n	800623e <UART_SetConfig+0x6e2>
 8005ed8:	40011000 	.word	0x40011000
 8005edc:	40011400 	.word	0x40011400
 8005ee0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4ad7      	ldr	r2, [pc, #860]	; (8006248 <UART_SetConfig+0x6ec>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d005      	beq.n	8005efa <UART_SetConfig+0x39e>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4ad6      	ldr	r2, [pc, #856]	; (800624c <UART_SetConfig+0x6f0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	f040 80d1 	bne.w	800609c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005efa:	f7ff fdcd 	bl	8005a98 <HAL_RCC_GetPCLK2Freq>
 8005efe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	469a      	mov	sl, r3
 8005f04:	f04f 0b00 	mov.w	fp, #0
 8005f08:	46d0      	mov	r8, sl
 8005f0a:	46d9      	mov	r9, fp
 8005f0c:	eb18 0308 	adds.w	r3, r8, r8
 8005f10:	eb49 0409 	adc.w	r4, r9, r9
 8005f14:	4698      	mov	r8, r3
 8005f16:	46a1      	mov	r9, r4
 8005f18:	eb18 080a 	adds.w	r8, r8, sl
 8005f1c:	eb49 090b 	adc.w	r9, r9, fp
 8005f20:	f04f 0100 	mov.w	r1, #0
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f34:	4688      	mov	r8, r1
 8005f36:	4691      	mov	r9, r2
 8005f38:	eb1a 0508 	adds.w	r5, sl, r8
 8005f3c:	eb4b 0609 	adc.w	r6, fp, r9
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4619      	mov	r1, r3
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	f04f 0300 	mov.w	r3, #0
 8005f4e:	f04f 0400 	mov.w	r4, #0
 8005f52:	0094      	lsls	r4, r2, #2
 8005f54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f58:	008b      	lsls	r3, r1, #2
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	4623      	mov	r3, r4
 8005f5e:	4628      	mov	r0, r5
 8005f60:	4631      	mov	r1, r6
 8005f62:	f7fa fea1 	bl	8000ca8 <__aeabi_uldivmod>
 8005f66:	4603      	mov	r3, r0
 8005f68:	460c      	mov	r4, r1
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	4bb8      	ldr	r3, [pc, #736]	; (8006250 <UART_SetConfig+0x6f4>)
 8005f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	469b      	mov	fp, r3
 8005f7c:	f04f 0c00 	mov.w	ip, #0
 8005f80:	46d9      	mov	r9, fp
 8005f82:	46e2      	mov	sl, ip
 8005f84:	eb19 0309 	adds.w	r3, r9, r9
 8005f88:	eb4a 040a 	adc.w	r4, sl, sl
 8005f8c:	4699      	mov	r9, r3
 8005f8e:	46a2      	mov	sl, r4
 8005f90:	eb19 090b 	adds.w	r9, r9, fp
 8005f94:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f98:	f04f 0100 	mov.w	r1, #0
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fa4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fa8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fac:	4689      	mov	r9, r1
 8005fae:	4692      	mov	sl, r2
 8005fb0:	eb1b 0509 	adds.w	r5, fp, r9
 8005fb4:	eb4c 060a 	adc.w	r6, ip, sl
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	f04f 0200 	mov.w	r2, #0
 8005fc2:	f04f 0300 	mov.w	r3, #0
 8005fc6:	f04f 0400 	mov.w	r4, #0
 8005fca:	0094      	lsls	r4, r2, #2
 8005fcc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fd0:	008b      	lsls	r3, r1, #2
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	4623      	mov	r3, r4
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	4631      	mov	r1, r6
 8005fda:	f7fa fe65 	bl	8000ca8 <__aeabi_uldivmod>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4b9a      	ldr	r3, [pc, #616]	; (8006250 <UART_SetConfig+0x6f4>)
 8005fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	2164      	movs	r1, #100	; 0x64
 8005fee:	fb01 f303 	mul.w	r3, r1, r3
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	3332      	adds	r3, #50	; 0x32
 8005ff8:	4a95      	ldr	r2, [pc, #596]	; (8006250 <UART_SetConfig+0x6f4>)
 8005ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006004:	4498      	add	r8, r3
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	469b      	mov	fp, r3
 800600a:	f04f 0c00 	mov.w	ip, #0
 800600e:	46d9      	mov	r9, fp
 8006010:	46e2      	mov	sl, ip
 8006012:	eb19 0309 	adds.w	r3, r9, r9
 8006016:	eb4a 040a 	adc.w	r4, sl, sl
 800601a:	4699      	mov	r9, r3
 800601c:	46a2      	mov	sl, r4
 800601e:	eb19 090b 	adds.w	r9, r9, fp
 8006022:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006026:	f04f 0100 	mov.w	r1, #0
 800602a:	f04f 0200 	mov.w	r2, #0
 800602e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006032:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006036:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800603a:	4689      	mov	r9, r1
 800603c:	4692      	mov	sl, r2
 800603e:	eb1b 0509 	adds.w	r5, fp, r9
 8006042:	eb4c 060a 	adc.w	r6, ip, sl
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	4619      	mov	r1, r3
 800604c:	f04f 0200 	mov.w	r2, #0
 8006050:	f04f 0300 	mov.w	r3, #0
 8006054:	f04f 0400 	mov.w	r4, #0
 8006058:	0094      	lsls	r4, r2, #2
 800605a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800605e:	008b      	lsls	r3, r1, #2
 8006060:	461a      	mov	r2, r3
 8006062:	4623      	mov	r3, r4
 8006064:	4628      	mov	r0, r5
 8006066:	4631      	mov	r1, r6
 8006068:	f7fa fe1e 	bl	8000ca8 <__aeabi_uldivmod>
 800606c:	4603      	mov	r3, r0
 800606e:	460c      	mov	r4, r1
 8006070:	461a      	mov	r2, r3
 8006072:	4b77      	ldr	r3, [pc, #476]	; (8006250 <UART_SetConfig+0x6f4>)
 8006074:	fba3 1302 	umull	r1, r3, r3, r2
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	2164      	movs	r1, #100	; 0x64
 800607c:	fb01 f303 	mul.w	r3, r1, r3
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	3332      	adds	r3, #50	; 0x32
 8006086:	4a72      	ldr	r2, [pc, #456]	; (8006250 <UART_SetConfig+0x6f4>)
 8006088:	fba2 2303 	umull	r2, r3, r2, r3
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	f003 020f 	and.w	r2, r3, #15
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4442      	add	r2, r8
 8006098:	609a      	str	r2, [r3, #8]
 800609a:	e0d0      	b.n	800623e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800609c:	f7ff fce8 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 80060a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	469a      	mov	sl, r3
 80060a6:	f04f 0b00 	mov.w	fp, #0
 80060aa:	46d0      	mov	r8, sl
 80060ac:	46d9      	mov	r9, fp
 80060ae:	eb18 0308 	adds.w	r3, r8, r8
 80060b2:	eb49 0409 	adc.w	r4, r9, r9
 80060b6:	4698      	mov	r8, r3
 80060b8:	46a1      	mov	r9, r4
 80060ba:	eb18 080a 	adds.w	r8, r8, sl
 80060be:	eb49 090b 	adc.w	r9, r9, fp
 80060c2:	f04f 0100 	mov.w	r1, #0
 80060c6:	f04f 0200 	mov.w	r2, #0
 80060ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060d6:	4688      	mov	r8, r1
 80060d8:	4691      	mov	r9, r2
 80060da:	eb1a 0508 	adds.w	r5, sl, r8
 80060de:	eb4b 0609 	adc.w	r6, fp, r9
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	4619      	mov	r1, r3
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	f04f 0400 	mov.w	r4, #0
 80060f4:	0094      	lsls	r4, r2, #2
 80060f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060fa:	008b      	lsls	r3, r1, #2
 80060fc:	461a      	mov	r2, r3
 80060fe:	4623      	mov	r3, r4
 8006100:	4628      	mov	r0, r5
 8006102:	4631      	mov	r1, r6
 8006104:	f7fa fdd0 	bl	8000ca8 <__aeabi_uldivmod>
 8006108:	4603      	mov	r3, r0
 800610a:	460c      	mov	r4, r1
 800610c:	461a      	mov	r2, r3
 800610e:	4b50      	ldr	r3, [pc, #320]	; (8006250 <UART_SetConfig+0x6f4>)
 8006110:	fba3 2302 	umull	r2, r3, r3, r2
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	469b      	mov	fp, r3
 800611e:	f04f 0c00 	mov.w	ip, #0
 8006122:	46d9      	mov	r9, fp
 8006124:	46e2      	mov	sl, ip
 8006126:	eb19 0309 	adds.w	r3, r9, r9
 800612a:	eb4a 040a 	adc.w	r4, sl, sl
 800612e:	4699      	mov	r9, r3
 8006130:	46a2      	mov	sl, r4
 8006132:	eb19 090b 	adds.w	r9, r9, fp
 8006136:	eb4a 0a0c 	adc.w	sl, sl, ip
 800613a:	f04f 0100 	mov.w	r1, #0
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006146:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800614a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800614e:	4689      	mov	r9, r1
 8006150:	4692      	mov	sl, r2
 8006152:	eb1b 0509 	adds.w	r5, fp, r9
 8006156:	eb4c 060a 	adc.w	r6, ip, sl
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	4619      	mov	r1, r3
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	f04f 0400 	mov.w	r4, #0
 800616c:	0094      	lsls	r4, r2, #2
 800616e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006172:	008b      	lsls	r3, r1, #2
 8006174:	461a      	mov	r2, r3
 8006176:	4623      	mov	r3, r4
 8006178:	4628      	mov	r0, r5
 800617a:	4631      	mov	r1, r6
 800617c:	f7fa fd94 	bl	8000ca8 <__aeabi_uldivmod>
 8006180:	4603      	mov	r3, r0
 8006182:	460c      	mov	r4, r1
 8006184:	461a      	mov	r2, r3
 8006186:	4b32      	ldr	r3, [pc, #200]	; (8006250 <UART_SetConfig+0x6f4>)
 8006188:	fba3 1302 	umull	r1, r3, r3, r2
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	2164      	movs	r1, #100	; 0x64
 8006190:	fb01 f303 	mul.w	r3, r1, r3
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	3332      	adds	r3, #50	; 0x32
 800619a:	4a2d      	ldr	r2, [pc, #180]	; (8006250 <UART_SetConfig+0x6f4>)
 800619c:	fba2 2303 	umull	r2, r3, r2, r3
 80061a0:	095b      	lsrs	r3, r3, #5
 80061a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061a6:	4498      	add	r8, r3
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	469b      	mov	fp, r3
 80061ac:	f04f 0c00 	mov.w	ip, #0
 80061b0:	46d9      	mov	r9, fp
 80061b2:	46e2      	mov	sl, ip
 80061b4:	eb19 0309 	adds.w	r3, r9, r9
 80061b8:	eb4a 040a 	adc.w	r4, sl, sl
 80061bc:	4699      	mov	r9, r3
 80061be:	46a2      	mov	sl, r4
 80061c0:	eb19 090b 	adds.w	r9, r9, fp
 80061c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061c8:	f04f 0100 	mov.w	r1, #0
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061dc:	4689      	mov	r9, r1
 80061de:	4692      	mov	sl, r2
 80061e0:	eb1b 0509 	adds.w	r5, fp, r9
 80061e4:	eb4c 060a 	adc.w	r6, ip, sl
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	4619      	mov	r1, r3
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	f04f 0300 	mov.w	r3, #0
 80061f6:	f04f 0400 	mov.w	r4, #0
 80061fa:	0094      	lsls	r4, r2, #2
 80061fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006200:	008b      	lsls	r3, r1, #2
 8006202:	461a      	mov	r2, r3
 8006204:	4623      	mov	r3, r4
 8006206:	4628      	mov	r0, r5
 8006208:	4631      	mov	r1, r6
 800620a:	f7fa fd4d 	bl	8000ca8 <__aeabi_uldivmod>
 800620e:	4603      	mov	r3, r0
 8006210:	460c      	mov	r4, r1
 8006212:	461a      	mov	r2, r3
 8006214:	4b0e      	ldr	r3, [pc, #56]	; (8006250 <UART_SetConfig+0x6f4>)
 8006216:	fba3 1302 	umull	r1, r3, r3, r2
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	2164      	movs	r1, #100	; 0x64
 800621e:	fb01 f303 	mul.w	r3, r1, r3
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	3332      	adds	r3, #50	; 0x32
 8006228:	4a09      	ldr	r2, [pc, #36]	; (8006250 <UART_SetConfig+0x6f4>)
 800622a:	fba2 2303 	umull	r2, r3, r2, r3
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	f003 020f 	and.w	r2, r3, #15
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4442      	add	r2, r8
 800623a:	609a      	str	r2, [r3, #8]
}
 800623c:	e7ff      	b.n	800623e <UART_SetConfig+0x6e2>
 800623e:	bf00      	nop
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006248:	40011000 	.word	0x40011000
 800624c:	40011400 	.word	0x40011400
 8006250:	51eb851f 	.word	0x51eb851f

08006254 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006254:	b084      	sub	sp, #16
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	f107 001c 	add.w	r0, r7, #28
 8006262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	2b01      	cmp	r3, #1
 800626a:	d122      	bne.n	80062b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006270:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006296:	2b01      	cmp	r3, #1
 8006298:	d105      	bne.n	80062a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa56 	bl	8006758 <USB_CoreReset>
 80062ac:	4603      	mov	r3, r0
 80062ae:	73fb      	strb	r3, [r7, #15]
 80062b0:	e01a      	b.n	80062e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fa4a 	bl	8006758 <USB_CoreReset>
 80062c4:	4603      	mov	r3, r0
 80062c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	639a      	str	r2, [r3, #56]	; 0x38
 80062da:	e005      	b.n	80062e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d10b      	bne.n	8006306 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f043 0206 	orr.w	r2, r3, #6
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f043 0220 	orr.w	r2, r3, #32
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006306:	7bfb      	ldrb	r3, [r7, #15]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006312:	b004      	add	sp, #16
 8006314:	4770      	bx	lr

08006316 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f023 0201 	bic.w	r2, r3, #1
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d106      	bne.n	8006364 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	60da      	str	r2, [r3, #12]
 8006362:	e00b      	b.n	800637c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d106      	bne.n	8006378 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60da      	str	r2, [r3, #12]
 8006376:	e001      	b.n	800637c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e003      	b.n	8006384 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800637c:	2032      	movs	r0, #50	; 0x32
 800637e:	f7fd f88f 	bl	80034a0 <HAL_Delay>

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800638c:	b084      	sub	sp, #16
 800638e:	b580      	push	{r7, lr}
 8006390:	b086      	sub	sp, #24
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800639a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063a6:	2300      	movs	r3, #0
 80063a8:	613b      	str	r3, [r7, #16]
 80063aa:	e009      	b.n	80063c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	3340      	adds	r3, #64	; 0x40
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	2200      	movs	r2, #0
 80063b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	3301      	adds	r3, #1
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	2b0e      	cmp	r3, #14
 80063c4:	d9f2      	bls.n	80063ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d11c      	bne.n	8006406 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063da:	f043 0302 	orr.w	r3, r3, #2
 80063de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	639a      	str	r2, [r3, #56]	; 0x38
 8006404:	e00b      	b.n	800641e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006424:	461a      	mov	r2, r3
 8006426:	2300      	movs	r3, #0
 8006428:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006430:	4619      	mov	r1, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006438:	461a      	mov	r2, r3
 800643a:	680b      	ldr	r3, [r1, #0]
 800643c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006440:	2b01      	cmp	r3, #1
 8006442:	d10c      	bne.n	800645e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d104      	bne.n	8006454 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800644a:	2100      	movs	r1, #0
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f949 	bl	80066e4 <USB_SetDevSpeed>
 8006452:	e008      	b.n	8006466 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006454:	2101      	movs	r1, #1
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f944 	bl	80066e4 <USB_SetDevSpeed>
 800645c:	e003      	b.n	8006466 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800645e:	2103      	movs	r1, #3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f93f 	bl	80066e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006466:	2110      	movs	r1, #16
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f8f3 	bl	8006654 <USB_FlushTxFifo>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f911 	bl	80066a0 <USB_FlushRxFifo>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648e:	461a      	mov	r2, r3
 8006490:	2300      	movs	r3, #0
 8006492:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649a:	461a      	mov	r2, r3
 800649c:	2300      	movs	r3, #0
 800649e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a6:	461a      	mov	r2, r3
 80064a8:	2300      	movs	r3, #0
 80064aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064ac:	2300      	movs	r3, #0
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	e043      	b.n	800653a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064c8:	d118      	bne.n	80064fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10a      	bne.n	80064e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064dc:	461a      	mov	r2, r3
 80064de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	e013      	b.n	800650e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f2:	461a      	mov	r2, r3
 80064f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	e008      	b.n	800650e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006508:	461a      	mov	r2, r3
 800650a:	2300      	movs	r3, #0
 800650c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651a:	461a      	mov	r2, r3
 800651c:	2300      	movs	r3, #0
 800651e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652c:	461a      	mov	r2, r3
 800652e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006532:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	3301      	adds	r3, #1
 8006538:	613b      	str	r3, [r7, #16]
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	429a      	cmp	r2, r3
 8006540:	d3b7      	bcc.n	80064b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006542:	2300      	movs	r3, #0
 8006544:	613b      	str	r3, [r7, #16]
 8006546:	e043      	b.n	80065d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800655a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800655e:	d118      	bne.n	8006592 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006572:	461a      	mov	r2, r3
 8006574:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006578:	6013      	str	r3, [r2, #0]
 800657a:	e013      	b.n	80065a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006588:	461a      	mov	r2, r3
 800658a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	e008      	b.n	80065a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659e:	461a      	mov	r2, r3
 80065a0:	2300      	movs	r3, #0
 80065a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b0:	461a      	mov	r2, r3
 80065b2:	2300      	movs	r3, #0
 80065b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c2:	461a      	mov	r2, r3
 80065c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	3301      	adds	r3, #1
 80065ce:	613b      	str	r3, [r7, #16]
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d3b7      	bcc.n	8006548 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80065f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d105      	bne.n	800660c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	f043 0210 	orr.w	r2, r3, #16
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699a      	ldr	r2, [r3, #24]
 8006610:	4b0f      	ldr	r3, [pc, #60]	; (8006650 <USB_DevInit+0x2c4>)
 8006612:	4313      	orrs	r3, r2
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800661a:	2b00      	cmp	r3, #0
 800661c:	d005      	beq.n	800662a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	f043 0208 	orr.w	r2, r3, #8
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800662a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d107      	bne.n	8006640 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006638:	f043 0304 	orr.w	r3, r3, #4
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006640:	7dfb      	ldrb	r3, [r7, #23]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800664c:	b004      	add	sp, #16
 800664e:	4770      	bx	lr
 8006650:	803c3800 	.word	0x803c3800

08006654 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	019b      	lsls	r3, r3, #6
 8006666:	f043 0220 	orr.w	r2, r3, #32
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3301      	adds	r3, #1
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4a09      	ldr	r2, [pc, #36]	; (800669c <USB_FlushTxFifo+0x48>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d901      	bls.n	8006680 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e006      	b.n	800668e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	f003 0320 	and.w	r3, r3, #32
 8006688:	2b20      	cmp	r3, #32
 800668a:	d0f0      	beq.n	800666e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	00030d40 	.word	0x00030d40

080066a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2210      	movs	r2, #16
 80066b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3301      	adds	r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <USB_FlushRxFifo+0x40>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d901      	bls.n	80066c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e006      	b.n	80066d2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	f003 0310 	and.w	r3, r3, #16
 80066cc:	2b10      	cmp	r3, #16
 80066ce:	d0f0      	beq.n	80066b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	00030d40 	.word	0x00030d40

080066e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	68f9      	ldr	r1, [r7, #12]
 8006700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006704:	4313      	orrs	r3, r2
 8006706:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006716:	b480      	push	{r7}
 8006718:	b085      	sub	sp, #20
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006730:	f023 0303 	bic.w	r3, r3, #3
 8006734:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006744:	f043 0302 	orr.w	r3, r3, #2
 8006748:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3301      	adds	r3, #1
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4a13      	ldr	r2, [pc, #76]	; (80067bc <USB_CoreReset+0x64>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d901      	bls.n	8006776 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e01b      	b.n	80067ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	daf2      	bge.n	8006764 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f043 0201 	orr.w	r2, r3, #1
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4a09      	ldr	r2, [pc, #36]	; (80067bc <USB_CoreReset+0x64>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d901      	bls.n	80067a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e006      	b.n	80067ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d0f0      	beq.n	800678e <USB_CoreReset+0x36>

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	00030d40 	.word	0x00030d40

080067c0 <__errno>:
 80067c0:	4b01      	ldr	r3, [pc, #4]	; (80067c8 <__errno+0x8>)
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	20000150 	.word	0x20000150

080067cc <__libc_init_array>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	4e0d      	ldr	r6, [pc, #52]	; (8006804 <__libc_init_array+0x38>)
 80067d0:	4c0d      	ldr	r4, [pc, #52]	; (8006808 <__libc_init_array+0x3c>)
 80067d2:	1ba4      	subs	r4, r4, r6
 80067d4:	10a4      	asrs	r4, r4, #2
 80067d6:	2500      	movs	r5, #0
 80067d8:	42a5      	cmp	r5, r4
 80067da:	d109      	bne.n	80067f0 <__libc_init_array+0x24>
 80067dc:	4e0b      	ldr	r6, [pc, #44]	; (800680c <__libc_init_array+0x40>)
 80067de:	4c0c      	ldr	r4, [pc, #48]	; (8006810 <__libc_init_array+0x44>)
 80067e0:	f003 fe64 	bl	800a4ac <_init>
 80067e4:	1ba4      	subs	r4, r4, r6
 80067e6:	10a4      	asrs	r4, r4, #2
 80067e8:	2500      	movs	r5, #0
 80067ea:	42a5      	cmp	r5, r4
 80067ec:	d105      	bne.n	80067fa <__libc_init_array+0x2e>
 80067ee:	bd70      	pop	{r4, r5, r6, pc}
 80067f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067f4:	4798      	blx	r3
 80067f6:	3501      	adds	r5, #1
 80067f8:	e7ee      	b.n	80067d8 <__libc_init_array+0xc>
 80067fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067fe:	4798      	blx	r3
 8006800:	3501      	adds	r5, #1
 8006802:	e7f2      	b.n	80067ea <__libc_init_array+0x1e>
 8006804:	0800d174 	.word	0x0800d174
 8006808:	0800d174 	.word	0x0800d174
 800680c:	0800d174 	.word	0x0800d174
 8006810:	0800d178 	.word	0x0800d178

08006814 <memset>:
 8006814:	4402      	add	r2, r0
 8006816:	4603      	mov	r3, r0
 8006818:	4293      	cmp	r3, r2
 800681a:	d100      	bne.n	800681e <memset+0xa>
 800681c:	4770      	bx	lr
 800681e:	f803 1b01 	strb.w	r1, [r3], #1
 8006822:	e7f9      	b.n	8006818 <memset+0x4>

08006824 <__cvt>:
 8006824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006828:	ec55 4b10 	vmov	r4, r5, d0
 800682c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800682e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006832:	2d00      	cmp	r5, #0
 8006834:	460e      	mov	r6, r1
 8006836:	4691      	mov	r9, r2
 8006838:	4619      	mov	r1, r3
 800683a:	bfb8      	it	lt
 800683c:	4622      	movlt	r2, r4
 800683e:	462b      	mov	r3, r5
 8006840:	f027 0720 	bic.w	r7, r7, #32
 8006844:	bfbb      	ittet	lt
 8006846:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800684a:	461d      	movlt	r5, r3
 800684c:	2300      	movge	r3, #0
 800684e:	232d      	movlt	r3, #45	; 0x2d
 8006850:	bfb8      	it	lt
 8006852:	4614      	movlt	r4, r2
 8006854:	2f46      	cmp	r7, #70	; 0x46
 8006856:	700b      	strb	r3, [r1, #0]
 8006858:	d004      	beq.n	8006864 <__cvt+0x40>
 800685a:	2f45      	cmp	r7, #69	; 0x45
 800685c:	d100      	bne.n	8006860 <__cvt+0x3c>
 800685e:	3601      	adds	r6, #1
 8006860:	2102      	movs	r1, #2
 8006862:	e000      	b.n	8006866 <__cvt+0x42>
 8006864:	2103      	movs	r1, #3
 8006866:	ab03      	add	r3, sp, #12
 8006868:	9301      	str	r3, [sp, #4]
 800686a:	ab02      	add	r3, sp, #8
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	4632      	mov	r2, r6
 8006870:	4653      	mov	r3, sl
 8006872:	ec45 4b10 	vmov	d0, r4, r5
 8006876:	f001 fd77 	bl	8008368 <_dtoa_r>
 800687a:	2f47      	cmp	r7, #71	; 0x47
 800687c:	4680      	mov	r8, r0
 800687e:	d102      	bne.n	8006886 <__cvt+0x62>
 8006880:	f019 0f01 	tst.w	r9, #1
 8006884:	d026      	beq.n	80068d4 <__cvt+0xb0>
 8006886:	2f46      	cmp	r7, #70	; 0x46
 8006888:	eb08 0906 	add.w	r9, r8, r6
 800688c:	d111      	bne.n	80068b2 <__cvt+0x8e>
 800688e:	f898 3000 	ldrb.w	r3, [r8]
 8006892:	2b30      	cmp	r3, #48	; 0x30
 8006894:	d10a      	bne.n	80068ac <__cvt+0x88>
 8006896:	2200      	movs	r2, #0
 8006898:	2300      	movs	r3, #0
 800689a:	4620      	mov	r0, r4
 800689c:	4629      	mov	r1, r5
 800689e:	f7fa f923 	bl	8000ae8 <__aeabi_dcmpeq>
 80068a2:	b918      	cbnz	r0, 80068ac <__cvt+0x88>
 80068a4:	f1c6 0601 	rsb	r6, r6, #1
 80068a8:	f8ca 6000 	str.w	r6, [sl]
 80068ac:	f8da 3000 	ldr.w	r3, [sl]
 80068b0:	4499      	add	r9, r3
 80068b2:	2200      	movs	r2, #0
 80068b4:	2300      	movs	r3, #0
 80068b6:	4620      	mov	r0, r4
 80068b8:	4629      	mov	r1, r5
 80068ba:	f7fa f915 	bl	8000ae8 <__aeabi_dcmpeq>
 80068be:	b938      	cbnz	r0, 80068d0 <__cvt+0xac>
 80068c0:	2230      	movs	r2, #48	; 0x30
 80068c2:	9b03      	ldr	r3, [sp, #12]
 80068c4:	454b      	cmp	r3, r9
 80068c6:	d205      	bcs.n	80068d4 <__cvt+0xb0>
 80068c8:	1c59      	adds	r1, r3, #1
 80068ca:	9103      	str	r1, [sp, #12]
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	e7f8      	b.n	80068c2 <__cvt+0x9e>
 80068d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80068d4:	9b03      	ldr	r3, [sp, #12]
 80068d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068d8:	eba3 0308 	sub.w	r3, r3, r8
 80068dc:	4640      	mov	r0, r8
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	b004      	add	sp, #16
 80068e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080068e6 <__exponent>:
 80068e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068e8:	2900      	cmp	r1, #0
 80068ea:	4604      	mov	r4, r0
 80068ec:	bfba      	itte	lt
 80068ee:	4249      	neglt	r1, r1
 80068f0:	232d      	movlt	r3, #45	; 0x2d
 80068f2:	232b      	movge	r3, #43	; 0x2b
 80068f4:	2909      	cmp	r1, #9
 80068f6:	f804 2b02 	strb.w	r2, [r4], #2
 80068fa:	7043      	strb	r3, [r0, #1]
 80068fc:	dd20      	ble.n	8006940 <__exponent+0x5a>
 80068fe:	f10d 0307 	add.w	r3, sp, #7
 8006902:	461f      	mov	r7, r3
 8006904:	260a      	movs	r6, #10
 8006906:	fb91 f5f6 	sdiv	r5, r1, r6
 800690a:	fb06 1115 	mls	r1, r6, r5, r1
 800690e:	3130      	adds	r1, #48	; 0x30
 8006910:	2d09      	cmp	r5, #9
 8006912:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006916:	f103 32ff 	add.w	r2, r3, #4294967295
 800691a:	4629      	mov	r1, r5
 800691c:	dc09      	bgt.n	8006932 <__exponent+0x4c>
 800691e:	3130      	adds	r1, #48	; 0x30
 8006920:	3b02      	subs	r3, #2
 8006922:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006926:	42bb      	cmp	r3, r7
 8006928:	4622      	mov	r2, r4
 800692a:	d304      	bcc.n	8006936 <__exponent+0x50>
 800692c:	1a10      	subs	r0, r2, r0
 800692e:	b003      	add	sp, #12
 8006930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006932:	4613      	mov	r3, r2
 8006934:	e7e7      	b.n	8006906 <__exponent+0x20>
 8006936:	f813 2b01 	ldrb.w	r2, [r3], #1
 800693a:	f804 2b01 	strb.w	r2, [r4], #1
 800693e:	e7f2      	b.n	8006926 <__exponent+0x40>
 8006940:	2330      	movs	r3, #48	; 0x30
 8006942:	4419      	add	r1, r3
 8006944:	7083      	strb	r3, [r0, #2]
 8006946:	1d02      	adds	r2, r0, #4
 8006948:	70c1      	strb	r1, [r0, #3]
 800694a:	e7ef      	b.n	800692c <__exponent+0x46>

0800694c <_printf_float>:
 800694c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006950:	b08d      	sub	sp, #52	; 0x34
 8006952:	460c      	mov	r4, r1
 8006954:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006958:	4616      	mov	r6, r2
 800695a:	461f      	mov	r7, r3
 800695c:	4605      	mov	r5, r0
 800695e:	f002 fde7 	bl	8009530 <_localeconv_r>
 8006962:	6803      	ldr	r3, [r0, #0]
 8006964:	9304      	str	r3, [sp, #16]
 8006966:	4618      	mov	r0, r3
 8006968:	f7f9 fc42 	bl	80001f0 <strlen>
 800696c:	2300      	movs	r3, #0
 800696e:	930a      	str	r3, [sp, #40]	; 0x28
 8006970:	f8d8 3000 	ldr.w	r3, [r8]
 8006974:	9005      	str	r0, [sp, #20]
 8006976:	3307      	adds	r3, #7
 8006978:	f023 0307 	bic.w	r3, r3, #7
 800697c:	f103 0208 	add.w	r2, r3, #8
 8006980:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006984:	f8d4 b000 	ldr.w	fp, [r4]
 8006988:	f8c8 2000 	str.w	r2, [r8]
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006994:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006998:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800699c:	9307      	str	r3, [sp, #28]
 800699e:	f8cd 8018 	str.w	r8, [sp, #24]
 80069a2:	f04f 32ff 	mov.w	r2, #4294967295
 80069a6:	4ba7      	ldr	r3, [pc, #668]	; (8006c44 <_printf_float+0x2f8>)
 80069a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069ac:	f7fa f8ce 	bl	8000b4c <__aeabi_dcmpun>
 80069b0:	bb70      	cbnz	r0, 8006a10 <_printf_float+0xc4>
 80069b2:	f04f 32ff 	mov.w	r2, #4294967295
 80069b6:	4ba3      	ldr	r3, [pc, #652]	; (8006c44 <_printf_float+0x2f8>)
 80069b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069bc:	f7fa f8a8 	bl	8000b10 <__aeabi_dcmple>
 80069c0:	bb30      	cbnz	r0, 8006a10 <_printf_float+0xc4>
 80069c2:	2200      	movs	r2, #0
 80069c4:	2300      	movs	r3, #0
 80069c6:	4640      	mov	r0, r8
 80069c8:	4649      	mov	r1, r9
 80069ca:	f7fa f897 	bl	8000afc <__aeabi_dcmplt>
 80069ce:	b110      	cbz	r0, 80069d6 <_printf_float+0x8a>
 80069d0:	232d      	movs	r3, #45	; 0x2d
 80069d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d6:	4a9c      	ldr	r2, [pc, #624]	; (8006c48 <_printf_float+0x2fc>)
 80069d8:	4b9c      	ldr	r3, [pc, #624]	; (8006c4c <_printf_float+0x300>)
 80069da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80069de:	bf8c      	ite	hi
 80069e0:	4690      	movhi	r8, r2
 80069e2:	4698      	movls	r8, r3
 80069e4:	2303      	movs	r3, #3
 80069e6:	f02b 0204 	bic.w	r2, fp, #4
 80069ea:	6123      	str	r3, [r4, #16]
 80069ec:	6022      	str	r2, [r4, #0]
 80069ee:	f04f 0900 	mov.w	r9, #0
 80069f2:	9700      	str	r7, [sp, #0]
 80069f4:	4633      	mov	r3, r6
 80069f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80069f8:	4621      	mov	r1, r4
 80069fa:	4628      	mov	r0, r5
 80069fc:	f000 f9e6 	bl	8006dcc <_printf_common>
 8006a00:	3001      	adds	r0, #1
 8006a02:	f040 808d 	bne.w	8006b20 <_printf_float+0x1d4>
 8006a06:	f04f 30ff 	mov.w	r0, #4294967295
 8006a0a:	b00d      	add	sp, #52	; 0x34
 8006a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a10:	4642      	mov	r2, r8
 8006a12:	464b      	mov	r3, r9
 8006a14:	4640      	mov	r0, r8
 8006a16:	4649      	mov	r1, r9
 8006a18:	f7fa f898 	bl	8000b4c <__aeabi_dcmpun>
 8006a1c:	b110      	cbz	r0, 8006a24 <_printf_float+0xd8>
 8006a1e:	4a8c      	ldr	r2, [pc, #560]	; (8006c50 <_printf_float+0x304>)
 8006a20:	4b8c      	ldr	r3, [pc, #560]	; (8006c54 <_printf_float+0x308>)
 8006a22:	e7da      	b.n	80069da <_printf_float+0x8e>
 8006a24:	6861      	ldr	r1, [r4, #4]
 8006a26:	1c4b      	adds	r3, r1, #1
 8006a28:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006a2c:	a80a      	add	r0, sp, #40	; 0x28
 8006a2e:	d13e      	bne.n	8006aae <_printf_float+0x162>
 8006a30:	2306      	movs	r3, #6
 8006a32:	6063      	str	r3, [r4, #4]
 8006a34:	2300      	movs	r3, #0
 8006a36:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006a3a:	ab09      	add	r3, sp, #36	; 0x24
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	ec49 8b10 	vmov	d0, r8, r9
 8006a42:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a46:	6022      	str	r2, [r4, #0]
 8006a48:	f8cd a004 	str.w	sl, [sp, #4]
 8006a4c:	6861      	ldr	r1, [r4, #4]
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f7ff fee8 	bl	8006824 <__cvt>
 8006a54:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006a58:	2b47      	cmp	r3, #71	; 0x47
 8006a5a:	4680      	mov	r8, r0
 8006a5c:	d109      	bne.n	8006a72 <_printf_float+0x126>
 8006a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a60:	1cd8      	adds	r0, r3, #3
 8006a62:	db02      	blt.n	8006a6a <_printf_float+0x11e>
 8006a64:	6862      	ldr	r2, [r4, #4]
 8006a66:	4293      	cmp	r3, r2
 8006a68:	dd47      	ble.n	8006afa <_printf_float+0x1ae>
 8006a6a:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a6e:	fa5f fa8a 	uxtb.w	sl, sl
 8006a72:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006a76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a78:	d824      	bhi.n	8006ac4 <_printf_float+0x178>
 8006a7a:	3901      	subs	r1, #1
 8006a7c:	4652      	mov	r2, sl
 8006a7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a82:	9109      	str	r1, [sp, #36]	; 0x24
 8006a84:	f7ff ff2f 	bl	80068e6 <__exponent>
 8006a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a8a:	1813      	adds	r3, r2, r0
 8006a8c:	2a01      	cmp	r2, #1
 8006a8e:	4681      	mov	r9, r0
 8006a90:	6123      	str	r3, [r4, #16]
 8006a92:	dc02      	bgt.n	8006a9a <_printf_float+0x14e>
 8006a94:	6822      	ldr	r2, [r4, #0]
 8006a96:	07d1      	lsls	r1, r2, #31
 8006a98:	d501      	bpl.n	8006a9e <_printf_float+0x152>
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	6123      	str	r3, [r4, #16]
 8006a9e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0a5      	beq.n	80069f2 <_printf_float+0xa6>
 8006aa6:	232d      	movs	r3, #45	; 0x2d
 8006aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aac:	e7a1      	b.n	80069f2 <_printf_float+0xa6>
 8006aae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006ab2:	f000 8177 	beq.w	8006da4 <_printf_float+0x458>
 8006ab6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006aba:	d1bb      	bne.n	8006a34 <_printf_float+0xe8>
 8006abc:	2900      	cmp	r1, #0
 8006abe:	d1b9      	bne.n	8006a34 <_printf_float+0xe8>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e7b6      	b.n	8006a32 <_printf_float+0xe6>
 8006ac4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006ac8:	d119      	bne.n	8006afe <_printf_float+0x1b2>
 8006aca:	2900      	cmp	r1, #0
 8006acc:	6863      	ldr	r3, [r4, #4]
 8006ace:	dd0c      	ble.n	8006aea <_printf_float+0x19e>
 8006ad0:	6121      	str	r1, [r4, #16]
 8006ad2:	b913      	cbnz	r3, 8006ada <_printf_float+0x18e>
 8006ad4:	6822      	ldr	r2, [r4, #0]
 8006ad6:	07d2      	lsls	r2, r2, #31
 8006ad8:	d502      	bpl.n	8006ae0 <_printf_float+0x194>
 8006ada:	3301      	adds	r3, #1
 8006adc:	440b      	add	r3, r1
 8006ade:	6123      	str	r3, [r4, #16]
 8006ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae2:	65a3      	str	r3, [r4, #88]	; 0x58
 8006ae4:	f04f 0900 	mov.w	r9, #0
 8006ae8:	e7d9      	b.n	8006a9e <_printf_float+0x152>
 8006aea:	b913      	cbnz	r3, 8006af2 <_printf_float+0x1a6>
 8006aec:	6822      	ldr	r2, [r4, #0]
 8006aee:	07d0      	lsls	r0, r2, #31
 8006af0:	d501      	bpl.n	8006af6 <_printf_float+0x1aa>
 8006af2:	3302      	adds	r3, #2
 8006af4:	e7f3      	b.n	8006ade <_printf_float+0x192>
 8006af6:	2301      	movs	r3, #1
 8006af8:	e7f1      	b.n	8006ade <_printf_float+0x192>
 8006afa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006afe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006b02:	4293      	cmp	r3, r2
 8006b04:	db05      	blt.n	8006b12 <_printf_float+0x1c6>
 8006b06:	6822      	ldr	r2, [r4, #0]
 8006b08:	6123      	str	r3, [r4, #16]
 8006b0a:	07d1      	lsls	r1, r2, #31
 8006b0c:	d5e8      	bpl.n	8006ae0 <_printf_float+0x194>
 8006b0e:	3301      	adds	r3, #1
 8006b10:	e7e5      	b.n	8006ade <_printf_float+0x192>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	bfd4      	ite	le
 8006b16:	f1c3 0302 	rsble	r3, r3, #2
 8006b1a:	2301      	movgt	r3, #1
 8006b1c:	4413      	add	r3, r2
 8006b1e:	e7de      	b.n	8006ade <_printf_float+0x192>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	055a      	lsls	r2, r3, #21
 8006b24:	d407      	bmi.n	8006b36 <_printf_float+0x1ea>
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	4642      	mov	r2, r8
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	47b8      	blx	r7
 8006b30:	3001      	adds	r0, #1
 8006b32:	d12b      	bne.n	8006b8c <_printf_float+0x240>
 8006b34:	e767      	b.n	8006a06 <_printf_float+0xba>
 8006b36:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006b3a:	f240 80dc 	bls.w	8006cf6 <_printf_float+0x3aa>
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2300      	movs	r3, #0
 8006b42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b46:	f7f9 ffcf 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d033      	beq.n	8006bb6 <_printf_float+0x26a>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	4a41      	ldr	r2, [pc, #260]	; (8006c58 <_printf_float+0x30c>)
 8006b52:	4631      	mov	r1, r6
 8006b54:	4628      	mov	r0, r5
 8006b56:	47b8      	blx	r7
 8006b58:	3001      	adds	r0, #1
 8006b5a:	f43f af54 	beq.w	8006a06 <_printf_float+0xba>
 8006b5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b62:	429a      	cmp	r2, r3
 8006b64:	db02      	blt.n	8006b6c <_printf_float+0x220>
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	07d8      	lsls	r0, r3, #31
 8006b6a:	d50f      	bpl.n	8006b8c <_printf_float+0x240>
 8006b6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b70:	4631      	mov	r1, r6
 8006b72:	4628      	mov	r0, r5
 8006b74:	47b8      	blx	r7
 8006b76:	3001      	adds	r0, #1
 8006b78:	f43f af45 	beq.w	8006a06 <_printf_float+0xba>
 8006b7c:	f04f 0800 	mov.w	r8, #0
 8006b80:	f104 091a 	add.w	r9, r4, #26
 8006b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b86:	3b01      	subs	r3, #1
 8006b88:	4543      	cmp	r3, r8
 8006b8a:	dc09      	bgt.n	8006ba0 <_printf_float+0x254>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	079b      	lsls	r3, r3, #30
 8006b90:	f100 8103 	bmi.w	8006d9a <_printf_float+0x44e>
 8006b94:	68e0      	ldr	r0, [r4, #12]
 8006b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b98:	4298      	cmp	r0, r3
 8006b9a:	bfb8      	it	lt
 8006b9c:	4618      	movlt	r0, r3
 8006b9e:	e734      	b.n	8006a0a <_printf_float+0xbe>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	464a      	mov	r2, r9
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	47b8      	blx	r7
 8006baa:	3001      	adds	r0, #1
 8006bac:	f43f af2b 	beq.w	8006a06 <_printf_float+0xba>
 8006bb0:	f108 0801 	add.w	r8, r8, #1
 8006bb4:	e7e6      	b.n	8006b84 <_printf_float+0x238>
 8006bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	dc2b      	bgt.n	8006c14 <_printf_float+0x2c8>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	4a26      	ldr	r2, [pc, #152]	; (8006c58 <_printf_float+0x30c>)
 8006bc0:	4631      	mov	r1, r6
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	47b8      	blx	r7
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	f43f af1d 	beq.w	8006a06 <_printf_float+0xba>
 8006bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bce:	b923      	cbnz	r3, 8006bda <_printf_float+0x28e>
 8006bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd2:	b913      	cbnz	r3, 8006bda <_printf_float+0x28e>
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	07d9      	lsls	r1, r3, #31
 8006bd8:	d5d8      	bpl.n	8006b8c <_printf_float+0x240>
 8006bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bde:	4631      	mov	r1, r6
 8006be0:	4628      	mov	r0, r5
 8006be2:	47b8      	blx	r7
 8006be4:	3001      	adds	r0, #1
 8006be6:	f43f af0e 	beq.w	8006a06 <_printf_float+0xba>
 8006bea:	f04f 0900 	mov.w	r9, #0
 8006bee:	f104 0a1a 	add.w	sl, r4, #26
 8006bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf4:	425b      	negs	r3, r3
 8006bf6:	454b      	cmp	r3, r9
 8006bf8:	dc01      	bgt.n	8006bfe <_printf_float+0x2b2>
 8006bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bfc:	e794      	b.n	8006b28 <_printf_float+0x1dc>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	4652      	mov	r2, sl
 8006c02:	4631      	mov	r1, r6
 8006c04:	4628      	mov	r0, r5
 8006c06:	47b8      	blx	r7
 8006c08:	3001      	adds	r0, #1
 8006c0a:	f43f aefc 	beq.w	8006a06 <_printf_float+0xba>
 8006c0e:	f109 0901 	add.w	r9, r9, #1
 8006c12:	e7ee      	b.n	8006bf2 <_printf_float+0x2a6>
 8006c14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	bfa8      	it	ge
 8006c1c:	461a      	movge	r2, r3
 8006c1e:	2a00      	cmp	r2, #0
 8006c20:	4691      	mov	r9, r2
 8006c22:	dd07      	ble.n	8006c34 <_printf_float+0x2e8>
 8006c24:	4613      	mov	r3, r2
 8006c26:	4631      	mov	r1, r6
 8006c28:	4642      	mov	r2, r8
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	47b8      	blx	r7
 8006c2e:	3001      	adds	r0, #1
 8006c30:	f43f aee9 	beq.w	8006a06 <_printf_float+0xba>
 8006c34:	f104 031a 	add.w	r3, r4, #26
 8006c38:	f04f 0b00 	mov.w	fp, #0
 8006c3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c40:	9306      	str	r3, [sp, #24]
 8006c42:	e015      	b.n	8006c70 <_printf_float+0x324>
 8006c44:	7fefffff 	.word	0x7fefffff
 8006c48:	0800ceb4 	.word	0x0800ceb4
 8006c4c:	0800ceb0 	.word	0x0800ceb0
 8006c50:	0800cebc 	.word	0x0800cebc
 8006c54:	0800ceb8 	.word	0x0800ceb8
 8006c58:	0800cec0 	.word	0x0800cec0
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	9a06      	ldr	r2, [sp, #24]
 8006c60:	4631      	mov	r1, r6
 8006c62:	4628      	mov	r0, r5
 8006c64:	47b8      	blx	r7
 8006c66:	3001      	adds	r0, #1
 8006c68:	f43f aecd 	beq.w	8006a06 <_printf_float+0xba>
 8006c6c:	f10b 0b01 	add.w	fp, fp, #1
 8006c70:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006c74:	ebaa 0309 	sub.w	r3, sl, r9
 8006c78:	455b      	cmp	r3, fp
 8006c7a:	dcef      	bgt.n	8006c5c <_printf_float+0x310>
 8006c7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c80:	429a      	cmp	r2, r3
 8006c82:	44d0      	add	r8, sl
 8006c84:	db15      	blt.n	8006cb2 <_printf_float+0x366>
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	07da      	lsls	r2, r3, #31
 8006c8a:	d412      	bmi.n	8006cb2 <_printf_float+0x366>
 8006c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c90:	eba3 020a 	sub.w	r2, r3, sl
 8006c94:	eba3 0a01 	sub.w	sl, r3, r1
 8006c98:	4592      	cmp	sl, r2
 8006c9a:	bfa8      	it	ge
 8006c9c:	4692      	movge	sl, r2
 8006c9e:	f1ba 0f00 	cmp.w	sl, #0
 8006ca2:	dc0e      	bgt.n	8006cc2 <_printf_float+0x376>
 8006ca4:	f04f 0800 	mov.w	r8, #0
 8006ca8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cac:	f104 091a 	add.w	r9, r4, #26
 8006cb0:	e019      	b.n	8006ce6 <_printf_float+0x39a>
 8006cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4628      	mov	r0, r5
 8006cba:	47b8      	blx	r7
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d1e5      	bne.n	8006c8c <_printf_float+0x340>
 8006cc0:	e6a1      	b.n	8006a06 <_printf_float+0xba>
 8006cc2:	4653      	mov	r3, sl
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b8      	blx	r7
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d1e9      	bne.n	8006ca4 <_printf_float+0x358>
 8006cd0:	e699      	b.n	8006a06 <_printf_float+0xba>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	464a      	mov	r2, r9
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	47b8      	blx	r7
 8006cdc:	3001      	adds	r0, #1
 8006cde:	f43f ae92 	beq.w	8006a06 <_printf_float+0xba>
 8006ce2:	f108 0801 	add.w	r8, r8, #1
 8006ce6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cea:	1a9b      	subs	r3, r3, r2
 8006cec:	eba3 030a 	sub.w	r3, r3, sl
 8006cf0:	4543      	cmp	r3, r8
 8006cf2:	dcee      	bgt.n	8006cd2 <_printf_float+0x386>
 8006cf4:	e74a      	b.n	8006b8c <_printf_float+0x240>
 8006cf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cf8:	2a01      	cmp	r2, #1
 8006cfa:	dc01      	bgt.n	8006d00 <_printf_float+0x3b4>
 8006cfc:	07db      	lsls	r3, r3, #31
 8006cfe:	d53a      	bpl.n	8006d76 <_printf_float+0x42a>
 8006d00:	2301      	movs	r3, #1
 8006d02:	4642      	mov	r2, r8
 8006d04:	4631      	mov	r1, r6
 8006d06:	4628      	mov	r0, r5
 8006d08:	47b8      	blx	r7
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	f43f ae7b 	beq.w	8006a06 <_printf_float+0xba>
 8006d10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d14:	4631      	mov	r1, r6
 8006d16:	4628      	mov	r0, r5
 8006d18:	47b8      	blx	r7
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	f108 0801 	add.w	r8, r8, #1
 8006d20:	f43f ae71 	beq.w	8006a06 <_printf_float+0xba>
 8006d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d26:	2200      	movs	r2, #0
 8006d28:	f103 3aff 	add.w	sl, r3, #4294967295
 8006d2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d30:	2300      	movs	r3, #0
 8006d32:	f7f9 fed9 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d36:	b9c8      	cbnz	r0, 8006d6c <_printf_float+0x420>
 8006d38:	4653      	mov	r3, sl
 8006d3a:	4642      	mov	r2, r8
 8006d3c:	4631      	mov	r1, r6
 8006d3e:	4628      	mov	r0, r5
 8006d40:	47b8      	blx	r7
 8006d42:	3001      	adds	r0, #1
 8006d44:	d10e      	bne.n	8006d64 <_printf_float+0x418>
 8006d46:	e65e      	b.n	8006a06 <_printf_float+0xba>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	4652      	mov	r2, sl
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4628      	mov	r0, r5
 8006d50:	47b8      	blx	r7
 8006d52:	3001      	adds	r0, #1
 8006d54:	f43f ae57 	beq.w	8006a06 <_printf_float+0xba>
 8006d58:	f108 0801 	add.w	r8, r8, #1
 8006d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	4543      	cmp	r3, r8
 8006d62:	dcf1      	bgt.n	8006d48 <_printf_float+0x3fc>
 8006d64:	464b      	mov	r3, r9
 8006d66:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d6a:	e6de      	b.n	8006b2a <_printf_float+0x1de>
 8006d6c:	f04f 0800 	mov.w	r8, #0
 8006d70:	f104 0a1a 	add.w	sl, r4, #26
 8006d74:	e7f2      	b.n	8006d5c <_printf_float+0x410>
 8006d76:	2301      	movs	r3, #1
 8006d78:	e7df      	b.n	8006d3a <_printf_float+0x3ee>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	464a      	mov	r2, r9
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4628      	mov	r0, r5
 8006d82:	47b8      	blx	r7
 8006d84:	3001      	adds	r0, #1
 8006d86:	f43f ae3e 	beq.w	8006a06 <_printf_float+0xba>
 8006d8a:	f108 0801 	add.w	r8, r8, #1
 8006d8e:	68e3      	ldr	r3, [r4, #12]
 8006d90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d92:	1a9b      	subs	r3, r3, r2
 8006d94:	4543      	cmp	r3, r8
 8006d96:	dcf0      	bgt.n	8006d7a <_printf_float+0x42e>
 8006d98:	e6fc      	b.n	8006b94 <_printf_float+0x248>
 8006d9a:	f04f 0800 	mov.w	r8, #0
 8006d9e:	f104 0919 	add.w	r9, r4, #25
 8006da2:	e7f4      	b.n	8006d8e <_printf_float+0x442>
 8006da4:	2900      	cmp	r1, #0
 8006da6:	f43f ae8b 	beq.w	8006ac0 <_printf_float+0x174>
 8006daa:	2300      	movs	r3, #0
 8006dac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006db0:	ab09      	add	r3, sp, #36	; 0x24
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	ec49 8b10 	vmov	d0, r8, r9
 8006db8:	6022      	str	r2, [r4, #0]
 8006dba:	f8cd a004 	str.w	sl, [sp, #4]
 8006dbe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	f7ff fd2e 	bl	8006824 <__cvt>
 8006dc8:	4680      	mov	r8, r0
 8006dca:	e648      	b.n	8006a5e <_printf_float+0x112>

08006dcc <_printf_common>:
 8006dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd0:	4691      	mov	r9, r2
 8006dd2:	461f      	mov	r7, r3
 8006dd4:	688a      	ldr	r2, [r1, #8]
 8006dd6:	690b      	ldr	r3, [r1, #16]
 8006dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	bfb8      	it	lt
 8006de0:	4613      	movlt	r3, r2
 8006de2:	f8c9 3000 	str.w	r3, [r9]
 8006de6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006dea:	4606      	mov	r6, r0
 8006dec:	460c      	mov	r4, r1
 8006dee:	b112      	cbz	r2, 8006df6 <_printf_common+0x2a>
 8006df0:	3301      	adds	r3, #1
 8006df2:	f8c9 3000 	str.w	r3, [r9]
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	0699      	lsls	r1, r3, #26
 8006dfa:	bf42      	ittt	mi
 8006dfc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006e00:	3302      	addmi	r3, #2
 8006e02:	f8c9 3000 	strmi.w	r3, [r9]
 8006e06:	6825      	ldr	r5, [r4, #0]
 8006e08:	f015 0506 	ands.w	r5, r5, #6
 8006e0c:	d107      	bne.n	8006e1e <_printf_common+0x52>
 8006e0e:	f104 0a19 	add.w	sl, r4, #25
 8006e12:	68e3      	ldr	r3, [r4, #12]
 8006e14:	f8d9 2000 	ldr.w	r2, [r9]
 8006e18:	1a9b      	subs	r3, r3, r2
 8006e1a:	42ab      	cmp	r3, r5
 8006e1c:	dc28      	bgt.n	8006e70 <_printf_common+0xa4>
 8006e1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006e22:	6822      	ldr	r2, [r4, #0]
 8006e24:	3300      	adds	r3, #0
 8006e26:	bf18      	it	ne
 8006e28:	2301      	movne	r3, #1
 8006e2a:	0692      	lsls	r2, r2, #26
 8006e2c:	d42d      	bmi.n	8006e8a <_printf_common+0xbe>
 8006e2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e32:	4639      	mov	r1, r7
 8006e34:	4630      	mov	r0, r6
 8006e36:	47c0      	blx	r8
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d020      	beq.n	8006e7e <_printf_common+0xb2>
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	68e5      	ldr	r5, [r4, #12]
 8006e40:	f8d9 2000 	ldr.w	r2, [r9]
 8006e44:	f003 0306 	and.w	r3, r3, #6
 8006e48:	2b04      	cmp	r3, #4
 8006e4a:	bf08      	it	eq
 8006e4c:	1aad      	subeq	r5, r5, r2
 8006e4e:	68a3      	ldr	r3, [r4, #8]
 8006e50:	6922      	ldr	r2, [r4, #16]
 8006e52:	bf0c      	ite	eq
 8006e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e58:	2500      	movne	r5, #0
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	bfc4      	itt	gt
 8006e5e:	1a9b      	subgt	r3, r3, r2
 8006e60:	18ed      	addgt	r5, r5, r3
 8006e62:	f04f 0900 	mov.w	r9, #0
 8006e66:	341a      	adds	r4, #26
 8006e68:	454d      	cmp	r5, r9
 8006e6a:	d11a      	bne.n	8006ea2 <_printf_common+0xd6>
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	e008      	b.n	8006e82 <_printf_common+0xb6>
 8006e70:	2301      	movs	r3, #1
 8006e72:	4652      	mov	r2, sl
 8006e74:	4639      	mov	r1, r7
 8006e76:	4630      	mov	r0, r6
 8006e78:	47c0      	blx	r8
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	d103      	bne.n	8006e86 <_printf_common+0xba>
 8006e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e86:	3501      	adds	r5, #1
 8006e88:	e7c3      	b.n	8006e12 <_printf_common+0x46>
 8006e8a:	18e1      	adds	r1, r4, r3
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	2030      	movs	r0, #48	; 0x30
 8006e90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e94:	4422      	add	r2, r4
 8006e96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e9e:	3302      	adds	r3, #2
 8006ea0:	e7c5      	b.n	8006e2e <_printf_common+0x62>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	4622      	mov	r2, r4
 8006ea6:	4639      	mov	r1, r7
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	47c0      	blx	r8
 8006eac:	3001      	adds	r0, #1
 8006eae:	d0e6      	beq.n	8006e7e <_printf_common+0xb2>
 8006eb0:	f109 0901 	add.w	r9, r9, #1
 8006eb4:	e7d8      	b.n	8006e68 <_printf_common+0x9c>
	...

08006eb8 <_printf_i>:
 8006eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ebc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	7e09      	ldrb	r1, [r1, #24]
 8006ec4:	b085      	sub	sp, #20
 8006ec6:	296e      	cmp	r1, #110	; 0x6e
 8006ec8:	4617      	mov	r7, r2
 8006eca:	4606      	mov	r6, r0
 8006ecc:	4698      	mov	r8, r3
 8006ece:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ed0:	f000 80b3 	beq.w	800703a <_printf_i+0x182>
 8006ed4:	d822      	bhi.n	8006f1c <_printf_i+0x64>
 8006ed6:	2963      	cmp	r1, #99	; 0x63
 8006ed8:	d036      	beq.n	8006f48 <_printf_i+0x90>
 8006eda:	d80a      	bhi.n	8006ef2 <_printf_i+0x3a>
 8006edc:	2900      	cmp	r1, #0
 8006ede:	f000 80b9 	beq.w	8007054 <_printf_i+0x19c>
 8006ee2:	2958      	cmp	r1, #88	; 0x58
 8006ee4:	f000 8083 	beq.w	8006fee <_printf_i+0x136>
 8006ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006ef0:	e032      	b.n	8006f58 <_printf_i+0xa0>
 8006ef2:	2964      	cmp	r1, #100	; 0x64
 8006ef4:	d001      	beq.n	8006efa <_printf_i+0x42>
 8006ef6:	2969      	cmp	r1, #105	; 0x69
 8006ef8:	d1f6      	bne.n	8006ee8 <_printf_i+0x30>
 8006efa:	6820      	ldr	r0, [r4, #0]
 8006efc:	6813      	ldr	r3, [r2, #0]
 8006efe:	0605      	lsls	r5, r0, #24
 8006f00:	f103 0104 	add.w	r1, r3, #4
 8006f04:	d52a      	bpl.n	8006f5c <_printf_i+0xa4>
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6011      	str	r1, [r2, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	da03      	bge.n	8006f16 <_printf_i+0x5e>
 8006f0e:	222d      	movs	r2, #45	; 0x2d
 8006f10:	425b      	negs	r3, r3
 8006f12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006f16:	486f      	ldr	r0, [pc, #444]	; (80070d4 <_printf_i+0x21c>)
 8006f18:	220a      	movs	r2, #10
 8006f1a:	e039      	b.n	8006f90 <_printf_i+0xd8>
 8006f1c:	2973      	cmp	r1, #115	; 0x73
 8006f1e:	f000 809d 	beq.w	800705c <_printf_i+0x1a4>
 8006f22:	d808      	bhi.n	8006f36 <_printf_i+0x7e>
 8006f24:	296f      	cmp	r1, #111	; 0x6f
 8006f26:	d020      	beq.n	8006f6a <_printf_i+0xb2>
 8006f28:	2970      	cmp	r1, #112	; 0x70
 8006f2a:	d1dd      	bne.n	8006ee8 <_printf_i+0x30>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	f043 0320 	orr.w	r3, r3, #32
 8006f32:	6023      	str	r3, [r4, #0]
 8006f34:	e003      	b.n	8006f3e <_printf_i+0x86>
 8006f36:	2975      	cmp	r1, #117	; 0x75
 8006f38:	d017      	beq.n	8006f6a <_printf_i+0xb2>
 8006f3a:	2978      	cmp	r1, #120	; 0x78
 8006f3c:	d1d4      	bne.n	8006ee8 <_printf_i+0x30>
 8006f3e:	2378      	movs	r3, #120	; 0x78
 8006f40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f44:	4864      	ldr	r0, [pc, #400]	; (80070d8 <_printf_i+0x220>)
 8006f46:	e055      	b.n	8006ff4 <_printf_i+0x13c>
 8006f48:	6813      	ldr	r3, [r2, #0]
 8006f4a:	1d19      	adds	r1, r3, #4
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6011      	str	r1, [r2, #0]
 8006f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e08c      	b.n	8007076 <_printf_i+0x1be>
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6011      	str	r1, [r2, #0]
 8006f60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f64:	bf18      	it	ne
 8006f66:	b21b      	sxthne	r3, r3
 8006f68:	e7cf      	b.n	8006f0a <_printf_i+0x52>
 8006f6a:	6813      	ldr	r3, [r2, #0]
 8006f6c:	6825      	ldr	r5, [r4, #0]
 8006f6e:	1d18      	adds	r0, r3, #4
 8006f70:	6010      	str	r0, [r2, #0]
 8006f72:	0628      	lsls	r0, r5, #24
 8006f74:	d501      	bpl.n	8006f7a <_printf_i+0xc2>
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	e002      	b.n	8006f80 <_printf_i+0xc8>
 8006f7a:	0668      	lsls	r0, r5, #25
 8006f7c:	d5fb      	bpl.n	8006f76 <_printf_i+0xbe>
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	4854      	ldr	r0, [pc, #336]	; (80070d4 <_printf_i+0x21c>)
 8006f82:	296f      	cmp	r1, #111	; 0x6f
 8006f84:	bf14      	ite	ne
 8006f86:	220a      	movne	r2, #10
 8006f88:	2208      	moveq	r2, #8
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f90:	6865      	ldr	r5, [r4, #4]
 8006f92:	60a5      	str	r5, [r4, #8]
 8006f94:	2d00      	cmp	r5, #0
 8006f96:	f2c0 8095 	blt.w	80070c4 <_printf_i+0x20c>
 8006f9a:	6821      	ldr	r1, [r4, #0]
 8006f9c:	f021 0104 	bic.w	r1, r1, #4
 8006fa0:	6021      	str	r1, [r4, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d13d      	bne.n	8007022 <_printf_i+0x16a>
 8006fa6:	2d00      	cmp	r5, #0
 8006fa8:	f040 808e 	bne.w	80070c8 <_printf_i+0x210>
 8006fac:	4665      	mov	r5, ip
 8006fae:	2a08      	cmp	r2, #8
 8006fb0:	d10b      	bne.n	8006fca <_printf_i+0x112>
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	07db      	lsls	r3, r3, #31
 8006fb6:	d508      	bpl.n	8006fca <_printf_i+0x112>
 8006fb8:	6923      	ldr	r3, [r4, #16]
 8006fba:	6862      	ldr	r2, [r4, #4]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	bfde      	ittt	le
 8006fc0:	2330      	movle	r3, #48	; 0x30
 8006fc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fca:	ebac 0305 	sub.w	r3, ip, r5
 8006fce:	6123      	str	r3, [r4, #16]
 8006fd0:	f8cd 8000 	str.w	r8, [sp]
 8006fd4:	463b      	mov	r3, r7
 8006fd6:	aa03      	add	r2, sp, #12
 8006fd8:	4621      	mov	r1, r4
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f7ff fef6 	bl	8006dcc <_printf_common>
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	d14d      	bne.n	8007080 <_printf_i+0x1c8>
 8006fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe8:	b005      	add	sp, #20
 8006fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fee:	4839      	ldr	r0, [pc, #228]	; (80070d4 <_printf_i+0x21c>)
 8006ff0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006ff4:	6813      	ldr	r3, [r2, #0]
 8006ff6:	6821      	ldr	r1, [r4, #0]
 8006ff8:	1d1d      	adds	r5, r3, #4
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6015      	str	r5, [r2, #0]
 8006ffe:	060a      	lsls	r2, r1, #24
 8007000:	d50b      	bpl.n	800701a <_printf_i+0x162>
 8007002:	07ca      	lsls	r2, r1, #31
 8007004:	bf44      	itt	mi
 8007006:	f041 0120 	orrmi.w	r1, r1, #32
 800700a:	6021      	strmi	r1, [r4, #0]
 800700c:	b91b      	cbnz	r3, 8007016 <_printf_i+0x15e>
 800700e:	6822      	ldr	r2, [r4, #0]
 8007010:	f022 0220 	bic.w	r2, r2, #32
 8007014:	6022      	str	r2, [r4, #0]
 8007016:	2210      	movs	r2, #16
 8007018:	e7b7      	b.n	8006f8a <_printf_i+0xd2>
 800701a:	064d      	lsls	r5, r1, #25
 800701c:	bf48      	it	mi
 800701e:	b29b      	uxthmi	r3, r3
 8007020:	e7ef      	b.n	8007002 <_printf_i+0x14a>
 8007022:	4665      	mov	r5, ip
 8007024:	fbb3 f1f2 	udiv	r1, r3, r2
 8007028:	fb02 3311 	mls	r3, r2, r1, r3
 800702c:	5cc3      	ldrb	r3, [r0, r3]
 800702e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007032:	460b      	mov	r3, r1
 8007034:	2900      	cmp	r1, #0
 8007036:	d1f5      	bne.n	8007024 <_printf_i+0x16c>
 8007038:	e7b9      	b.n	8006fae <_printf_i+0xf6>
 800703a:	6813      	ldr	r3, [r2, #0]
 800703c:	6825      	ldr	r5, [r4, #0]
 800703e:	6961      	ldr	r1, [r4, #20]
 8007040:	1d18      	adds	r0, r3, #4
 8007042:	6010      	str	r0, [r2, #0]
 8007044:	0628      	lsls	r0, r5, #24
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	d501      	bpl.n	800704e <_printf_i+0x196>
 800704a:	6019      	str	r1, [r3, #0]
 800704c:	e002      	b.n	8007054 <_printf_i+0x19c>
 800704e:	066a      	lsls	r2, r5, #25
 8007050:	d5fb      	bpl.n	800704a <_printf_i+0x192>
 8007052:	8019      	strh	r1, [r3, #0]
 8007054:	2300      	movs	r3, #0
 8007056:	6123      	str	r3, [r4, #16]
 8007058:	4665      	mov	r5, ip
 800705a:	e7b9      	b.n	8006fd0 <_printf_i+0x118>
 800705c:	6813      	ldr	r3, [r2, #0]
 800705e:	1d19      	adds	r1, r3, #4
 8007060:	6011      	str	r1, [r2, #0]
 8007062:	681d      	ldr	r5, [r3, #0]
 8007064:	6862      	ldr	r2, [r4, #4]
 8007066:	2100      	movs	r1, #0
 8007068:	4628      	mov	r0, r5
 800706a:	f7f9 f8c9 	bl	8000200 <memchr>
 800706e:	b108      	cbz	r0, 8007074 <_printf_i+0x1bc>
 8007070:	1b40      	subs	r0, r0, r5
 8007072:	6060      	str	r0, [r4, #4]
 8007074:	6863      	ldr	r3, [r4, #4]
 8007076:	6123      	str	r3, [r4, #16]
 8007078:	2300      	movs	r3, #0
 800707a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800707e:	e7a7      	b.n	8006fd0 <_printf_i+0x118>
 8007080:	6923      	ldr	r3, [r4, #16]
 8007082:	462a      	mov	r2, r5
 8007084:	4639      	mov	r1, r7
 8007086:	4630      	mov	r0, r6
 8007088:	47c0      	blx	r8
 800708a:	3001      	adds	r0, #1
 800708c:	d0aa      	beq.n	8006fe4 <_printf_i+0x12c>
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	079b      	lsls	r3, r3, #30
 8007092:	d413      	bmi.n	80070bc <_printf_i+0x204>
 8007094:	68e0      	ldr	r0, [r4, #12]
 8007096:	9b03      	ldr	r3, [sp, #12]
 8007098:	4298      	cmp	r0, r3
 800709a:	bfb8      	it	lt
 800709c:	4618      	movlt	r0, r3
 800709e:	e7a3      	b.n	8006fe8 <_printf_i+0x130>
 80070a0:	2301      	movs	r3, #1
 80070a2:	464a      	mov	r2, r9
 80070a4:	4639      	mov	r1, r7
 80070a6:	4630      	mov	r0, r6
 80070a8:	47c0      	blx	r8
 80070aa:	3001      	adds	r0, #1
 80070ac:	d09a      	beq.n	8006fe4 <_printf_i+0x12c>
 80070ae:	3501      	adds	r5, #1
 80070b0:	68e3      	ldr	r3, [r4, #12]
 80070b2:	9a03      	ldr	r2, [sp, #12]
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	42ab      	cmp	r3, r5
 80070b8:	dcf2      	bgt.n	80070a0 <_printf_i+0x1e8>
 80070ba:	e7eb      	b.n	8007094 <_printf_i+0x1dc>
 80070bc:	2500      	movs	r5, #0
 80070be:	f104 0919 	add.w	r9, r4, #25
 80070c2:	e7f5      	b.n	80070b0 <_printf_i+0x1f8>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1ac      	bne.n	8007022 <_printf_i+0x16a>
 80070c8:	7803      	ldrb	r3, [r0, #0]
 80070ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070d2:	e76c      	b.n	8006fae <_printf_i+0xf6>
 80070d4:	0800cec2 	.word	0x0800cec2
 80070d8:	0800ced3 	.word	0x0800ced3

080070dc <_scanf_float>:
 80070dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e0:	469a      	mov	sl, r3
 80070e2:	688b      	ldr	r3, [r1, #8]
 80070e4:	4616      	mov	r6, r2
 80070e6:	1e5a      	subs	r2, r3, #1
 80070e8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80070ec:	b087      	sub	sp, #28
 80070ee:	bf83      	ittte	hi
 80070f0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80070f4:	189b      	addhi	r3, r3, r2
 80070f6:	9301      	strhi	r3, [sp, #4]
 80070f8:	2300      	movls	r3, #0
 80070fa:	bf86      	itte	hi
 80070fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007100:	608b      	strhi	r3, [r1, #8]
 8007102:	9301      	strls	r3, [sp, #4]
 8007104:	680b      	ldr	r3, [r1, #0]
 8007106:	4688      	mov	r8, r1
 8007108:	f04f 0b00 	mov.w	fp, #0
 800710c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007110:	f848 3b1c 	str.w	r3, [r8], #28
 8007114:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007118:	4607      	mov	r7, r0
 800711a:	460c      	mov	r4, r1
 800711c:	4645      	mov	r5, r8
 800711e:	465a      	mov	r2, fp
 8007120:	46d9      	mov	r9, fp
 8007122:	f8cd b008 	str.w	fp, [sp, #8]
 8007126:	68a1      	ldr	r1, [r4, #8]
 8007128:	b181      	cbz	r1, 800714c <_scanf_float+0x70>
 800712a:	6833      	ldr	r3, [r6, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	2b49      	cmp	r3, #73	; 0x49
 8007130:	d071      	beq.n	8007216 <_scanf_float+0x13a>
 8007132:	d84d      	bhi.n	80071d0 <_scanf_float+0xf4>
 8007134:	2b39      	cmp	r3, #57	; 0x39
 8007136:	d840      	bhi.n	80071ba <_scanf_float+0xde>
 8007138:	2b31      	cmp	r3, #49	; 0x31
 800713a:	f080 8088 	bcs.w	800724e <_scanf_float+0x172>
 800713e:	2b2d      	cmp	r3, #45	; 0x2d
 8007140:	f000 8090 	beq.w	8007264 <_scanf_float+0x188>
 8007144:	d815      	bhi.n	8007172 <_scanf_float+0x96>
 8007146:	2b2b      	cmp	r3, #43	; 0x2b
 8007148:	f000 808c 	beq.w	8007264 <_scanf_float+0x188>
 800714c:	f1b9 0f00 	cmp.w	r9, #0
 8007150:	d003      	beq.n	800715a <_scanf_float+0x7e>
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	3a01      	subs	r2, #1
 800715c:	2a01      	cmp	r2, #1
 800715e:	f200 80ea 	bhi.w	8007336 <_scanf_float+0x25a>
 8007162:	4545      	cmp	r5, r8
 8007164:	f200 80dc 	bhi.w	8007320 <_scanf_float+0x244>
 8007168:	2601      	movs	r6, #1
 800716a:	4630      	mov	r0, r6
 800716c:	b007      	add	sp, #28
 800716e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007172:	2b2e      	cmp	r3, #46	; 0x2e
 8007174:	f000 809f 	beq.w	80072b6 <_scanf_float+0x1da>
 8007178:	2b30      	cmp	r3, #48	; 0x30
 800717a:	d1e7      	bne.n	800714c <_scanf_float+0x70>
 800717c:	6820      	ldr	r0, [r4, #0]
 800717e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007182:	d064      	beq.n	800724e <_scanf_float+0x172>
 8007184:	9b01      	ldr	r3, [sp, #4]
 8007186:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800718a:	6020      	str	r0, [r4, #0]
 800718c:	f109 0901 	add.w	r9, r9, #1
 8007190:	b11b      	cbz	r3, 800719a <_scanf_float+0xbe>
 8007192:	3b01      	subs	r3, #1
 8007194:	3101      	adds	r1, #1
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	60a1      	str	r1, [r4, #8]
 800719a:	68a3      	ldr	r3, [r4, #8]
 800719c:	3b01      	subs	r3, #1
 800719e:	60a3      	str	r3, [r4, #8]
 80071a0:	6923      	ldr	r3, [r4, #16]
 80071a2:	3301      	adds	r3, #1
 80071a4:	6123      	str	r3, [r4, #16]
 80071a6:	6873      	ldr	r3, [r6, #4]
 80071a8:	3b01      	subs	r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	6073      	str	r3, [r6, #4]
 80071ae:	f340 80ac 	ble.w	800730a <_scanf_float+0x22e>
 80071b2:	6833      	ldr	r3, [r6, #0]
 80071b4:	3301      	adds	r3, #1
 80071b6:	6033      	str	r3, [r6, #0]
 80071b8:	e7b5      	b.n	8007126 <_scanf_float+0x4a>
 80071ba:	2b45      	cmp	r3, #69	; 0x45
 80071bc:	f000 8085 	beq.w	80072ca <_scanf_float+0x1ee>
 80071c0:	2b46      	cmp	r3, #70	; 0x46
 80071c2:	d06a      	beq.n	800729a <_scanf_float+0x1be>
 80071c4:	2b41      	cmp	r3, #65	; 0x41
 80071c6:	d1c1      	bne.n	800714c <_scanf_float+0x70>
 80071c8:	2a01      	cmp	r2, #1
 80071ca:	d1bf      	bne.n	800714c <_scanf_float+0x70>
 80071cc:	2202      	movs	r2, #2
 80071ce:	e046      	b.n	800725e <_scanf_float+0x182>
 80071d0:	2b65      	cmp	r3, #101	; 0x65
 80071d2:	d07a      	beq.n	80072ca <_scanf_float+0x1ee>
 80071d4:	d818      	bhi.n	8007208 <_scanf_float+0x12c>
 80071d6:	2b54      	cmp	r3, #84	; 0x54
 80071d8:	d066      	beq.n	80072a8 <_scanf_float+0x1cc>
 80071da:	d811      	bhi.n	8007200 <_scanf_float+0x124>
 80071dc:	2b4e      	cmp	r3, #78	; 0x4e
 80071de:	d1b5      	bne.n	800714c <_scanf_float+0x70>
 80071e0:	2a00      	cmp	r2, #0
 80071e2:	d146      	bne.n	8007272 <_scanf_float+0x196>
 80071e4:	f1b9 0f00 	cmp.w	r9, #0
 80071e8:	d145      	bne.n	8007276 <_scanf_float+0x19a>
 80071ea:	6821      	ldr	r1, [r4, #0]
 80071ec:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80071f0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80071f4:	d13f      	bne.n	8007276 <_scanf_float+0x19a>
 80071f6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80071fa:	6021      	str	r1, [r4, #0]
 80071fc:	2201      	movs	r2, #1
 80071fe:	e02e      	b.n	800725e <_scanf_float+0x182>
 8007200:	2b59      	cmp	r3, #89	; 0x59
 8007202:	d01e      	beq.n	8007242 <_scanf_float+0x166>
 8007204:	2b61      	cmp	r3, #97	; 0x61
 8007206:	e7de      	b.n	80071c6 <_scanf_float+0xea>
 8007208:	2b6e      	cmp	r3, #110	; 0x6e
 800720a:	d0e9      	beq.n	80071e0 <_scanf_float+0x104>
 800720c:	d815      	bhi.n	800723a <_scanf_float+0x15e>
 800720e:	2b66      	cmp	r3, #102	; 0x66
 8007210:	d043      	beq.n	800729a <_scanf_float+0x1be>
 8007212:	2b69      	cmp	r3, #105	; 0x69
 8007214:	d19a      	bne.n	800714c <_scanf_float+0x70>
 8007216:	f1bb 0f00 	cmp.w	fp, #0
 800721a:	d138      	bne.n	800728e <_scanf_float+0x1b2>
 800721c:	f1b9 0f00 	cmp.w	r9, #0
 8007220:	d197      	bne.n	8007152 <_scanf_float+0x76>
 8007222:	6821      	ldr	r1, [r4, #0]
 8007224:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007228:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800722c:	d195      	bne.n	800715a <_scanf_float+0x7e>
 800722e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007232:	6021      	str	r1, [r4, #0]
 8007234:	f04f 0b01 	mov.w	fp, #1
 8007238:	e011      	b.n	800725e <_scanf_float+0x182>
 800723a:	2b74      	cmp	r3, #116	; 0x74
 800723c:	d034      	beq.n	80072a8 <_scanf_float+0x1cc>
 800723e:	2b79      	cmp	r3, #121	; 0x79
 8007240:	d184      	bne.n	800714c <_scanf_float+0x70>
 8007242:	f1bb 0f07 	cmp.w	fp, #7
 8007246:	d181      	bne.n	800714c <_scanf_float+0x70>
 8007248:	f04f 0b08 	mov.w	fp, #8
 800724c:	e007      	b.n	800725e <_scanf_float+0x182>
 800724e:	eb12 0f0b 	cmn.w	r2, fp
 8007252:	f47f af7b 	bne.w	800714c <_scanf_float+0x70>
 8007256:	6821      	ldr	r1, [r4, #0]
 8007258:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800725c:	6021      	str	r1, [r4, #0]
 800725e:	702b      	strb	r3, [r5, #0]
 8007260:	3501      	adds	r5, #1
 8007262:	e79a      	b.n	800719a <_scanf_float+0xbe>
 8007264:	6821      	ldr	r1, [r4, #0]
 8007266:	0608      	lsls	r0, r1, #24
 8007268:	f57f af70 	bpl.w	800714c <_scanf_float+0x70>
 800726c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007270:	e7f4      	b.n	800725c <_scanf_float+0x180>
 8007272:	2a02      	cmp	r2, #2
 8007274:	d047      	beq.n	8007306 <_scanf_float+0x22a>
 8007276:	f1bb 0f01 	cmp.w	fp, #1
 800727a:	d003      	beq.n	8007284 <_scanf_float+0x1a8>
 800727c:	f1bb 0f04 	cmp.w	fp, #4
 8007280:	f47f af64 	bne.w	800714c <_scanf_float+0x70>
 8007284:	f10b 0b01 	add.w	fp, fp, #1
 8007288:	fa5f fb8b 	uxtb.w	fp, fp
 800728c:	e7e7      	b.n	800725e <_scanf_float+0x182>
 800728e:	f1bb 0f03 	cmp.w	fp, #3
 8007292:	d0f7      	beq.n	8007284 <_scanf_float+0x1a8>
 8007294:	f1bb 0f05 	cmp.w	fp, #5
 8007298:	e7f2      	b.n	8007280 <_scanf_float+0x1a4>
 800729a:	f1bb 0f02 	cmp.w	fp, #2
 800729e:	f47f af55 	bne.w	800714c <_scanf_float+0x70>
 80072a2:	f04f 0b03 	mov.w	fp, #3
 80072a6:	e7da      	b.n	800725e <_scanf_float+0x182>
 80072a8:	f1bb 0f06 	cmp.w	fp, #6
 80072ac:	f47f af4e 	bne.w	800714c <_scanf_float+0x70>
 80072b0:	f04f 0b07 	mov.w	fp, #7
 80072b4:	e7d3      	b.n	800725e <_scanf_float+0x182>
 80072b6:	6821      	ldr	r1, [r4, #0]
 80072b8:	0588      	lsls	r0, r1, #22
 80072ba:	f57f af47 	bpl.w	800714c <_scanf_float+0x70>
 80072be:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80072c2:	6021      	str	r1, [r4, #0]
 80072c4:	f8cd 9008 	str.w	r9, [sp, #8]
 80072c8:	e7c9      	b.n	800725e <_scanf_float+0x182>
 80072ca:	6821      	ldr	r1, [r4, #0]
 80072cc:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80072d0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80072d4:	d006      	beq.n	80072e4 <_scanf_float+0x208>
 80072d6:	0548      	lsls	r0, r1, #21
 80072d8:	f57f af38 	bpl.w	800714c <_scanf_float+0x70>
 80072dc:	f1b9 0f00 	cmp.w	r9, #0
 80072e0:	f43f af3b 	beq.w	800715a <_scanf_float+0x7e>
 80072e4:	0588      	lsls	r0, r1, #22
 80072e6:	bf58      	it	pl
 80072e8:	9802      	ldrpl	r0, [sp, #8]
 80072ea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80072ee:	bf58      	it	pl
 80072f0:	eba9 0000 	subpl.w	r0, r9, r0
 80072f4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80072f8:	bf58      	it	pl
 80072fa:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80072fe:	6021      	str	r1, [r4, #0]
 8007300:	f04f 0900 	mov.w	r9, #0
 8007304:	e7ab      	b.n	800725e <_scanf_float+0x182>
 8007306:	2203      	movs	r2, #3
 8007308:	e7a9      	b.n	800725e <_scanf_float+0x182>
 800730a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800730e:	9205      	str	r2, [sp, #20]
 8007310:	4631      	mov	r1, r6
 8007312:	4638      	mov	r0, r7
 8007314:	4798      	blx	r3
 8007316:	9a05      	ldr	r2, [sp, #20]
 8007318:	2800      	cmp	r0, #0
 800731a:	f43f af04 	beq.w	8007126 <_scanf_float+0x4a>
 800731e:	e715      	b.n	800714c <_scanf_float+0x70>
 8007320:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007324:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007328:	4632      	mov	r2, r6
 800732a:	4638      	mov	r0, r7
 800732c:	4798      	blx	r3
 800732e:	6923      	ldr	r3, [r4, #16]
 8007330:	3b01      	subs	r3, #1
 8007332:	6123      	str	r3, [r4, #16]
 8007334:	e715      	b.n	8007162 <_scanf_float+0x86>
 8007336:	f10b 33ff 	add.w	r3, fp, #4294967295
 800733a:	2b06      	cmp	r3, #6
 800733c:	d80a      	bhi.n	8007354 <_scanf_float+0x278>
 800733e:	f1bb 0f02 	cmp.w	fp, #2
 8007342:	d968      	bls.n	8007416 <_scanf_float+0x33a>
 8007344:	f1ab 0b03 	sub.w	fp, fp, #3
 8007348:	fa5f fb8b 	uxtb.w	fp, fp
 800734c:	eba5 0b0b 	sub.w	fp, r5, fp
 8007350:	455d      	cmp	r5, fp
 8007352:	d14b      	bne.n	80073ec <_scanf_float+0x310>
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	05da      	lsls	r2, r3, #23
 8007358:	d51f      	bpl.n	800739a <_scanf_float+0x2be>
 800735a:	055b      	lsls	r3, r3, #21
 800735c:	d468      	bmi.n	8007430 <_scanf_float+0x354>
 800735e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007362:	6923      	ldr	r3, [r4, #16]
 8007364:	2965      	cmp	r1, #101	; 0x65
 8007366:	f103 33ff 	add.w	r3, r3, #4294967295
 800736a:	f105 3bff 	add.w	fp, r5, #4294967295
 800736e:	6123      	str	r3, [r4, #16]
 8007370:	d00d      	beq.n	800738e <_scanf_float+0x2b2>
 8007372:	2945      	cmp	r1, #69	; 0x45
 8007374:	d00b      	beq.n	800738e <_scanf_float+0x2b2>
 8007376:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800737a:	4632      	mov	r2, r6
 800737c:	4638      	mov	r0, r7
 800737e:	4798      	blx	r3
 8007380:	6923      	ldr	r3, [r4, #16]
 8007382:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007386:	3b01      	subs	r3, #1
 8007388:	f1a5 0b02 	sub.w	fp, r5, #2
 800738c:	6123      	str	r3, [r4, #16]
 800738e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007392:	4632      	mov	r2, r6
 8007394:	4638      	mov	r0, r7
 8007396:	4798      	blx	r3
 8007398:	465d      	mov	r5, fp
 800739a:	6826      	ldr	r6, [r4, #0]
 800739c:	f016 0610 	ands.w	r6, r6, #16
 80073a0:	d17a      	bne.n	8007498 <_scanf_float+0x3bc>
 80073a2:	702e      	strb	r6, [r5, #0]
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80073aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ae:	d142      	bne.n	8007436 <_scanf_float+0x35a>
 80073b0:	9b02      	ldr	r3, [sp, #8]
 80073b2:	eba9 0303 	sub.w	r3, r9, r3
 80073b6:	425a      	negs	r2, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d149      	bne.n	8007450 <_scanf_float+0x374>
 80073bc:	2200      	movs	r2, #0
 80073be:	4641      	mov	r1, r8
 80073c0:	4638      	mov	r0, r7
 80073c2:	f000 fea5 	bl	8008110 <_strtod_r>
 80073c6:	6825      	ldr	r5, [r4, #0]
 80073c8:	f8da 3000 	ldr.w	r3, [sl]
 80073cc:	f015 0f02 	tst.w	r5, #2
 80073d0:	f103 0204 	add.w	r2, r3, #4
 80073d4:	ec59 8b10 	vmov	r8, r9, d0
 80073d8:	f8ca 2000 	str.w	r2, [sl]
 80073dc:	d043      	beq.n	8007466 <_scanf_float+0x38a>
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	e9c3 8900 	strd	r8, r9, [r3]
 80073e4:	68e3      	ldr	r3, [r4, #12]
 80073e6:	3301      	adds	r3, #1
 80073e8:	60e3      	str	r3, [r4, #12]
 80073ea:	e6be      	b.n	800716a <_scanf_float+0x8e>
 80073ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80073f4:	4632      	mov	r2, r6
 80073f6:	4638      	mov	r0, r7
 80073f8:	4798      	blx	r3
 80073fa:	6923      	ldr	r3, [r4, #16]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	6123      	str	r3, [r4, #16]
 8007400:	e7a6      	b.n	8007350 <_scanf_float+0x274>
 8007402:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007406:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800740a:	4632      	mov	r2, r6
 800740c:	4638      	mov	r0, r7
 800740e:	4798      	blx	r3
 8007410:	6923      	ldr	r3, [r4, #16]
 8007412:	3b01      	subs	r3, #1
 8007414:	6123      	str	r3, [r4, #16]
 8007416:	4545      	cmp	r5, r8
 8007418:	d8f3      	bhi.n	8007402 <_scanf_float+0x326>
 800741a:	e6a5      	b.n	8007168 <_scanf_float+0x8c>
 800741c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007420:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007424:	4632      	mov	r2, r6
 8007426:	4638      	mov	r0, r7
 8007428:	4798      	blx	r3
 800742a:	6923      	ldr	r3, [r4, #16]
 800742c:	3b01      	subs	r3, #1
 800742e:	6123      	str	r3, [r4, #16]
 8007430:	4545      	cmp	r5, r8
 8007432:	d8f3      	bhi.n	800741c <_scanf_float+0x340>
 8007434:	e698      	b.n	8007168 <_scanf_float+0x8c>
 8007436:	9b03      	ldr	r3, [sp, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0bf      	beq.n	80073bc <_scanf_float+0x2e0>
 800743c:	9904      	ldr	r1, [sp, #16]
 800743e:	230a      	movs	r3, #10
 8007440:	4632      	mov	r2, r6
 8007442:	3101      	adds	r1, #1
 8007444:	4638      	mov	r0, r7
 8007446:	f000 feef 	bl	8008228 <_strtol_r>
 800744a:	9b03      	ldr	r3, [sp, #12]
 800744c:	9d04      	ldr	r5, [sp, #16]
 800744e:	1ac2      	subs	r2, r0, r3
 8007450:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007454:	429d      	cmp	r5, r3
 8007456:	bf28      	it	cs
 8007458:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800745c:	490f      	ldr	r1, [pc, #60]	; (800749c <_scanf_float+0x3c0>)
 800745e:	4628      	mov	r0, r5
 8007460:	f000 f824 	bl	80074ac <siprintf>
 8007464:	e7aa      	b.n	80073bc <_scanf_float+0x2e0>
 8007466:	f015 0504 	ands.w	r5, r5, #4
 800746a:	d1b8      	bne.n	80073de <_scanf_float+0x302>
 800746c:	681f      	ldr	r7, [r3, #0]
 800746e:	ee10 2a10 	vmov	r2, s0
 8007472:	464b      	mov	r3, r9
 8007474:	ee10 0a10 	vmov	r0, s0
 8007478:	4649      	mov	r1, r9
 800747a:	f7f9 fb67 	bl	8000b4c <__aeabi_dcmpun>
 800747e:	b128      	cbz	r0, 800748c <_scanf_float+0x3b0>
 8007480:	4628      	mov	r0, r5
 8007482:	f000 f80d 	bl	80074a0 <nanf>
 8007486:	ed87 0a00 	vstr	s0, [r7]
 800748a:	e7ab      	b.n	80073e4 <_scanf_float+0x308>
 800748c:	4640      	mov	r0, r8
 800748e:	4649      	mov	r1, r9
 8007490:	f7f9 fbba 	bl	8000c08 <__aeabi_d2f>
 8007494:	6038      	str	r0, [r7, #0]
 8007496:	e7a5      	b.n	80073e4 <_scanf_float+0x308>
 8007498:	2600      	movs	r6, #0
 800749a:	e666      	b.n	800716a <_scanf_float+0x8e>
 800749c:	0800cee4 	.word	0x0800cee4

080074a0 <nanf>:
 80074a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80074a8 <nanf+0x8>
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	7fc00000 	.word	0x7fc00000

080074ac <siprintf>:
 80074ac:	b40e      	push	{r1, r2, r3}
 80074ae:	b500      	push	{lr}
 80074b0:	b09c      	sub	sp, #112	; 0x70
 80074b2:	ab1d      	add	r3, sp, #116	; 0x74
 80074b4:	9002      	str	r0, [sp, #8]
 80074b6:	9006      	str	r0, [sp, #24]
 80074b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074bc:	4809      	ldr	r0, [pc, #36]	; (80074e4 <siprintf+0x38>)
 80074be:	9107      	str	r1, [sp, #28]
 80074c0:	9104      	str	r1, [sp, #16]
 80074c2:	4909      	ldr	r1, [pc, #36]	; (80074e8 <siprintf+0x3c>)
 80074c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074c8:	9105      	str	r1, [sp, #20]
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	a902      	add	r1, sp, #8
 80074d0:	f002 fd70 	bl	8009fb4 <_svfiprintf_r>
 80074d4:	9b02      	ldr	r3, [sp, #8]
 80074d6:	2200      	movs	r2, #0
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	b01c      	add	sp, #112	; 0x70
 80074dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80074e0:	b003      	add	sp, #12
 80074e2:	4770      	bx	lr
 80074e4:	20000150 	.word	0x20000150
 80074e8:	ffff0208 	.word	0xffff0208

080074ec <sulp>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	4604      	mov	r4, r0
 80074f0:	460d      	mov	r5, r1
 80074f2:	ec45 4b10 	vmov	d0, r4, r5
 80074f6:	4616      	mov	r6, r2
 80074f8:	f002 fb18 	bl	8009b2c <__ulp>
 80074fc:	ec51 0b10 	vmov	r0, r1, d0
 8007500:	b17e      	cbz	r6, 8007522 <sulp+0x36>
 8007502:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007506:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800750a:	2b00      	cmp	r3, #0
 800750c:	dd09      	ble.n	8007522 <sulp+0x36>
 800750e:	051b      	lsls	r3, r3, #20
 8007510:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007514:	2400      	movs	r4, #0
 8007516:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800751a:	4622      	mov	r2, r4
 800751c:	462b      	mov	r3, r5
 800751e:	f7f9 f87b 	bl	8000618 <__aeabi_dmul>
 8007522:	bd70      	pop	{r4, r5, r6, pc}
 8007524:	0000      	movs	r0, r0
	...

08007528 <_strtod_l>:
 8007528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752c:	461f      	mov	r7, r3
 800752e:	b0a1      	sub	sp, #132	; 0x84
 8007530:	2300      	movs	r3, #0
 8007532:	4681      	mov	r9, r0
 8007534:	4638      	mov	r0, r7
 8007536:	460e      	mov	r6, r1
 8007538:	9217      	str	r2, [sp, #92]	; 0x5c
 800753a:	931c      	str	r3, [sp, #112]	; 0x70
 800753c:	f001 fff5 	bl	800952a <__localeconv_l>
 8007540:	4680      	mov	r8, r0
 8007542:	6800      	ldr	r0, [r0, #0]
 8007544:	f7f8 fe54 	bl	80001f0 <strlen>
 8007548:	f04f 0a00 	mov.w	sl, #0
 800754c:	4604      	mov	r4, r0
 800754e:	f04f 0b00 	mov.w	fp, #0
 8007552:	961b      	str	r6, [sp, #108]	; 0x6c
 8007554:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007556:	781a      	ldrb	r2, [r3, #0]
 8007558:	2a0d      	cmp	r2, #13
 800755a:	d832      	bhi.n	80075c2 <_strtod_l+0x9a>
 800755c:	2a09      	cmp	r2, #9
 800755e:	d236      	bcs.n	80075ce <_strtod_l+0xa6>
 8007560:	2a00      	cmp	r2, #0
 8007562:	d03e      	beq.n	80075e2 <_strtod_l+0xba>
 8007564:	2300      	movs	r3, #0
 8007566:	930d      	str	r3, [sp, #52]	; 0x34
 8007568:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800756a:	782b      	ldrb	r3, [r5, #0]
 800756c:	2b30      	cmp	r3, #48	; 0x30
 800756e:	f040 80ac 	bne.w	80076ca <_strtod_l+0x1a2>
 8007572:	786b      	ldrb	r3, [r5, #1]
 8007574:	2b58      	cmp	r3, #88	; 0x58
 8007576:	d001      	beq.n	800757c <_strtod_l+0x54>
 8007578:	2b78      	cmp	r3, #120	; 0x78
 800757a:	d167      	bne.n	800764c <_strtod_l+0x124>
 800757c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800757e:	9301      	str	r3, [sp, #4]
 8007580:	ab1c      	add	r3, sp, #112	; 0x70
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	9702      	str	r7, [sp, #8]
 8007586:	ab1d      	add	r3, sp, #116	; 0x74
 8007588:	4a88      	ldr	r2, [pc, #544]	; (80077ac <_strtod_l+0x284>)
 800758a:	a91b      	add	r1, sp, #108	; 0x6c
 800758c:	4648      	mov	r0, r9
 800758e:	f001 fcf2 	bl	8008f76 <__gethex>
 8007592:	f010 0407 	ands.w	r4, r0, #7
 8007596:	4606      	mov	r6, r0
 8007598:	d005      	beq.n	80075a6 <_strtod_l+0x7e>
 800759a:	2c06      	cmp	r4, #6
 800759c:	d12b      	bne.n	80075f6 <_strtod_l+0xce>
 800759e:	3501      	adds	r5, #1
 80075a0:	2300      	movs	r3, #0
 80075a2:	951b      	str	r5, [sp, #108]	; 0x6c
 80075a4:	930d      	str	r3, [sp, #52]	; 0x34
 80075a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f040 859a 	bne.w	80080e2 <_strtod_l+0xbba>
 80075ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b0:	b1e3      	cbz	r3, 80075ec <_strtod_l+0xc4>
 80075b2:	4652      	mov	r2, sl
 80075b4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80075b8:	ec43 2b10 	vmov	d0, r2, r3
 80075bc:	b021      	add	sp, #132	; 0x84
 80075be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c2:	2a2b      	cmp	r2, #43	; 0x2b
 80075c4:	d015      	beq.n	80075f2 <_strtod_l+0xca>
 80075c6:	2a2d      	cmp	r2, #45	; 0x2d
 80075c8:	d004      	beq.n	80075d4 <_strtod_l+0xac>
 80075ca:	2a20      	cmp	r2, #32
 80075cc:	d1ca      	bne.n	8007564 <_strtod_l+0x3c>
 80075ce:	3301      	adds	r3, #1
 80075d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80075d2:	e7bf      	b.n	8007554 <_strtod_l+0x2c>
 80075d4:	2201      	movs	r2, #1
 80075d6:	920d      	str	r2, [sp, #52]	; 0x34
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	921b      	str	r2, [sp, #108]	; 0x6c
 80075dc:	785b      	ldrb	r3, [r3, #1]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1c2      	bne.n	8007568 <_strtod_l+0x40>
 80075e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075e4:	961b      	str	r6, [sp, #108]	; 0x6c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f040 8579 	bne.w	80080de <_strtod_l+0xbb6>
 80075ec:	4652      	mov	r2, sl
 80075ee:	465b      	mov	r3, fp
 80075f0:	e7e2      	b.n	80075b8 <_strtod_l+0x90>
 80075f2:	2200      	movs	r2, #0
 80075f4:	e7ef      	b.n	80075d6 <_strtod_l+0xae>
 80075f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80075f8:	b13a      	cbz	r2, 800760a <_strtod_l+0xe2>
 80075fa:	2135      	movs	r1, #53	; 0x35
 80075fc:	a81e      	add	r0, sp, #120	; 0x78
 80075fe:	f002 fb8d 	bl	8009d1c <__copybits>
 8007602:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007604:	4648      	mov	r0, r9
 8007606:	f001 fffa 	bl	80095fe <_Bfree>
 800760a:	3c01      	subs	r4, #1
 800760c:	2c04      	cmp	r4, #4
 800760e:	d806      	bhi.n	800761e <_strtod_l+0xf6>
 8007610:	e8df f004 	tbb	[pc, r4]
 8007614:	1714030a 	.word	0x1714030a
 8007618:	0a          	.byte	0x0a
 8007619:	00          	.byte	0x00
 800761a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800761e:	0730      	lsls	r0, r6, #28
 8007620:	d5c1      	bpl.n	80075a6 <_strtod_l+0x7e>
 8007622:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007626:	e7be      	b.n	80075a6 <_strtod_l+0x7e>
 8007628:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800762c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800762e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007632:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007636:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800763a:	e7f0      	b.n	800761e <_strtod_l+0xf6>
 800763c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80077b0 <_strtod_l+0x288>
 8007640:	e7ed      	b.n	800761e <_strtod_l+0xf6>
 8007642:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007646:	f04f 3aff 	mov.w	sl, #4294967295
 800764a:	e7e8      	b.n	800761e <_strtod_l+0xf6>
 800764c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	921b      	str	r2, [sp, #108]	; 0x6c
 8007652:	785b      	ldrb	r3, [r3, #1]
 8007654:	2b30      	cmp	r3, #48	; 0x30
 8007656:	d0f9      	beq.n	800764c <_strtod_l+0x124>
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0a4      	beq.n	80075a6 <_strtod_l+0x7e>
 800765c:	2301      	movs	r3, #1
 800765e:	2500      	movs	r5, #0
 8007660:	9306      	str	r3, [sp, #24]
 8007662:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007664:	9308      	str	r3, [sp, #32]
 8007666:	9507      	str	r5, [sp, #28]
 8007668:	9505      	str	r5, [sp, #20]
 800766a:	220a      	movs	r2, #10
 800766c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800766e:	7807      	ldrb	r7, [r0, #0]
 8007670:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007674:	b2d9      	uxtb	r1, r3
 8007676:	2909      	cmp	r1, #9
 8007678:	d929      	bls.n	80076ce <_strtod_l+0x1a6>
 800767a:	4622      	mov	r2, r4
 800767c:	f8d8 1000 	ldr.w	r1, [r8]
 8007680:	f002 fda0 	bl	800a1c4 <strncmp>
 8007684:	2800      	cmp	r0, #0
 8007686:	d031      	beq.n	80076ec <_strtod_l+0x1c4>
 8007688:	2000      	movs	r0, #0
 800768a:	9c05      	ldr	r4, [sp, #20]
 800768c:	9004      	str	r0, [sp, #16]
 800768e:	463b      	mov	r3, r7
 8007690:	4602      	mov	r2, r0
 8007692:	2b65      	cmp	r3, #101	; 0x65
 8007694:	d001      	beq.n	800769a <_strtod_l+0x172>
 8007696:	2b45      	cmp	r3, #69	; 0x45
 8007698:	d114      	bne.n	80076c4 <_strtod_l+0x19c>
 800769a:	b924      	cbnz	r4, 80076a6 <_strtod_l+0x17e>
 800769c:	b910      	cbnz	r0, 80076a4 <_strtod_l+0x17c>
 800769e:	9b06      	ldr	r3, [sp, #24]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d09e      	beq.n	80075e2 <_strtod_l+0xba>
 80076a4:	2400      	movs	r4, #0
 80076a6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80076a8:	1c73      	adds	r3, r6, #1
 80076aa:	931b      	str	r3, [sp, #108]	; 0x6c
 80076ac:	7873      	ldrb	r3, [r6, #1]
 80076ae:	2b2b      	cmp	r3, #43	; 0x2b
 80076b0:	d078      	beq.n	80077a4 <_strtod_l+0x27c>
 80076b2:	2b2d      	cmp	r3, #45	; 0x2d
 80076b4:	d070      	beq.n	8007798 <_strtod_l+0x270>
 80076b6:	f04f 0c00 	mov.w	ip, #0
 80076ba:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80076be:	2f09      	cmp	r7, #9
 80076c0:	d97c      	bls.n	80077bc <_strtod_l+0x294>
 80076c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80076c4:	f04f 0e00 	mov.w	lr, #0
 80076c8:	e09a      	b.n	8007800 <_strtod_l+0x2d8>
 80076ca:	2300      	movs	r3, #0
 80076cc:	e7c7      	b.n	800765e <_strtod_l+0x136>
 80076ce:	9905      	ldr	r1, [sp, #20]
 80076d0:	2908      	cmp	r1, #8
 80076d2:	bfdd      	ittte	le
 80076d4:	9907      	ldrle	r1, [sp, #28]
 80076d6:	fb02 3301 	mlale	r3, r2, r1, r3
 80076da:	9307      	strle	r3, [sp, #28]
 80076dc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80076e0:	9b05      	ldr	r3, [sp, #20]
 80076e2:	3001      	adds	r0, #1
 80076e4:	3301      	adds	r3, #1
 80076e6:	9305      	str	r3, [sp, #20]
 80076e8:	901b      	str	r0, [sp, #108]	; 0x6c
 80076ea:	e7bf      	b.n	800766c <_strtod_l+0x144>
 80076ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076ee:	191a      	adds	r2, r3, r4
 80076f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80076f2:	9a05      	ldr	r2, [sp, #20]
 80076f4:	5d1b      	ldrb	r3, [r3, r4]
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	d037      	beq.n	800776a <_strtod_l+0x242>
 80076fa:	9c05      	ldr	r4, [sp, #20]
 80076fc:	4602      	mov	r2, r0
 80076fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007702:	2909      	cmp	r1, #9
 8007704:	d913      	bls.n	800772e <_strtod_l+0x206>
 8007706:	2101      	movs	r1, #1
 8007708:	9104      	str	r1, [sp, #16]
 800770a:	e7c2      	b.n	8007692 <_strtod_l+0x16a>
 800770c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	921b      	str	r2, [sp, #108]	; 0x6c
 8007712:	785b      	ldrb	r3, [r3, #1]
 8007714:	3001      	adds	r0, #1
 8007716:	2b30      	cmp	r3, #48	; 0x30
 8007718:	d0f8      	beq.n	800770c <_strtod_l+0x1e4>
 800771a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800771e:	2a08      	cmp	r2, #8
 8007720:	f200 84e4 	bhi.w	80080ec <_strtod_l+0xbc4>
 8007724:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007726:	9208      	str	r2, [sp, #32]
 8007728:	4602      	mov	r2, r0
 800772a:	2000      	movs	r0, #0
 800772c:	4604      	mov	r4, r0
 800772e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007732:	f100 0101 	add.w	r1, r0, #1
 8007736:	d012      	beq.n	800775e <_strtod_l+0x236>
 8007738:	440a      	add	r2, r1
 800773a:	eb00 0c04 	add.w	ip, r0, r4
 800773e:	4621      	mov	r1, r4
 8007740:	270a      	movs	r7, #10
 8007742:	458c      	cmp	ip, r1
 8007744:	d113      	bne.n	800776e <_strtod_l+0x246>
 8007746:	1821      	adds	r1, r4, r0
 8007748:	2908      	cmp	r1, #8
 800774a:	f104 0401 	add.w	r4, r4, #1
 800774e:	4404      	add	r4, r0
 8007750:	dc19      	bgt.n	8007786 <_strtod_l+0x25e>
 8007752:	9b07      	ldr	r3, [sp, #28]
 8007754:	210a      	movs	r1, #10
 8007756:	fb01 e303 	mla	r3, r1, r3, lr
 800775a:	9307      	str	r3, [sp, #28]
 800775c:	2100      	movs	r1, #0
 800775e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007760:	1c58      	adds	r0, r3, #1
 8007762:	901b      	str	r0, [sp, #108]	; 0x6c
 8007764:	785b      	ldrb	r3, [r3, #1]
 8007766:	4608      	mov	r0, r1
 8007768:	e7c9      	b.n	80076fe <_strtod_l+0x1d6>
 800776a:	9805      	ldr	r0, [sp, #20]
 800776c:	e7d3      	b.n	8007716 <_strtod_l+0x1ee>
 800776e:	2908      	cmp	r1, #8
 8007770:	f101 0101 	add.w	r1, r1, #1
 8007774:	dc03      	bgt.n	800777e <_strtod_l+0x256>
 8007776:	9b07      	ldr	r3, [sp, #28]
 8007778:	437b      	muls	r3, r7
 800777a:	9307      	str	r3, [sp, #28]
 800777c:	e7e1      	b.n	8007742 <_strtod_l+0x21a>
 800777e:	2910      	cmp	r1, #16
 8007780:	bfd8      	it	le
 8007782:	437d      	mulle	r5, r7
 8007784:	e7dd      	b.n	8007742 <_strtod_l+0x21a>
 8007786:	2c10      	cmp	r4, #16
 8007788:	bfdc      	itt	le
 800778a:	210a      	movle	r1, #10
 800778c:	fb01 e505 	mlale	r5, r1, r5, lr
 8007790:	e7e4      	b.n	800775c <_strtod_l+0x234>
 8007792:	2301      	movs	r3, #1
 8007794:	9304      	str	r3, [sp, #16]
 8007796:	e781      	b.n	800769c <_strtod_l+0x174>
 8007798:	f04f 0c01 	mov.w	ip, #1
 800779c:	1cb3      	adds	r3, r6, #2
 800779e:	931b      	str	r3, [sp, #108]	; 0x6c
 80077a0:	78b3      	ldrb	r3, [r6, #2]
 80077a2:	e78a      	b.n	80076ba <_strtod_l+0x192>
 80077a4:	f04f 0c00 	mov.w	ip, #0
 80077a8:	e7f8      	b.n	800779c <_strtod_l+0x274>
 80077aa:	bf00      	nop
 80077ac:	0800ceec 	.word	0x0800ceec
 80077b0:	7ff00000 	.word	0x7ff00000
 80077b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077b6:	1c5f      	adds	r7, r3, #1
 80077b8:	971b      	str	r7, [sp, #108]	; 0x6c
 80077ba:	785b      	ldrb	r3, [r3, #1]
 80077bc:	2b30      	cmp	r3, #48	; 0x30
 80077be:	d0f9      	beq.n	80077b4 <_strtod_l+0x28c>
 80077c0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80077c4:	2f08      	cmp	r7, #8
 80077c6:	f63f af7d 	bhi.w	80076c4 <_strtod_l+0x19c>
 80077ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80077ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077d0:	930a      	str	r3, [sp, #40]	; 0x28
 80077d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077d4:	1c5f      	adds	r7, r3, #1
 80077d6:	971b      	str	r7, [sp, #108]	; 0x6c
 80077d8:	785b      	ldrb	r3, [r3, #1]
 80077da:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80077de:	f1b8 0f09 	cmp.w	r8, #9
 80077e2:	d937      	bls.n	8007854 <_strtod_l+0x32c>
 80077e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80077e6:	1a7f      	subs	r7, r7, r1
 80077e8:	2f08      	cmp	r7, #8
 80077ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80077ee:	dc37      	bgt.n	8007860 <_strtod_l+0x338>
 80077f0:	45be      	cmp	lr, r7
 80077f2:	bfa8      	it	ge
 80077f4:	46be      	movge	lr, r7
 80077f6:	f1bc 0f00 	cmp.w	ip, #0
 80077fa:	d001      	beq.n	8007800 <_strtod_l+0x2d8>
 80077fc:	f1ce 0e00 	rsb	lr, lr, #0
 8007800:	2c00      	cmp	r4, #0
 8007802:	d151      	bne.n	80078a8 <_strtod_l+0x380>
 8007804:	2800      	cmp	r0, #0
 8007806:	f47f aece 	bne.w	80075a6 <_strtod_l+0x7e>
 800780a:	9a06      	ldr	r2, [sp, #24]
 800780c:	2a00      	cmp	r2, #0
 800780e:	f47f aeca 	bne.w	80075a6 <_strtod_l+0x7e>
 8007812:	9a04      	ldr	r2, [sp, #16]
 8007814:	2a00      	cmp	r2, #0
 8007816:	f47f aee4 	bne.w	80075e2 <_strtod_l+0xba>
 800781a:	2b4e      	cmp	r3, #78	; 0x4e
 800781c:	d027      	beq.n	800786e <_strtod_l+0x346>
 800781e:	dc21      	bgt.n	8007864 <_strtod_l+0x33c>
 8007820:	2b49      	cmp	r3, #73	; 0x49
 8007822:	f47f aede 	bne.w	80075e2 <_strtod_l+0xba>
 8007826:	49a0      	ldr	r1, [pc, #640]	; (8007aa8 <_strtod_l+0x580>)
 8007828:	a81b      	add	r0, sp, #108	; 0x6c
 800782a:	f001 fdd7 	bl	80093dc <__match>
 800782e:	2800      	cmp	r0, #0
 8007830:	f43f aed7 	beq.w	80075e2 <_strtod_l+0xba>
 8007834:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007836:	499d      	ldr	r1, [pc, #628]	; (8007aac <_strtod_l+0x584>)
 8007838:	3b01      	subs	r3, #1
 800783a:	a81b      	add	r0, sp, #108	; 0x6c
 800783c:	931b      	str	r3, [sp, #108]	; 0x6c
 800783e:	f001 fdcd 	bl	80093dc <__match>
 8007842:	b910      	cbnz	r0, 800784a <_strtod_l+0x322>
 8007844:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007846:	3301      	adds	r3, #1
 8007848:	931b      	str	r3, [sp, #108]	; 0x6c
 800784a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007ac0 <_strtod_l+0x598>
 800784e:	f04f 0a00 	mov.w	sl, #0
 8007852:	e6a8      	b.n	80075a6 <_strtod_l+0x7e>
 8007854:	210a      	movs	r1, #10
 8007856:	fb01 3e0e 	mla	lr, r1, lr, r3
 800785a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800785e:	e7b8      	b.n	80077d2 <_strtod_l+0x2aa>
 8007860:	46be      	mov	lr, r7
 8007862:	e7c8      	b.n	80077f6 <_strtod_l+0x2ce>
 8007864:	2b69      	cmp	r3, #105	; 0x69
 8007866:	d0de      	beq.n	8007826 <_strtod_l+0x2fe>
 8007868:	2b6e      	cmp	r3, #110	; 0x6e
 800786a:	f47f aeba 	bne.w	80075e2 <_strtod_l+0xba>
 800786e:	4990      	ldr	r1, [pc, #576]	; (8007ab0 <_strtod_l+0x588>)
 8007870:	a81b      	add	r0, sp, #108	; 0x6c
 8007872:	f001 fdb3 	bl	80093dc <__match>
 8007876:	2800      	cmp	r0, #0
 8007878:	f43f aeb3 	beq.w	80075e2 <_strtod_l+0xba>
 800787c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b28      	cmp	r3, #40	; 0x28
 8007882:	d10e      	bne.n	80078a2 <_strtod_l+0x37a>
 8007884:	aa1e      	add	r2, sp, #120	; 0x78
 8007886:	498b      	ldr	r1, [pc, #556]	; (8007ab4 <_strtod_l+0x58c>)
 8007888:	a81b      	add	r0, sp, #108	; 0x6c
 800788a:	f001 fdbb 	bl	8009404 <__hexnan>
 800788e:	2805      	cmp	r0, #5
 8007890:	d107      	bne.n	80078a2 <_strtod_l+0x37a>
 8007892:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007894:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007898:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800789c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80078a0:	e681      	b.n	80075a6 <_strtod_l+0x7e>
 80078a2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007ac8 <_strtod_l+0x5a0>
 80078a6:	e7d2      	b.n	800784e <_strtod_l+0x326>
 80078a8:	ebae 0302 	sub.w	r3, lr, r2
 80078ac:	9306      	str	r3, [sp, #24]
 80078ae:	9b05      	ldr	r3, [sp, #20]
 80078b0:	9807      	ldr	r0, [sp, #28]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	bf08      	it	eq
 80078b6:	4623      	moveq	r3, r4
 80078b8:	2c10      	cmp	r4, #16
 80078ba:	9305      	str	r3, [sp, #20]
 80078bc:	46a0      	mov	r8, r4
 80078be:	bfa8      	it	ge
 80078c0:	f04f 0810 	movge.w	r8, #16
 80078c4:	f7f8 fe2e 	bl	8000524 <__aeabi_ui2d>
 80078c8:	2c09      	cmp	r4, #9
 80078ca:	4682      	mov	sl, r0
 80078cc:	468b      	mov	fp, r1
 80078ce:	dc13      	bgt.n	80078f8 <_strtod_l+0x3d0>
 80078d0:	9b06      	ldr	r3, [sp, #24]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f43f ae67 	beq.w	80075a6 <_strtod_l+0x7e>
 80078d8:	9b06      	ldr	r3, [sp, #24]
 80078da:	dd7a      	ble.n	80079d2 <_strtod_l+0x4aa>
 80078dc:	2b16      	cmp	r3, #22
 80078de:	dc61      	bgt.n	80079a4 <_strtod_l+0x47c>
 80078e0:	4a75      	ldr	r2, [pc, #468]	; (8007ab8 <_strtod_l+0x590>)
 80078e2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80078e6:	e9de 0100 	ldrd	r0, r1, [lr]
 80078ea:	4652      	mov	r2, sl
 80078ec:	465b      	mov	r3, fp
 80078ee:	f7f8 fe93 	bl	8000618 <__aeabi_dmul>
 80078f2:	4682      	mov	sl, r0
 80078f4:	468b      	mov	fp, r1
 80078f6:	e656      	b.n	80075a6 <_strtod_l+0x7e>
 80078f8:	4b6f      	ldr	r3, [pc, #444]	; (8007ab8 <_strtod_l+0x590>)
 80078fa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80078fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007902:	f7f8 fe89 	bl	8000618 <__aeabi_dmul>
 8007906:	4606      	mov	r6, r0
 8007908:	4628      	mov	r0, r5
 800790a:	460f      	mov	r7, r1
 800790c:	f7f8 fe0a 	bl	8000524 <__aeabi_ui2d>
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	4630      	mov	r0, r6
 8007916:	4639      	mov	r1, r7
 8007918:	f7f8 fcc8 	bl	80002ac <__adddf3>
 800791c:	2c0f      	cmp	r4, #15
 800791e:	4682      	mov	sl, r0
 8007920:	468b      	mov	fp, r1
 8007922:	ddd5      	ble.n	80078d0 <_strtod_l+0x3a8>
 8007924:	9b06      	ldr	r3, [sp, #24]
 8007926:	eba4 0808 	sub.w	r8, r4, r8
 800792a:	4498      	add	r8, r3
 800792c:	f1b8 0f00 	cmp.w	r8, #0
 8007930:	f340 8096 	ble.w	8007a60 <_strtod_l+0x538>
 8007934:	f018 030f 	ands.w	r3, r8, #15
 8007938:	d00a      	beq.n	8007950 <_strtod_l+0x428>
 800793a:	495f      	ldr	r1, [pc, #380]	; (8007ab8 <_strtod_l+0x590>)
 800793c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007940:	4652      	mov	r2, sl
 8007942:	465b      	mov	r3, fp
 8007944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007948:	f7f8 fe66 	bl	8000618 <__aeabi_dmul>
 800794c:	4682      	mov	sl, r0
 800794e:	468b      	mov	fp, r1
 8007950:	f038 080f 	bics.w	r8, r8, #15
 8007954:	d073      	beq.n	8007a3e <_strtod_l+0x516>
 8007956:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800795a:	dd47      	ble.n	80079ec <_strtod_l+0x4c4>
 800795c:	2400      	movs	r4, #0
 800795e:	46a0      	mov	r8, r4
 8007960:	9407      	str	r4, [sp, #28]
 8007962:	9405      	str	r4, [sp, #20]
 8007964:	2322      	movs	r3, #34	; 0x22
 8007966:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007ac0 <_strtod_l+0x598>
 800796a:	f8c9 3000 	str.w	r3, [r9]
 800796e:	f04f 0a00 	mov.w	sl, #0
 8007972:	9b07      	ldr	r3, [sp, #28]
 8007974:	2b00      	cmp	r3, #0
 8007976:	f43f ae16 	beq.w	80075a6 <_strtod_l+0x7e>
 800797a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800797c:	4648      	mov	r0, r9
 800797e:	f001 fe3e 	bl	80095fe <_Bfree>
 8007982:	9905      	ldr	r1, [sp, #20]
 8007984:	4648      	mov	r0, r9
 8007986:	f001 fe3a 	bl	80095fe <_Bfree>
 800798a:	4641      	mov	r1, r8
 800798c:	4648      	mov	r0, r9
 800798e:	f001 fe36 	bl	80095fe <_Bfree>
 8007992:	9907      	ldr	r1, [sp, #28]
 8007994:	4648      	mov	r0, r9
 8007996:	f001 fe32 	bl	80095fe <_Bfree>
 800799a:	4621      	mov	r1, r4
 800799c:	4648      	mov	r0, r9
 800799e:	f001 fe2e 	bl	80095fe <_Bfree>
 80079a2:	e600      	b.n	80075a6 <_strtod_l+0x7e>
 80079a4:	9a06      	ldr	r2, [sp, #24]
 80079a6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80079aa:	4293      	cmp	r3, r2
 80079ac:	dbba      	blt.n	8007924 <_strtod_l+0x3fc>
 80079ae:	4d42      	ldr	r5, [pc, #264]	; (8007ab8 <_strtod_l+0x590>)
 80079b0:	f1c4 040f 	rsb	r4, r4, #15
 80079b4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80079b8:	4652      	mov	r2, sl
 80079ba:	465b      	mov	r3, fp
 80079bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079c0:	f7f8 fe2a 	bl	8000618 <__aeabi_dmul>
 80079c4:	9b06      	ldr	r3, [sp, #24]
 80079c6:	1b1c      	subs	r4, r3, r4
 80079c8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80079cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80079d0:	e78d      	b.n	80078ee <_strtod_l+0x3c6>
 80079d2:	f113 0f16 	cmn.w	r3, #22
 80079d6:	dba5      	blt.n	8007924 <_strtod_l+0x3fc>
 80079d8:	4a37      	ldr	r2, [pc, #220]	; (8007ab8 <_strtod_l+0x590>)
 80079da:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80079de:	e9d2 2300 	ldrd	r2, r3, [r2]
 80079e2:	4650      	mov	r0, sl
 80079e4:	4659      	mov	r1, fp
 80079e6:	f7f8 ff41 	bl	800086c <__aeabi_ddiv>
 80079ea:	e782      	b.n	80078f2 <_strtod_l+0x3ca>
 80079ec:	2300      	movs	r3, #0
 80079ee:	4e33      	ldr	r6, [pc, #204]	; (8007abc <_strtod_l+0x594>)
 80079f0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80079f4:	4650      	mov	r0, sl
 80079f6:	4659      	mov	r1, fp
 80079f8:	461d      	mov	r5, r3
 80079fa:	f1b8 0f01 	cmp.w	r8, #1
 80079fe:	dc21      	bgt.n	8007a44 <_strtod_l+0x51c>
 8007a00:	b10b      	cbz	r3, 8007a06 <_strtod_l+0x4de>
 8007a02:	4682      	mov	sl, r0
 8007a04:	468b      	mov	fp, r1
 8007a06:	4b2d      	ldr	r3, [pc, #180]	; (8007abc <_strtod_l+0x594>)
 8007a08:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007a0c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007a10:	4652      	mov	r2, sl
 8007a12:	465b      	mov	r3, fp
 8007a14:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007a18:	f7f8 fdfe 	bl	8000618 <__aeabi_dmul>
 8007a1c:	4b28      	ldr	r3, [pc, #160]	; (8007ac0 <_strtod_l+0x598>)
 8007a1e:	460a      	mov	r2, r1
 8007a20:	400b      	ands	r3, r1
 8007a22:	4928      	ldr	r1, [pc, #160]	; (8007ac4 <_strtod_l+0x59c>)
 8007a24:	428b      	cmp	r3, r1
 8007a26:	4682      	mov	sl, r0
 8007a28:	d898      	bhi.n	800795c <_strtod_l+0x434>
 8007a2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007a2e:	428b      	cmp	r3, r1
 8007a30:	bf86      	itte	hi
 8007a32:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007acc <_strtod_l+0x5a4>
 8007a36:	f04f 3aff 	movhi.w	sl, #4294967295
 8007a3a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007a3e:	2300      	movs	r3, #0
 8007a40:	9304      	str	r3, [sp, #16]
 8007a42:	e077      	b.n	8007b34 <_strtod_l+0x60c>
 8007a44:	f018 0f01 	tst.w	r8, #1
 8007a48:	d006      	beq.n	8007a58 <_strtod_l+0x530>
 8007a4a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a52:	f7f8 fde1 	bl	8000618 <__aeabi_dmul>
 8007a56:	2301      	movs	r3, #1
 8007a58:	3501      	adds	r5, #1
 8007a5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007a5e:	e7cc      	b.n	80079fa <_strtod_l+0x4d2>
 8007a60:	d0ed      	beq.n	8007a3e <_strtod_l+0x516>
 8007a62:	f1c8 0800 	rsb	r8, r8, #0
 8007a66:	f018 020f 	ands.w	r2, r8, #15
 8007a6a:	d00a      	beq.n	8007a82 <_strtod_l+0x55a>
 8007a6c:	4b12      	ldr	r3, [pc, #72]	; (8007ab8 <_strtod_l+0x590>)
 8007a6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a72:	4650      	mov	r0, sl
 8007a74:	4659      	mov	r1, fp
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	f7f8 fef7 	bl	800086c <__aeabi_ddiv>
 8007a7e:	4682      	mov	sl, r0
 8007a80:	468b      	mov	fp, r1
 8007a82:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007a86:	d0da      	beq.n	8007a3e <_strtod_l+0x516>
 8007a88:	f1b8 0f1f 	cmp.w	r8, #31
 8007a8c:	dd20      	ble.n	8007ad0 <_strtod_l+0x5a8>
 8007a8e:	2400      	movs	r4, #0
 8007a90:	46a0      	mov	r8, r4
 8007a92:	9407      	str	r4, [sp, #28]
 8007a94:	9405      	str	r4, [sp, #20]
 8007a96:	2322      	movs	r3, #34	; 0x22
 8007a98:	f04f 0a00 	mov.w	sl, #0
 8007a9c:	f04f 0b00 	mov.w	fp, #0
 8007aa0:	f8c9 3000 	str.w	r3, [r9]
 8007aa4:	e765      	b.n	8007972 <_strtod_l+0x44a>
 8007aa6:	bf00      	nop
 8007aa8:	0800ceb5 	.word	0x0800ceb5
 8007aac:	0800cf43 	.word	0x0800cf43
 8007ab0:	0800cebd 	.word	0x0800cebd
 8007ab4:	0800cf00 	.word	0x0800cf00
 8007ab8:	0800cf80 	.word	0x0800cf80
 8007abc:	0800cf58 	.word	0x0800cf58
 8007ac0:	7ff00000 	.word	0x7ff00000
 8007ac4:	7ca00000 	.word	0x7ca00000
 8007ac8:	fff80000 	.word	0xfff80000
 8007acc:	7fefffff 	.word	0x7fefffff
 8007ad0:	f018 0310 	ands.w	r3, r8, #16
 8007ad4:	bf18      	it	ne
 8007ad6:	236a      	movne	r3, #106	; 0x6a
 8007ad8:	4da0      	ldr	r5, [pc, #640]	; (8007d5c <_strtod_l+0x834>)
 8007ada:	9304      	str	r3, [sp, #16]
 8007adc:	4650      	mov	r0, sl
 8007ade:	4659      	mov	r1, fp
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f1b8 0f00 	cmp.w	r8, #0
 8007ae6:	f300 810a 	bgt.w	8007cfe <_strtod_l+0x7d6>
 8007aea:	b10b      	cbz	r3, 8007af0 <_strtod_l+0x5c8>
 8007aec:	4682      	mov	sl, r0
 8007aee:	468b      	mov	fp, r1
 8007af0:	9b04      	ldr	r3, [sp, #16]
 8007af2:	b1bb      	cbz	r3, 8007b24 <_strtod_l+0x5fc>
 8007af4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007af8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	4659      	mov	r1, fp
 8007b00:	dd10      	ble.n	8007b24 <_strtod_l+0x5fc>
 8007b02:	2b1f      	cmp	r3, #31
 8007b04:	f340 8107 	ble.w	8007d16 <_strtod_l+0x7ee>
 8007b08:	2b34      	cmp	r3, #52	; 0x34
 8007b0a:	bfde      	ittt	le
 8007b0c:	3b20      	suble	r3, #32
 8007b0e:	f04f 32ff 	movle.w	r2, #4294967295
 8007b12:	fa02 f303 	lslle.w	r3, r2, r3
 8007b16:	f04f 0a00 	mov.w	sl, #0
 8007b1a:	bfcc      	ite	gt
 8007b1c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007b20:	ea03 0b01 	andle.w	fp, r3, r1
 8007b24:	2200      	movs	r2, #0
 8007b26:	2300      	movs	r3, #0
 8007b28:	4650      	mov	r0, sl
 8007b2a:	4659      	mov	r1, fp
 8007b2c:	f7f8 ffdc 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d1ac      	bne.n	8007a8e <_strtod_l+0x566>
 8007b34:	9b07      	ldr	r3, [sp, #28]
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	9a05      	ldr	r2, [sp, #20]
 8007b3a:	9908      	ldr	r1, [sp, #32]
 8007b3c:	4623      	mov	r3, r4
 8007b3e:	4648      	mov	r0, r9
 8007b40:	f001 fdaf 	bl	80096a2 <__s2b>
 8007b44:	9007      	str	r0, [sp, #28]
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f43f af08 	beq.w	800795c <_strtod_l+0x434>
 8007b4c:	9a06      	ldr	r2, [sp, #24]
 8007b4e:	9b06      	ldr	r3, [sp, #24]
 8007b50:	2a00      	cmp	r2, #0
 8007b52:	f1c3 0300 	rsb	r3, r3, #0
 8007b56:	bfa8      	it	ge
 8007b58:	2300      	movge	r3, #0
 8007b5a:	930e      	str	r3, [sp, #56]	; 0x38
 8007b5c:	2400      	movs	r4, #0
 8007b5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007b62:	9316      	str	r3, [sp, #88]	; 0x58
 8007b64:	46a0      	mov	r8, r4
 8007b66:	9b07      	ldr	r3, [sp, #28]
 8007b68:	4648      	mov	r0, r9
 8007b6a:	6859      	ldr	r1, [r3, #4]
 8007b6c:	f001 fd13 	bl	8009596 <_Balloc>
 8007b70:	9005      	str	r0, [sp, #20]
 8007b72:	2800      	cmp	r0, #0
 8007b74:	f43f aef6 	beq.w	8007964 <_strtod_l+0x43c>
 8007b78:	9b07      	ldr	r3, [sp, #28]
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	3202      	adds	r2, #2
 8007b7e:	f103 010c 	add.w	r1, r3, #12
 8007b82:	0092      	lsls	r2, r2, #2
 8007b84:	300c      	adds	r0, #12
 8007b86:	f001 fcfb 	bl	8009580 <memcpy>
 8007b8a:	aa1e      	add	r2, sp, #120	; 0x78
 8007b8c:	a91d      	add	r1, sp, #116	; 0x74
 8007b8e:	ec4b ab10 	vmov	d0, sl, fp
 8007b92:	4648      	mov	r0, r9
 8007b94:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007b98:	f002 f83e 	bl	8009c18 <__d2b>
 8007b9c:	901c      	str	r0, [sp, #112]	; 0x70
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	f43f aee0 	beq.w	8007964 <_strtod_l+0x43c>
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	4648      	mov	r0, r9
 8007ba8:	f001 fe07 	bl	80097ba <__i2b>
 8007bac:	4680      	mov	r8, r0
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	f43f aed8 	beq.w	8007964 <_strtod_l+0x43c>
 8007bb4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007bb6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007bb8:	2e00      	cmp	r6, #0
 8007bba:	bfab      	itete	ge
 8007bbc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007bbe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007bc0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007bc2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007bc4:	bfac      	ite	ge
 8007bc6:	18f7      	addge	r7, r6, r3
 8007bc8:	1b9d      	sublt	r5, r3, r6
 8007bca:	9b04      	ldr	r3, [sp, #16]
 8007bcc:	1af6      	subs	r6, r6, r3
 8007bce:	4416      	add	r6, r2
 8007bd0:	4b63      	ldr	r3, [pc, #396]	; (8007d60 <_strtod_l+0x838>)
 8007bd2:	3e01      	subs	r6, #1
 8007bd4:	429e      	cmp	r6, r3
 8007bd6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007bda:	f280 80af 	bge.w	8007d3c <_strtod_l+0x814>
 8007bde:	1b9b      	subs	r3, r3, r6
 8007be0:	2b1f      	cmp	r3, #31
 8007be2:	eba2 0203 	sub.w	r2, r2, r3
 8007be6:	f04f 0101 	mov.w	r1, #1
 8007bea:	f300 809b 	bgt.w	8007d24 <_strtod_l+0x7fc>
 8007bee:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf2:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8007bf8:	18be      	adds	r6, r7, r2
 8007bfa:	9b04      	ldr	r3, [sp, #16]
 8007bfc:	42b7      	cmp	r7, r6
 8007bfe:	4415      	add	r5, r2
 8007c00:	441d      	add	r5, r3
 8007c02:	463b      	mov	r3, r7
 8007c04:	bfa8      	it	ge
 8007c06:	4633      	movge	r3, r6
 8007c08:	42ab      	cmp	r3, r5
 8007c0a:	bfa8      	it	ge
 8007c0c:	462b      	movge	r3, r5
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bfc2      	ittt	gt
 8007c12:	1af6      	subgt	r6, r6, r3
 8007c14:	1aed      	subgt	r5, r5, r3
 8007c16:	1aff      	subgt	r7, r7, r3
 8007c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c1a:	b1bb      	cbz	r3, 8007c4c <_strtod_l+0x724>
 8007c1c:	4641      	mov	r1, r8
 8007c1e:	461a      	mov	r2, r3
 8007c20:	4648      	mov	r0, r9
 8007c22:	f001 fe69 	bl	80098f8 <__pow5mult>
 8007c26:	4680      	mov	r8, r0
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	f43f ae9b 	beq.w	8007964 <_strtod_l+0x43c>
 8007c2e:	4601      	mov	r1, r0
 8007c30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007c32:	4648      	mov	r0, r9
 8007c34:	f001 fdca 	bl	80097cc <__multiply>
 8007c38:	900c      	str	r0, [sp, #48]	; 0x30
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	f43f ae92 	beq.w	8007964 <_strtod_l+0x43c>
 8007c40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c42:	4648      	mov	r0, r9
 8007c44:	f001 fcdb 	bl	80095fe <_Bfree>
 8007c48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c4a:	931c      	str	r3, [sp, #112]	; 0x70
 8007c4c:	2e00      	cmp	r6, #0
 8007c4e:	dc7a      	bgt.n	8007d46 <_strtod_l+0x81e>
 8007c50:	9b06      	ldr	r3, [sp, #24]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	dd08      	ble.n	8007c68 <_strtod_l+0x740>
 8007c56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007c58:	9905      	ldr	r1, [sp, #20]
 8007c5a:	4648      	mov	r0, r9
 8007c5c:	f001 fe4c 	bl	80098f8 <__pow5mult>
 8007c60:	9005      	str	r0, [sp, #20]
 8007c62:	2800      	cmp	r0, #0
 8007c64:	f43f ae7e 	beq.w	8007964 <_strtod_l+0x43c>
 8007c68:	2d00      	cmp	r5, #0
 8007c6a:	dd08      	ble.n	8007c7e <_strtod_l+0x756>
 8007c6c:	462a      	mov	r2, r5
 8007c6e:	9905      	ldr	r1, [sp, #20]
 8007c70:	4648      	mov	r0, r9
 8007c72:	f001 fe8f 	bl	8009994 <__lshift>
 8007c76:	9005      	str	r0, [sp, #20]
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	f43f ae73 	beq.w	8007964 <_strtod_l+0x43c>
 8007c7e:	2f00      	cmp	r7, #0
 8007c80:	dd08      	ble.n	8007c94 <_strtod_l+0x76c>
 8007c82:	4641      	mov	r1, r8
 8007c84:	463a      	mov	r2, r7
 8007c86:	4648      	mov	r0, r9
 8007c88:	f001 fe84 	bl	8009994 <__lshift>
 8007c8c:	4680      	mov	r8, r0
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	f43f ae68 	beq.w	8007964 <_strtod_l+0x43c>
 8007c94:	9a05      	ldr	r2, [sp, #20]
 8007c96:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c98:	4648      	mov	r0, r9
 8007c9a:	f001 fee9 	bl	8009a70 <__mdiff>
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	f43f ae5f 	beq.w	8007964 <_strtod_l+0x43c>
 8007ca6:	68c3      	ldr	r3, [r0, #12]
 8007ca8:	930c      	str	r3, [sp, #48]	; 0x30
 8007caa:	2300      	movs	r3, #0
 8007cac:	60c3      	str	r3, [r0, #12]
 8007cae:	4641      	mov	r1, r8
 8007cb0:	f001 fec4 	bl	8009a3c <__mcmp>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	da55      	bge.n	8007d64 <_strtod_l+0x83c>
 8007cb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cba:	b9e3      	cbnz	r3, 8007cf6 <_strtod_l+0x7ce>
 8007cbc:	f1ba 0f00 	cmp.w	sl, #0
 8007cc0:	d119      	bne.n	8007cf6 <_strtod_l+0x7ce>
 8007cc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cc6:	b9b3      	cbnz	r3, 8007cf6 <_strtod_l+0x7ce>
 8007cc8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ccc:	0d1b      	lsrs	r3, r3, #20
 8007cce:	051b      	lsls	r3, r3, #20
 8007cd0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007cd4:	d90f      	bls.n	8007cf6 <_strtod_l+0x7ce>
 8007cd6:	6963      	ldr	r3, [r4, #20]
 8007cd8:	b913      	cbnz	r3, 8007ce0 <_strtod_l+0x7b8>
 8007cda:	6923      	ldr	r3, [r4, #16]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	dd0a      	ble.n	8007cf6 <_strtod_l+0x7ce>
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	4648      	mov	r0, r9
 8007ce6:	f001 fe55 	bl	8009994 <__lshift>
 8007cea:	4641      	mov	r1, r8
 8007cec:	4604      	mov	r4, r0
 8007cee:	f001 fea5 	bl	8009a3c <__mcmp>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	dc67      	bgt.n	8007dc6 <_strtod_l+0x89e>
 8007cf6:	9b04      	ldr	r3, [sp, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d171      	bne.n	8007de0 <_strtod_l+0x8b8>
 8007cfc:	e63d      	b.n	800797a <_strtod_l+0x452>
 8007cfe:	f018 0f01 	tst.w	r8, #1
 8007d02:	d004      	beq.n	8007d0e <_strtod_l+0x7e6>
 8007d04:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d08:	f7f8 fc86 	bl	8000618 <__aeabi_dmul>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d12:	3508      	adds	r5, #8
 8007d14:	e6e5      	b.n	8007ae2 <_strtod_l+0x5ba>
 8007d16:	f04f 32ff 	mov.w	r2, #4294967295
 8007d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1e:	ea03 0a0a 	and.w	sl, r3, sl
 8007d22:	e6ff      	b.n	8007b24 <_strtod_l+0x5fc>
 8007d24:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007d28:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007d2c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007d30:	36e2      	adds	r6, #226	; 0xe2
 8007d32:	fa01 f306 	lsl.w	r3, r1, r6
 8007d36:	930a      	str	r3, [sp, #40]	; 0x28
 8007d38:	910f      	str	r1, [sp, #60]	; 0x3c
 8007d3a:	e75d      	b.n	8007bf8 <_strtod_l+0x6d0>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d40:	2301      	movs	r3, #1
 8007d42:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d44:	e758      	b.n	8007bf8 <_strtod_l+0x6d0>
 8007d46:	4632      	mov	r2, r6
 8007d48:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d4a:	4648      	mov	r0, r9
 8007d4c:	f001 fe22 	bl	8009994 <__lshift>
 8007d50:	901c      	str	r0, [sp, #112]	; 0x70
 8007d52:	2800      	cmp	r0, #0
 8007d54:	f47f af7c 	bne.w	8007c50 <_strtod_l+0x728>
 8007d58:	e604      	b.n	8007964 <_strtod_l+0x43c>
 8007d5a:	bf00      	nop
 8007d5c:	0800cf18 	.word	0x0800cf18
 8007d60:	fffffc02 	.word	0xfffffc02
 8007d64:	465d      	mov	r5, fp
 8007d66:	f040 8086 	bne.w	8007e76 <_strtod_l+0x94e>
 8007d6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d70:	b32a      	cbz	r2, 8007dbe <_strtod_l+0x896>
 8007d72:	4aaf      	ldr	r2, [pc, #700]	; (8008030 <_strtod_l+0xb08>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d153      	bne.n	8007e20 <_strtod_l+0x8f8>
 8007d78:	9b04      	ldr	r3, [sp, #16]
 8007d7a:	4650      	mov	r0, sl
 8007d7c:	b1d3      	cbz	r3, 8007db4 <_strtod_l+0x88c>
 8007d7e:	4aad      	ldr	r2, [pc, #692]	; (8008034 <_strtod_l+0xb0c>)
 8007d80:	402a      	ands	r2, r5
 8007d82:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007d86:	f04f 31ff 	mov.w	r1, #4294967295
 8007d8a:	d816      	bhi.n	8007dba <_strtod_l+0x892>
 8007d8c:	0d12      	lsrs	r2, r2, #20
 8007d8e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007d92:	fa01 f303 	lsl.w	r3, r1, r3
 8007d96:	4298      	cmp	r0, r3
 8007d98:	d142      	bne.n	8007e20 <_strtod_l+0x8f8>
 8007d9a:	4ba7      	ldr	r3, [pc, #668]	; (8008038 <_strtod_l+0xb10>)
 8007d9c:	429d      	cmp	r5, r3
 8007d9e:	d102      	bne.n	8007da6 <_strtod_l+0x87e>
 8007da0:	3001      	adds	r0, #1
 8007da2:	f43f addf 	beq.w	8007964 <_strtod_l+0x43c>
 8007da6:	4ba3      	ldr	r3, [pc, #652]	; (8008034 <_strtod_l+0xb0c>)
 8007da8:	402b      	ands	r3, r5
 8007daa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007dae:	f04f 0a00 	mov.w	sl, #0
 8007db2:	e7a0      	b.n	8007cf6 <_strtod_l+0x7ce>
 8007db4:	f04f 33ff 	mov.w	r3, #4294967295
 8007db8:	e7ed      	b.n	8007d96 <_strtod_l+0x86e>
 8007dba:	460b      	mov	r3, r1
 8007dbc:	e7eb      	b.n	8007d96 <_strtod_l+0x86e>
 8007dbe:	bb7b      	cbnz	r3, 8007e20 <_strtod_l+0x8f8>
 8007dc0:	f1ba 0f00 	cmp.w	sl, #0
 8007dc4:	d12c      	bne.n	8007e20 <_strtod_l+0x8f8>
 8007dc6:	9904      	ldr	r1, [sp, #16]
 8007dc8:	4a9a      	ldr	r2, [pc, #616]	; (8008034 <_strtod_l+0xb0c>)
 8007dca:	465b      	mov	r3, fp
 8007dcc:	b1f1      	cbz	r1, 8007e0c <_strtod_l+0x8e4>
 8007dce:	ea02 010b 	and.w	r1, r2, fp
 8007dd2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007dd6:	dc19      	bgt.n	8007e0c <_strtod_l+0x8e4>
 8007dd8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007ddc:	f77f ae5b 	ble.w	8007a96 <_strtod_l+0x56e>
 8007de0:	4a96      	ldr	r2, [pc, #600]	; (800803c <_strtod_l+0xb14>)
 8007de2:	2300      	movs	r3, #0
 8007de4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007de8:	4650      	mov	r0, sl
 8007dea:	4659      	mov	r1, fp
 8007dec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007df0:	f7f8 fc12 	bl	8000618 <__aeabi_dmul>
 8007df4:	4682      	mov	sl, r0
 8007df6:	468b      	mov	fp, r1
 8007df8:	2900      	cmp	r1, #0
 8007dfa:	f47f adbe 	bne.w	800797a <_strtod_l+0x452>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f47f adbb 	bne.w	800797a <_strtod_l+0x452>
 8007e04:	2322      	movs	r3, #34	; 0x22
 8007e06:	f8c9 3000 	str.w	r3, [r9]
 8007e0a:	e5b6      	b.n	800797a <_strtod_l+0x452>
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007e12:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007e16:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007e1a:	f04f 3aff 	mov.w	sl, #4294967295
 8007e1e:	e76a      	b.n	8007cf6 <_strtod_l+0x7ce>
 8007e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e22:	b193      	cbz	r3, 8007e4a <_strtod_l+0x922>
 8007e24:	422b      	tst	r3, r5
 8007e26:	f43f af66 	beq.w	8007cf6 <_strtod_l+0x7ce>
 8007e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e2c:	9a04      	ldr	r2, [sp, #16]
 8007e2e:	4650      	mov	r0, sl
 8007e30:	4659      	mov	r1, fp
 8007e32:	b173      	cbz	r3, 8007e52 <_strtod_l+0x92a>
 8007e34:	f7ff fb5a 	bl	80074ec <sulp>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e40:	f7f8 fa34 	bl	80002ac <__adddf3>
 8007e44:	4682      	mov	sl, r0
 8007e46:	468b      	mov	fp, r1
 8007e48:	e755      	b.n	8007cf6 <_strtod_l+0x7ce>
 8007e4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e4c:	ea13 0f0a 	tst.w	r3, sl
 8007e50:	e7e9      	b.n	8007e26 <_strtod_l+0x8fe>
 8007e52:	f7ff fb4b 	bl	80074ec <sulp>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e5e:	f7f8 fa23 	bl	80002a8 <__aeabi_dsub>
 8007e62:	2200      	movs	r2, #0
 8007e64:	2300      	movs	r3, #0
 8007e66:	4682      	mov	sl, r0
 8007e68:	468b      	mov	fp, r1
 8007e6a:	f7f8 fe3d 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	f47f ae11 	bne.w	8007a96 <_strtod_l+0x56e>
 8007e74:	e73f      	b.n	8007cf6 <_strtod_l+0x7ce>
 8007e76:	4641      	mov	r1, r8
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f001 ff1c 	bl	8009cb6 <__ratio>
 8007e7e:	ec57 6b10 	vmov	r6, r7, d0
 8007e82:	2200      	movs	r2, #0
 8007e84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e88:	ee10 0a10 	vmov	r0, s0
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	f7f8 fe3f 	bl	8000b10 <__aeabi_dcmple>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	d077      	beq.n	8007f86 <_strtod_l+0xa5e>
 8007e96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d04a      	beq.n	8007f32 <_strtod_l+0xa0a>
 8007e9c:	4b68      	ldr	r3, [pc, #416]	; (8008040 <_strtod_l+0xb18>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007ea4:	4f66      	ldr	r7, [pc, #408]	; (8008040 <_strtod_l+0xb18>)
 8007ea6:	2600      	movs	r6, #0
 8007ea8:	4b62      	ldr	r3, [pc, #392]	; (8008034 <_strtod_l+0xb0c>)
 8007eaa:	402b      	ands	r3, r5
 8007eac:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007eb0:	4b64      	ldr	r3, [pc, #400]	; (8008044 <_strtod_l+0xb1c>)
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	f040 80ce 	bne.w	8008054 <_strtod_l+0xb2c>
 8007eb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ebc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ec0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007ec4:	ec4b ab10 	vmov	d0, sl, fp
 8007ec8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007ecc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ed0:	f001 fe2c 	bl	8009b2c <__ulp>
 8007ed4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ed8:	ec53 2b10 	vmov	r2, r3, d0
 8007edc:	f7f8 fb9c 	bl	8000618 <__aeabi_dmul>
 8007ee0:	4652      	mov	r2, sl
 8007ee2:	465b      	mov	r3, fp
 8007ee4:	f7f8 f9e2 	bl	80002ac <__adddf3>
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4952      	ldr	r1, [pc, #328]	; (8008034 <_strtod_l+0xb0c>)
 8007eec:	4a56      	ldr	r2, [pc, #344]	; (8008048 <_strtod_l+0xb20>)
 8007eee:	4019      	ands	r1, r3
 8007ef0:	4291      	cmp	r1, r2
 8007ef2:	4682      	mov	sl, r0
 8007ef4:	d95b      	bls.n	8007fae <_strtod_l+0xa86>
 8007ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d103      	bne.n	8007f08 <_strtod_l+0x9e0>
 8007f00:	9b08      	ldr	r3, [sp, #32]
 8007f02:	3301      	adds	r3, #1
 8007f04:	f43f ad2e 	beq.w	8007964 <_strtod_l+0x43c>
 8007f08:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008038 <_strtod_l+0xb10>
 8007f0c:	f04f 3aff 	mov.w	sl, #4294967295
 8007f10:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f12:	4648      	mov	r0, r9
 8007f14:	f001 fb73 	bl	80095fe <_Bfree>
 8007f18:	9905      	ldr	r1, [sp, #20]
 8007f1a:	4648      	mov	r0, r9
 8007f1c:	f001 fb6f 	bl	80095fe <_Bfree>
 8007f20:	4641      	mov	r1, r8
 8007f22:	4648      	mov	r0, r9
 8007f24:	f001 fb6b 	bl	80095fe <_Bfree>
 8007f28:	4621      	mov	r1, r4
 8007f2a:	4648      	mov	r0, r9
 8007f2c:	f001 fb67 	bl	80095fe <_Bfree>
 8007f30:	e619      	b.n	8007b66 <_strtod_l+0x63e>
 8007f32:	f1ba 0f00 	cmp.w	sl, #0
 8007f36:	d11a      	bne.n	8007f6e <_strtod_l+0xa46>
 8007f38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f3c:	b9eb      	cbnz	r3, 8007f7a <_strtod_l+0xa52>
 8007f3e:	2200      	movs	r2, #0
 8007f40:	4b3f      	ldr	r3, [pc, #252]	; (8008040 <_strtod_l+0xb18>)
 8007f42:	4630      	mov	r0, r6
 8007f44:	4639      	mov	r1, r7
 8007f46:	f7f8 fdd9 	bl	8000afc <__aeabi_dcmplt>
 8007f4a:	b9c8      	cbnz	r0, 8007f80 <_strtod_l+0xa58>
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	4639      	mov	r1, r7
 8007f50:	2200      	movs	r2, #0
 8007f52:	4b3e      	ldr	r3, [pc, #248]	; (800804c <_strtod_l+0xb24>)
 8007f54:	f7f8 fb60 	bl	8000618 <__aeabi_dmul>
 8007f58:	4606      	mov	r6, r0
 8007f5a:	460f      	mov	r7, r1
 8007f5c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007f60:	9618      	str	r6, [sp, #96]	; 0x60
 8007f62:	9319      	str	r3, [sp, #100]	; 0x64
 8007f64:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007f68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007f6c:	e79c      	b.n	8007ea8 <_strtod_l+0x980>
 8007f6e:	f1ba 0f01 	cmp.w	sl, #1
 8007f72:	d102      	bne.n	8007f7a <_strtod_l+0xa52>
 8007f74:	2d00      	cmp	r5, #0
 8007f76:	f43f ad8e 	beq.w	8007a96 <_strtod_l+0x56e>
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	4b34      	ldr	r3, [pc, #208]	; (8008050 <_strtod_l+0xb28>)
 8007f7e:	e78f      	b.n	8007ea0 <_strtod_l+0x978>
 8007f80:	2600      	movs	r6, #0
 8007f82:	4f32      	ldr	r7, [pc, #200]	; (800804c <_strtod_l+0xb24>)
 8007f84:	e7ea      	b.n	8007f5c <_strtod_l+0xa34>
 8007f86:	4b31      	ldr	r3, [pc, #196]	; (800804c <_strtod_l+0xb24>)
 8007f88:	4630      	mov	r0, r6
 8007f8a:	4639      	mov	r1, r7
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f7f8 fb43 	bl	8000618 <__aeabi_dmul>
 8007f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f94:	4606      	mov	r6, r0
 8007f96:	460f      	mov	r7, r1
 8007f98:	b933      	cbnz	r3, 8007fa8 <_strtod_l+0xa80>
 8007f9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f9e:	9010      	str	r0, [sp, #64]	; 0x40
 8007fa0:	9311      	str	r3, [sp, #68]	; 0x44
 8007fa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fa6:	e7df      	b.n	8007f68 <_strtod_l+0xa40>
 8007fa8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007fac:	e7f9      	b.n	8007fa2 <_strtod_l+0xa7a>
 8007fae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007fb2:	9b04      	ldr	r3, [sp, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1ab      	bne.n	8007f10 <_strtod_l+0x9e8>
 8007fb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007fbc:	0d1b      	lsrs	r3, r3, #20
 8007fbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007fc0:	051b      	lsls	r3, r3, #20
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	465d      	mov	r5, fp
 8007fc6:	d1a3      	bne.n	8007f10 <_strtod_l+0x9e8>
 8007fc8:	4639      	mov	r1, r7
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f7f8 fdd4 	bl	8000b78 <__aeabi_d2iz>
 8007fd0:	f7f8 fab8 	bl	8000544 <__aeabi_i2d>
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	4639      	mov	r1, r7
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f7f8 f964 	bl	80002a8 <__aeabi_dsub>
 8007fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	460f      	mov	r7, r1
 8007fe6:	b933      	cbnz	r3, 8007ff6 <_strtod_l+0xace>
 8007fe8:	f1ba 0f00 	cmp.w	sl, #0
 8007fec:	d103      	bne.n	8007ff6 <_strtod_l+0xace>
 8007fee:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007ff2:	2d00      	cmp	r5, #0
 8007ff4:	d06d      	beq.n	80080d2 <_strtod_l+0xbaa>
 8007ff6:	a30a      	add	r3, pc, #40	; (adr r3, 8008020 <_strtod_l+0xaf8>)
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	4639      	mov	r1, r7
 8008000:	f7f8 fd7c 	bl	8000afc <__aeabi_dcmplt>
 8008004:	2800      	cmp	r0, #0
 8008006:	f47f acb8 	bne.w	800797a <_strtod_l+0x452>
 800800a:	a307      	add	r3, pc, #28	; (adr r3, 8008028 <_strtod_l+0xb00>)
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	4630      	mov	r0, r6
 8008012:	4639      	mov	r1, r7
 8008014:	f7f8 fd90 	bl	8000b38 <__aeabi_dcmpgt>
 8008018:	2800      	cmp	r0, #0
 800801a:	f43f af79 	beq.w	8007f10 <_strtod_l+0x9e8>
 800801e:	e4ac      	b.n	800797a <_strtod_l+0x452>
 8008020:	94a03595 	.word	0x94a03595
 8008024:	3fdfffff 	.word	0x3fdfffff
 8008028:	35afe535 	.word	0x35afe535
 800802c:	3fe00000 	.word	0x3fe00000
 8008030:	000fffff 	.word	0x000fffff
 8008034:	7ff00000 	.word	0x7ff00000
 8008038:	7fefffff 	.word	0x7fefffff
 800803c:	39500000 	.word	0x39500000
 8008040:	3ff00000 	.word	0x3ff00000
 8008044:	7fe00000 	.word	0x7fe00000
 8008048:	7c9fffff 	.word	0x7c9fffff
 800804c:	3fe00000 	.word	0x3fe00000
 8008050:	bff00000 	.word	0xbff00000
 8008054:	9b04      	ldr	r3, [sp, #16]
 8008056:	b333      	cbz	r3, 80080a6 <_strtod_l+0xb7e>
 8008058:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800805a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800805e:	d822      	bhi.n	80080a6 <_strtod_l+0xb7e>
 8008060:	a327      	add	r3, pc, #156	; (adr r3, 8008100 <_strtod_l+0xbd8>)
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	4630      	mov	r0, r6
 8008068:	4639      	mov	r1, r7
 800806a:	f7f8 fd51 	bl	8000b10 <__aeabi_dcmple>
 800806e:	b1a0      	cbz	r0, 800809a <_strtod_l+0xb72>
 8008070:	4639      	mov	r1, r7
 8008072:	4630      	mov	r0, r6
 8008074:	f7f8 fda8 	bl	8000bc8 <__aeabi_d2uiz>
 8008078:	2800      	cmp	r0, #0
 800807a:	bf08      	it	eq
 800807c:	2001      	moveq	r0, #1
 800807e:	f7f8 fa51 	bl	8000524 <__aeabi_ui2d>
 8008082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008084:	4606      	mov	r6, r0
 8008086:	460f      	mov	r7, r1
 8008088:	bb03      	cbnz	r3, 80080cc <_strtod_l+0xba4>
 800808a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800808e:	9012      	str	r0, [sp, #72]	; 0x48
 8008090:	9313      	str	r3, [sp, #76]	; 0x4c
 8008092:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008096:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800809a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800809c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800809e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80080a2:	1a9b      	subs	r3, r3, r2
 80080a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80080a6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80080aa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80080ae:	f001 fd3d 	bl	8009b2c <__ulp>
 80080b2:	4650      	mov	r0, sl
 80080b4:	ec53 2b10 	vmov	r2, r3, d0
 80080b8:	4659      	mov	r1, fp
 80080ba:	f7f8 faad 	bl	8000618 <__aeabi_dmul>
 80080be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80080c2:	f7f8 f8f3 	bl	80002ac <__adddf3>
 80080c6:	4682      	mov	sl, r0
 80080c8:	468b      	mov	fp, r1
 80080ca:	e772      	b.n	8007fb2 <_strtod_l+0xa8a>
 80080cc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80080d0:	e7df      	b.n	8008092 <_strtod_l+0xb6a>
 80080d2:	a30d      	add	r3, pc, #52	; (adr r3, 8008108 <_strtod_l+0xbe0>)
 80080d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d8:	f7f8 fd10 	bl	8000afc <__aeabi_dcmplt>
 80080dc:	e79c      	b.n	8008018 <_strtod_l+0xaf0>
 80080de:	2300      	movs	r3, #0
 80080e0:	930d      	str	r3, [sp, #52]	; 0x34
 80080e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80080e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	f7ff ba61 	b.w	80075ae <_strtod_l+0x86>
 80080ec:	2b65      	cmp	r3, #101	; 0x65
 80080ee:	f04f 0200 	mov.w	r2, #0
 80080f2:	f43f ab4e 	beq.w	8007792 <_strtod_l+0x26a>
 80080f6:	2101      	movs	r1, #1
 80080f8:	4614      	mov	r4, r2
 80080fa:	9104      	str	r1, [sp, #16]
 80080fc:	f7ff bacb 	b.w	8007696 <_strtod_l+0x16e>
 8008100:	ffc00000 	.word	0xffc00000
 8008104:	41dfffff 	.word	0x41dfffff
 8008108:	94a03595 	.word	0x94a03595
 800810c:	3fcfffff 	.word	0x3fcfffff

08008110 <_strtod_r>:
 8008110:	4b05      	ldr	r3, [pc, #20]	; (8008128 <_strtod_r+0x18>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	b410      	push	{r4}
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	4c04      	ldr	r4, [pc, #16]	; (800812c <_strtod_r+0x1c>)
 800811a:	2b00      	cmp	r3, #0
 800811c:	bf08      	it	eq
 800811e:	4623      	moveq	r3, r4
 8008120:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008124:	f7ff ba00 	b.w	8007528 <_strtod_l>
 8008128:	20000150 	.word	0x20000150
 800812c:	200001b4 	.word	0x200001b4

08008130 <_strtol_l.isra.0>:
 8008130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008134:	4680      	mov	r8, r0
 8008136:	4689      	mov	r9, r1
 8008138:	4692      	mov	sl, r2
 800813a:	461e      	mov	r6, r3
 800813c:	460f      	mov	r7, r1
 800813e:	463d      	mov	r5, r7
 8008140:	9808      	ldr	r0, [sp, #32]
 8008142:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008146:	f001 f9ed 	bl	8009524 <__locale_ctype_ptr_l>
 800814a:	4420      	add	r0, r4
 800814c:	7843      	ldrb	r3, [r0, #1]
 800814e:	f013 0308 	ands.w	r3, r3, #8
 8008152:	d132      	bne.n	80081ba <_strtol_l.isra.0+0x8a>
 8008154:	2c2d      	cmp	r4, #45	; 0x2d
 8008156:	d132      	bne.n	80081be <_strtol_l.isra.0+0x8e>
 8008158:	787c      	ldrb	r4, [r7, #1]
 800815a:	1cbd      	adds	r5, r7, #2
 800815c:	2201      	movs	r2, #1
 800815e:	2e00      	cmp	r6, #0
 8008160:	d05d      	beq.n	800821e <_strtol_l.isra.0+0xee>
 8008162:	2e10      	cmp	r6, #16
 8008164:	d109      	bne.n	800817a <_strtol_l.isra.0+0x4a>
 8008166:	2c30      	cmp	r4, #48	; 0x30
 8008168:	d107      	bne.n	800817a <_strtol_l.isra.0+0x4a>
 800816a:	782b      	ldrb	r3, [r5, #0]
 800816c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008170:	2b58      	cmp	r3, #88	; 0x58
 8008172:	d14f      	bne.n	8008214 <_strtol_l.isra.0+0xe4>
 8008174:	786c      	ldrb	r4, [r5, #1]
 8008176:	2610      	movs	r6, #16
 8008178:	3502      	adds	r5, #2
 800817a:	2a00      	cmp	r2, #0
 800817c:	bf14      	ite	ne
 800817e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008182:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008186:	2700      	movs	r7, #0
 8008188:	fbb1 fcf6 	udiv	ip, r1, r6
 800818c:	4638      	mov	r0, r7
 800818e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008192:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008196:	2b09      	cmp	r3, #9
 8008198:	d817      	bhi.n	80081ca <_strtol_l.isra.0+0x9a>
 800819a:	461c      	mov	r4, r3
 800819c:	42a6      	cmp	r6, r4
 800819e:	dd23      	ble.n	80081e8 <_strtol_l.isra.0+0xb8>
 80081a0:	1c7b      	adds	r3, r7, #1
 80081a2:	d007      	beq.n	80081b4 <_strtol_l.isra.0+0x84>
 80081a4:	4584      	cmp	ip, r0
 80081a6:	d31c      	bcc.n	80081e2 <_strtol_l.isra.0+0xb2>
 80081a8:	d101      	bne.n	80081ae <_strtol_l.isra.0+0x7e>
 80081aa:	45a6      	cmp	lr, r4
 80081ac:	db19      	blt.n	80081e2 <_strtol_l.isra.0+0xb2>
 80081ae:	fb00 4006 	mla	r0, r0, r6, r4
 80081b2:	2701      	movs	r7, #1
 80081b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081b8:	e7eb      	b.n	8008192 <_strtol_l.isra.0+0x62>
 80081ba:	462f      	mov	r7, r5
 80081bc:	e7bf      	b.n	800813e <_strtol_l.isra.0+0xe>
 80081be:	2c2b      	cmp	r4, #43	; 0x2b
 80081c0:	bf04      	itt	eq
 80081c2:	1cbd      	addeq	r5, r7, #2
 80081c4:	787c      	ldrbeq	r4, [r7, #1]
 80081c6:	461a      	mov	r2, r3
 80081c8:	e7c9      	b.n	800815e <_strtol_l.isra.0+0x2e>
 80081ca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80081ce:	2b19      	cmp	r3, #25
 80081d0:	d801      	bhi.n	80081d6 <_strtol_l.isra.0+0xa6>
 80081d2:	3c37      	subs	r4, #55	; 0x37
 80081d4:	e7e2      	b.n	800819c <_strtol_l.isra.0+0x6c>
 80081d6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80081da:	2b19      	cmp	r3, #25
 80081dc:	d804      	bhi.n	80081e8 <_strtol_l.isra.0+0xb8>
 80081de:	3c57      	subs	r4, #87	; 0x57
 80081e0:	e7dc      	b.n	800819c <_strtol_l.isra.0+0x6c>
 80081e2:	f04f 37ff 	mov.w	r7, #4294967295
 80081e6:	e7e5      	b.n	80081b4 <_strtol_l.isra.0+0x84>
 80081e8:	1c7b      	adds	r3, r7, #1
 80081ea:	d108      	bne.n	80081fe <_strtol_l.isra.0+0xce>
 80081ec:	2322      	movs	r3, #34	; 0x22
 80081ee:	f8c8 3000 	str.w	r3, [r8]
 80081f2:	4608      	mov	r0, r1
 80081f4:	f1ba 0f00 	cmp.w	sl, #0
 80081f8:	d107      	bne.n	800820a <_strtol_l.isra.0+0xda>
 80081fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fe:	b102      	cbz	r2, 8008202 <_strtol_l.isra.0+0xd2>
 8008200:	4240      	negs	r0, r0
 8008202:	f1ba 0f00 	cmp.w	sl, #0
 8008206:	d0f8      	beq.n	80081fa <_strtol_l.isra.0+0xca>
 8008208:	b10f      	cbz	r7, 800820e <_strtol_l.isra.0+0xde>
 800820a:	f105 39ff 	add.w	r9, r5, #4294967295
 800820e:	f8ca 9000 	str.w	r9, [sl]
 8008212:	e7f2      	b.n	80081fa <_strtol_l.isra.0+0xca>
 8008214:	2430      	movs	r4, #48	; 0x30
 8008216:	2e00      	cmp	r6, #0
 8008218:	d1af      	bne.n	800817a <_strtol_l.isra.0+0x4a>
 800821a:	2608      	movs	r6, #8
 800821c:	e7ad      	b.n	800817a <_strtol_l.isra.0+0x4a>
 800821e:	2c30      	cmp	r4, #48	; 0x30
 8008220:	d0a3      	beq.n	800816a <_strtol_l.isra.0+0x3a>
 8008222:	260a      	movs	r6, #10
 8008224:	e7a9      	b.n	800817a <_strtol_l.isra.0+0x4a>
	...

08008228 <_strtol_r>:
 8008228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800822a:	4c06      	ldr	r4, [pc, #24]	; (8008244 <_strtol_r+0x1c>)
 800822c:	4d06      	ldr	r5, [pc, #24]	; (8008248 <_strtol_r+0x20>)
 800822e:	6824      	ldr	r4, [r4, #0]
 8008230:	6a24      	ldr	r4, [r4, #32]
 8008232:	2c00      	cmp	r4, #0
 8008234:	bf08      	it	eq
 8008236:	462c      	moveq	r4, r5
 8008238:	9400      	str	r4, [sp, #0]
 800823a:	f7ff ff79 	bl	8008130 <_strtol_l.isra.0>
 800823e:	b003      	add	sp, #12
 8008240:	bd30      	pop	{r4, r5, pc}
 8008242:	bf00      	nop
 8008244:	20000150 	.word	0x20000150
 8008248:	200001b4 	.word	0x200001b4

0800824c <quorem>:
 800824c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008250:	6903      	ldr	r3, [r0, #16]
 8008252:	690c      	ldr	r4, [r1, #16]
 8008254:	42a3      	cmp	r3, r4
 8008256:	4680      	mov	r8, r0
 8008258:	f2c0 8082 	blt.w	8008360 <quorem+0x114>
 800825c:	3c01      	subs	r4, #1
 800825e:	f101 0714 	add.w	r7, r1, #20
 8008262:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008266:	f100 0614 	add.w	r6, r0, #20
 800826a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800826e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008272:	eb06 030c 	add.w	r3, r6, ip
 8008276:	3501      	adds	r5, #1
 8008278:	eb07 090c 	add.w	r9, r7, ip
 800827c:	9301      	str	r3, [sp, #4]
 800827e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008282:	b395      	cbz	r5, 80082ea <quorem+0x9e>
 8008284:	f04f 0a00 	mov.w	sl, #0
 8008288:	4638      	mov	r0, r7
 800828a:	46b6      	mov	lr, r6
 800828c:	46d3      	mov	fp, sl
 800828e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008292:	b293      	uxth	r3, r2
 8008294:	fb05 a303 	mla	r3, r5, r3, sl
 8008298:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800829c:	b29b      	uxth	r3, r3
 800829e:	ebab 0303 	sub.w	r3, fp, r3
 80082a2:	0c12      	lsrs	r2, r2, #16
 80082a4:	f8de b000 	ldr.w	fp, [lr]
 80082a8:	fb05 a202 	mla	r2, r5, r2, sl
 80082ac:	fa13 f38b 	uxtah	r3, r3, fp
 80082b0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80082b4:	fa1f fb82 	uxth.w	fp, r2
 80082b8:	f8de 2000 	ldr.w	r2, [lr]
 80082bc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80082c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082ca:	4581      	cmp	r9, r0
 80082cc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80082d0:	f84e 3b04 	str.w	r3, [lr], #4
 80082d4:	d2db      	bcs.n	800828e <quorem+0x42>
 80082d6:	f856 300c 	ldr.w	r3, [r6, ip]
 80082da:	b933      	cbnz	r3, 80082ea <quorem+0x9e>
 80082dc:	9b01      	ldr	r3, [sp, #4]
 80082de:	3b04      	subs	r3, #4
 80082e0:	429e      	cmp	r6, r3
 80082e2:	461a      	mov	r2, r3
 80082e4:	d330      	bcc.n	8008348 <quorem+0xfc>
 80082e6:	f8c8 4010 	str.w	r4, [r8, #16]
 80082ea:	4640      	mov	r0, r8
 80082ec:	f001 fba6 	bl	8009a3c <__mcmp>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	db25      	blt.n	8008340 <quorem+0xf4>
 80082f4:	3501      	adds	r5, #1
 80082f6:	4630      	mov	r0, r6
 80082f8:	f04f 0c00 	mov.w	ip, #0
 80082fc:	f857 2b04 	ldr.w	r2, [r7], #4
 8008300:	f8d0 e000 	ldr.w	lr, [r0]
 8008304:	b293      	uxth	r3, r2
 8008306:	ebac 0303 	sub.w	r3, ip, r3
 800830a:	0c12      	lsrs	r2, r2, #16
 800830c:	fa13 f38e 	uxtah	r3, r3, lr
 8008310:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008314:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008318:	b29b      	uxth	r3, r3
 800831a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800831e:	45b9      	cmp	r9, r7
 8008320:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008324:	f840 3b04 	str.w	r3, [r0], #4
 8008328:	d2e8      	bcs.n	80082fc <quorem+0xb0>
 800832a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800832e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008332:	b92a      	cbnz	r2, 8008340 <quorem+0xf4>
 8008334:	3b04      	subs	r3, #4
 8008336:	429e      	cmp	r6, r3
 8008338:	461a      	mov	r2, r3
 800833a:	d30b      	bcc.n	8008354 <quorem+0x108>
 800833c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008340:	4628      	mov	r0, r5
 8008342:	b003      	add	sp, #12
 8008344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008348:	6812      	ldr	r2, [r2, #0]
 800834a:	3b04      	subs	r3, #4
 800834c:	2a00      	cmp	r2, #0
 800834e:	d1ca      	bne.n	80082e6 <quorem+0x9a>
 8008350:	3c01      	subs	r4, #1
 8008352:	e7c5      	b.n	80082e0 <quorem+0x94>
 8008354:	6812      	ldr	r2, [r2, #0]
 8008356:	3b04      	subs	r3, #4
 8008358:	2a00      	cmp	r2, #0
 800835a:	d1ef      	bne.n	800833c <quorem+0xf0>
 800835c:	3c01      	subs	r4, #1
 800835e:	e7ea      	b.n	8008336 <quorem+0xea>
 8008360:	2000      	movs	r0, #0
 8008362:	e7ee      	b.n	8008342 <quorem+0xf6>
 8008364:	0000      	movs	r0, r0
	...

08008368 <_dtoa_r>:
 8008368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836c:	ec57 6b10 	vmov	r6, r7, d0
 8008370:	b097      	sub	sp, #92	; 0x5c
 8008372:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008374:	9106      	str	r1, [sp, #24]
 8008376:	4604      	mov	r4, r0
 8008378:	920b      	str	r2, [sp, #44]	; 0x2c
 800837a:	9312      	str	r3, [sp, #72]	; 0x48
 800837c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008380:	e9cd 6700 	strd	r6, r7, [sp]
 8008384:	b93d      	cbnz	r5, 8008396 <_dtoa_r+0x2e>
 8008386:	2010      	movs	r0, #16
 8008388:	f001 f8e0 	bl	800954c <malloc>
 800838c:	6260      	str	r0, [r4, #36]	; 0x24
 800838e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008392:	6005      	str	r5, [r0, #0]
 8008394:	60c5      	str	r5, [r0, #12]
 8008396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008398:	6819      	ldr	r1, [r3, #0]
 800839a:	b151      	cbz	r1, 80083b2 <_dtoa_r+0x4a>
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	604a      	str	r2, [r1, #4]
 80083a0:	2301      	movs	r3, #1
 80083a2:	4093      	lsls	r3, r2
 80083a4:	608b      	str	r3, [r1, #8]
 80083a6:	4620      	mov	r0, r4
 80083a8:	f001 f929 	bl	80095fe <_Bfree>
 80083ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083ae:	2200      	movs	r2, #0
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	1e3b      	subs	r3, r7, #0
 80083b4:	bfbb      	ittet	lt
 80083b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083ba:	9301      	strlt	r3, [sp, #4]
 80083bc:	2300      	movge	r3, #0
 80083be:	2201      	movlt	r2, #1
 80083c0:	bfac      	ite	ge
 80083c2:	f8c8 3000 	strge.w	r3, [r8]
 80083c6:	f8c8 2000 	strlt.w	r2, [r8]
 80083ca:	4baf      	ldr	r3, [pc, #700]	; (8008688 <_dtoa_r+0x320>)
 80083cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80083d0:	ea33 0308 	bics.w	r3, r3, r8
 80083d4:	d114      	bne.n	8008400 <_dtoa_r+0x98>
 80083d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	9b00      	ldr	r3, [sp, #0]
 80083e0:	b923      	cbnz	r3, 80083ec <_dtoa_r+0x84>
 80083e2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80083e6:	2800      	cmp	r0, #0
 80083e8:	f000 8542 	beq.w	8008e70 <_dtoa_r+0xb08>
 80083ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083ee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800869c <_dtoa_r+0x334>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 8544 	beq.w	8008e80 <_dtoa_r+0xb18>
 80083f8:	f10b 0303 	add.w	r3, fp, #3
 80083fc:	f000 bd3e 	b.w	8008e7c <_dtoa_r+0xb14>
 8008400:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008404:	2200      	movs	r2, #0
 8008406:	2300      	movs	r3, #0
 8008408:	4630      	mov	r0, r6
 800840a:	4639      	mov	r1, r7
 800840c:	f7f8 fb6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008410:	4681      	mov	r9, r0
 8008412:	b168      	cbz	r0, 8008430 <_dtoa_r+0xc8>
 8008414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008416:	2301      	movs	r3, #1
 8008418:	6013      	str	r3, [r2, #0]
 800841a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 8524 	beq.w	8008e6a <_dtoa_r+0xb02>
 8008422:	4b9a      	ldr	r3, [pc, #616]	; (800868c <_dtoa_r+0x324>)
 8008424:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008426:	f103 3bff 	add.w	fp, r3, #4294967295
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	f000 bd28 	b.w	8008e80 <_dtoa_r+0xb18>
 8008430:	aa14      	add	r2, sp, #80	; 0x50
 8008432:	a915      	add	r1, sp, #84	; 0x54
 8008434:	ec47 6b10 	vmov	d0, r6, r7
 8008438:	4620      	mov	r0, r4
 800843a:	f001 fbed 	bl	8009c18 <__d2b>
 800843e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008442:	9004      	str	r0, [sp, #16]
 8008444:	2d00      	cmp	r5, #0
 8008446:	d07c      	beq.n	8008542 <_dtoa_r+0x1da>
 8008448:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800844c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008450:	46b2      	mov	sl, r6
 8008452:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008456:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800845a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800845e:	2200      	movs	r2, #0
 8008460:	4b8b      	ldr	r3, [pc, #556]	; (8008690 <_dtoa_r+0x328>)
 8008462:	4650      	mov	r0, sl
 8008464:	4659      	mov	r1, fp
 8008466:	f7f7 ff1f 	bl	80002a8 <__aeabi_dsub>
 800846a:	a381      	add	r3, pc, #516	; (adr r3, 8008670 <_dtoa_r+0x308>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f7f8 f8d2 	bl	8000618 <__aeabi_dmul>
 8008474:	a380      	add	r3, pc, #512	; (adr r3, 8008678 <_dtoa_r+0x310>)
 8008476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847a:	f7f7 ff17 	bl	80002ac <__adddf3>
 800847e:	4606      	mov	r6, r0
 8008480:	4628      	mov	r0, r5
 8008482:	460f      	mov	r7, r1
 8008484:	f7f8 f85e 	bl	8000544 <__aeabi_i2d>
 8008488:	a37d      	add	r3, pc, #500	; (adr r3, 8008680 <_dtoa_r+0x318>)
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	f7f8 f8c3 	bl	8000618 <__aeabi_dmul>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	4630      	mov	r0, r6
 8008498:	4639      	mov	r1, r7
 800849a:	f7f7 ff07 	bl	80002ac <__adddf3>
 800849e:	4606      	mov	r6, r0
 80084a0:	460f      	mov	r7, r1
 80084a2:	f7f8 fb69 	bl	8000b78 <__aeabi_d2iz>
 80084a6:	2200      	movs	r2, #0
 80084a8:	4682      	mov	sl, r0
 80084aa:	2300      	movs	r3, #0
 80084ac:	4630      	mov	r0, r6
 80084ae:	4639      	mov	r1, r7
 80084b0:	f7f8 fb24 	bl	8000afc <__aeabi_dcmplt>
 80084b4:	b148      	cbz	r0, 80084ca <_dtoa_r+0x162>
 80084b6:	4650      	mov	r0, sl
 80084b8:	f7f8 f844 	bl	8000544 <__aeabi_i2d>
 80084bc:	4632      	mov	r2, r6
 80084be:	463b      	mov	r3, r7
 80084c0:	f7f8 fb12 	bl	8000ae8 <__aeabi_dcmpeq>
 80084c4:	b908      	cbnz	r0, 80084ca <_dtoa_r+0x162>
 80084c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084ca:	f1ba 0f16 	cmp.w	sl, #22
 80084ce:	d859      	bhi.n	8008584 <_dtoa_r+0x21c>
 80084d0:	4970      	ldr	r1, [pc, #448]	; (8008694 <_dtoa_r+0x32c>)
 80084d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80084d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084de:	f7f8 fb2b 	bl	8000b38 <__aeabi_dcmpgt>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	d050      	beq.n	8008588 <_dtoa_r+0x220>
 80084e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084ea:	2300      	movs	r3, #0
 80084ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80084ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084f0:	1b5d      	subs	r5, r3, r5
 80084f2:	f1b5 0801 	subs.w	r8, r5, #1
 80084f6:	bf49      	itett	mi
 80084f8:	f1c5 0301 	rsbmi	r3, r5, #1
 80084fc:	2300      	movpl	r3, #0
 80084fe:	9305      	strmi	r3, [sp, #20]
 8008500:	f04f 0800 	movmi.w	r8, #0
 8008504:	bf58      	it	pl
 8008506:	9305      	strpl	r3, [sp, #20]
 8008508:	f1ba 0f00 	cmp.w	sl, #0
 800850c:	db3e      	blt.n	800858c <_dtoa_r+0x224>
 800850e:	2300      	movs	r3, #0
 8008510:	44d0      	add	r8, sl
 8008512:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008516:	9307      	str	r3, [sp, #28]
 8008518:	9b06      	ldr	r3, [sp, #24]
 800851a:	2b09      	cmp	r3, #9
 800851c:	f200 8090 	bhi.w	8008640 <_dtoa_r+0x2d8>
 8008520:	2b05      	cmp	r3, #5
 8008522:	bfc4      	itt	gt
 8008524:	3b04      	subgt	r3, #4
 8008526:	9306      	strgt	r3, [sp, #24]
 8008528:	9b06      	ldr	r3, [sp, #24]
 800852a:	f1a3 0302 	sub.w	r3, r3, #2
 800852e:	bfcc      	ite	gt
 8008530:	2500      	movgt	r5, #0
 8008532:	2501      	movle	r5, #1
 8008534:	2b03      	cmp	r3, #3
 8008536:	f200 808f 	bhi.w	8008658 <_dtoa_r+0x2f0>
 800853a:	e8df f003 	tbb	[pc, r3]
 800853e:	7f7d      	.short	0x7f7d
 8008540:	7131      	.short	0x7131
 8008542:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008546:	441d      	add	r5, r3
 8008548:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800854c:	2820      	cmp	r0, #32
 800854e:	dd13      	ble.n	8008578 <_dtoa_r+0x210>
 8008550:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008554:	9b00      	ldr	r3, [sp, #0]
 8008556:	fa08 f800 	lsl.w	r8, r8, r0
 800855a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800855e:	fa23 f000 	lsr.w	r0, r3, r0
 8008562:	ea48 0000 	orr.w	r0, r8, r0
 8008566:	f7f7 ffdd 	bl	8000524 <__aeabi_ui2d>
 800856a:	2301      	movs	r3, #1
 800856c:	4682      	mov	sl, r0
 800856e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008572:	3d01      	subs	r5, #1
 8008574:	9313      	str	r3, [sp, #76]	; 0x4c
 8008576:	e772      	b.n	800845e <_dtoa_r+0xf6>
 8008578:	9b00      	ldr	r3, [sp, #0]
 800857a:	f1c0 0020 	rsb	r0, r0, #32
 800857e:	fa03 f000 	lsl.w	r0, r3, r0
 8008582:	e7f0      	b.n	8008566 <_dtoa_r+0x1fe>
 8008584:	2301      	movs	r3, #1
 8008586:	e7b1      	b.n	80084ec <_dtoa_r+0x184>
 8008588:	900f      	str	r0, [sp, #60]	; 0x3c
 800858a:	e7b0      	b.n	80084ee <_dtoa_r+0x186>
 800858c:	9b05      	ldr	r3, [sp, #20]
 800858e:	eba3 030a 	sub.w	r3, r3, sl
 8008592:	9305      	str	r3, [sp, #20]
 8008594:	f1ca 0300 	rsb	r3, sl, #0
 8008598:	9307      	str	r3, [sp, #28]
 800859a:	2300      	movs	r3, #0
 800859c:	930e      	str	r3, [sp, #56]	; 0x38
 800859e:	e7bb      	b.n	8008518 <_dtoa_r+0x1b0>
 80085a0:	2301      	movs	r3, #1
 80085a2:	930a      	str	r3, [sp, #40]	; 0x28
 80085a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	dd59      	ble.n	800865e <_dtoa_r+0x2f6>
 80085aa:	9302      	str	r3, [sp, #8]
 80085ac:	4699      	mov	r9, r3
 80085ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085b0:	2200      	movs	r2, #0
 80085b2:	6072      	str	r2, [r6, #4]
 80085b4:	2204      	movs	r2, #4
 80085b6:	f102 0014 	add.w	r0, r2, #20
 80085ba:	4298      	cmp	r0, r3
 80085bc:	6871      	ldr	r1, [r6, #4]
 80085be:	d953      	bls.n	8008668 <_dtoa_r+0x300>
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 ffe8 	bl	8009596 <_Balloc>
 80085c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085c8:	6030      	str	r0, [r6, #0]
 80085ca:	f1b9 0f0e 	cmp.w	r9, #14
 80085ce:	f8d3 b000 	ldr.w	fp, [r3]
 80085d2:	f200 80e6 	bhi.w	80087a2 <_dtoa_r+0x43a>
 80085d6:	2d00      	cmp	r5, #0
 80085d8:	f000 80e3 	beq.w	80087a2 <_dtoa_r+0x43a>
 80085dc:	ed9d 7b00 	vldr	d7, [sp]
 80085e0:	f1ba 0f00 	cmp.w	sl, #0
 80085e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80085e8:	dd74      	ble.n	80086d4 <_dtoa_r+0x36c>
 80085ea:	4a2a      	ldr	r2, [pc, #168]	; (8008694 <_dtoa_r+0x32c>)
 80085ec:	f00a 030f 	and.w	r3, sl, #15
 80085f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80085f4:	ed93 7b00 	vldr	d7, [r3]
 80085f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80085fc:	06f0      	lsls	r0, r6, #27
 80085fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008602:	d565      	bpl.n	80086d0 <_dtoa_r+0x368>
 8008604:	4b24      	ldr	r3, [pc, #144]	; (8008698 <_dtoa_r+0x330>)
 8008606:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800860a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800860e:	f7f8 f92d 	bl	800086c <__aeabi_ddiv>
 8008612:	e9cd 0100 	strd	r0, r1, [sp]
 8008616:	f006 060f 	and.w	r6, r6, #15
 800861a:	2503      	movs	r5, #3
 800861c:	4f1e      	ldr	r7, [pc, #120]	; (8008698 <_dtoa_r+0x330>)
 800861e:	e04c      	b.n	80086ba <_dtoa_r+0x352>
 8008620:	2301      	movs	r3, #1
 8008622:	930a      	str	r3, [sp, #40]	; 0x28
 8008624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008626:	4453      	add	r3, sl
 8008628:	f103 0901 	add.w	r9, r3, #1
 800862c:	9302      	str	r3, [sp, #8]
 800862e:	464b      	mov	r3, r9
 8008630:	2b01      	cmp	r3, #1
 8008632:	bfb8      	it	lt
 8008634:	2301      	movlt	r3, #1
 8008636:	e7ba      	b.n	80085ae <_dtoa_r+0x246>
 8008638:	2300      	movs	r3, #0
 800863a:	e7b2      	b.n	80085a2 <_dtoa_r+0x23a>
 800863c:	2300      	movs	r3, #0
 800863e:	e7f0      	b.n	8008622 <_dtoa_r+0x2ba>
 8008640:	2501      	movs	r5, #1
 8008642:	2300      	movs	r3, #0
 8008644:	9306      	str	r3, [sp, #24]
 8008646:	950a      	str	r5, [sp, #40]	; 0x28
 8008648:	f04f 33ff 	mov.w	r3, #4294967295
 800864c:	9302      	str	r3, [sp, #8]
 800864e:	4699      	mov	r9, r3
 8008650:	2200      	movs	r2, #0
 8008652:	2312      	movs	r3, #18
 8008654:	920b      	str	r2, [sp, #44]	; 0x2c
 8008656:	e7aa      	b.n	80085ae <_dtoa_r+0x246>
 8008658:	2301      	movs	r3, #1
 800865a:	930a      	str	r3, [sp, #40]	; 0x28
 800865c:	e7f4      	b.n	8008648 <_dtoa_r+0x2e0>
 800865e:	2301      	movs	r3, #1
 8008660:	9302      	str	r3, [sp, #8]
 8008662:	4699      	mov	r9, r3
 8008664:	461a      	mov	r2, r3
 8008666:	e7f5      	b.n	8008654 <_dtoa_r+0x2ec>
 8008668:	3101      	adds	r1, #1
 800866a:	6071      	str	r1, [r6, #4]
 800866c:	0052      	lsls	r2, r2, #1
 800866e:	e7a2      	b.n	80085b6 <_dtoa_r+0x24e>
 8008670:	636f4361 	.word	0x636f4361
 8008674:	3fd287a7 	.word	0x3fd287a7
 8008678:	8b60c8b3 	.word	0x8b60c8b3
 800867c:	3fc68a28 	.word	0x3fc68a28
 8008680:	509f79fb 	.word	0x509f79fb
 8008684:	3fd34413 	.word	0x3fd34413
 8008688:	7ff00000 	.word	0x7ff00000
 800868c:	0800cec1 	.word	0x0800cec1
 8008690:	3ff80000 	.word	0x3ff80000
 8008694:	0800cf80 	.word	0x0800cf80
 8008698:	0800cf58 	.word	0x0800cf58
 800869c:	0800cf49 	.word	0x0800cf49
 80086a0:	07f1      	lsls	r1, r6, #31
 80086a2:	d508      	bpl.n	80086b6 <_dtoa_r+0x34e>
 80086a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ac:	f7f7 ffb4 	bl	8000618 <__aeabi_dmul>
 80086b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086b4:	3501      	adds	r5, #1
 80086b6:	1076      	asrs	r6, r6, #1
 80086b8:	3708      	adds	r7, #8
 80086ba:	2e00      	cmp	r6, #0
 80086bc:	d1f0      	bne.n	80086a0 <_dtoa_r+0x338>
 80086be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80086c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086c6:	f7f8 f8d1 	bl	800086c <__aeabi_ddiv>
 80086ca:	e9cd 0100 	strd	r0, r1, [sp]
 80086ce:	e01a      	b.n	8008706 <_dtoa_r+0x39e>
 80086d0:	2502      	movs	r5, #2
 80086d2:	e7a3      	b.n	800861c <_dtoa_r+0x2b4>
 80086d4:	f000 80a0 	beq.w	8008818 <_dtoa_r+0x4b0>
 80086d8:	f1ca 0600 	rsb	r6, sl, #0
 80086dc:	4b9f      	ldr	r3, [pc, #636]	; (800895c <_dtoa_r+0x5f4>)
 80086de:	4fa0      	ldr	r7, [pc, #640]	; (8008960 <_dtoa_r+0x5f8>)
 80086e0:	f006 020f 	and.w	r2, r6, #15
 80086e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80086f0:	f7f7 ff92 	bl	8000618 <__aeabi_dmul>
 80086f4:	e9cd 0100 	strd	r0, r1, [sp]
 80086f8:	1136      	asrs	r6, r6, #4
 80086fa:	2300      	movs	r3, #0
 80086fc:	2502      	movs	r5, #2
 80086fe:	2e00      	cmp	r6, #0
 8008700:	d17f      	bne.n	8008802 <_dtoa_r+0x49a>
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e1      	bne.n	80086ca <_dtoa_r+0x362>
 8008706:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 8087 	beq.w	800881c <_dtoa_r+0x4b4>
 800870e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008712:	2200      	movs	r2, #0
 8008714:	4b93      	ldr	r3, [pc, #588]	; (8008964 <_dtoa_r+0x5fc>)
 8008716:	4630      	mov	r0, r6
 8008718:	4639      	mov	r1, r7
 800871a:	f7f8 f9ef 	bl	8000afc <__aeabi_dcmplt>
 800871e:	2800      	cmp	r0, #0
 8008720:	d07c      	beq.n	800881c <_dtoa_r+0x4b4>
 8008722:	f1b9 0f00 	cmp.w	r9, #0
 8008726:	d079      	beq.n	800881c <_dtoa_r+0x4b4>
 8008728:	9b02      	ldr	r3, [sp, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	dd35      	ble.n	800879a <_dtoa_r+0x432>
 800872e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008732:	9308      	str	r3, [sp, #32]
 8008734:	4639      	mov	r1, r7
 8008736:	2200      	movs	r2, #0
 8008738:	4b8b      	ldr	r3, [pc, #556]	; (8008968 <_dtoa_r+0x600>)
 800873a:	4630      	mov	r0, r6
 800873c:	f7f7 ff6c 	bl	8000618 <__aeabi_dmul>
 8008740:	e9cd 0100 	strd	r0, r1, [sp]
 8008744:	9f02      	ldr	r7, [sp, #8]
 8008746:	3501      	adds	r5, #1
 8008748:	4628      	mov	r0, r5
 800874a:	f7f7 fefb 	bl	8000544 <__aeabi_i2d>
 800874e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008752:	f7f7 ff61 	bl	8000618 <__aeabi_dmul>
 8008756:	2200      	movs	r2, #0
 8008758:	4b84      	ldr	r3, [pc, #528]	; (800896c <_dtoa_r+0x604>)
 800875a:	f7f7 fda7 	bl	80002ac <__adddf3>
 800875e:	4605      	mov	r5, r0
 8008760:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008764:	2f00      	cmp	r7, #0
 8008766:	d15d      	bne.n	8008824 <_dtoa_r+0x4bc>
 8008768:	2200      	movs	r2, #0
 800876a:	4b81      	ldr	r3, [pc, #516]	; (8008970 <_dtoa_r+0x608>)
 800876c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008770:	f7f7 fd9a 	bl	80002a8 <__aeabi_dsub>
 8008774:	462a      	mov	r2, r5
 8008776:	4633      	mov	r3, r6
 8008778:	e9cd 0100 	strd	r0, r1, [sp]
 800877c:	f7f8 f9dc 	bl	8000b38 <__aeabi_dcmpgt>
 8008780:	2800      	cmp	r0, #0
 8008782:	f040 8288 	bne.w	8008c96 <_dtoa_r+0x92e>
 8008786:	462a      	mov	r2, r5
 8008788:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800878c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008790:	f7f8 f9b4 	bl	8000afc <__aeabi_dcmplt>
 8008794:	2800      	cmp	r0, #0
 8008796:	f040 827c 	bne.w	8008c92 <_dtoa_r+0x92a>
 800879a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800879e:	e9cd 2300 	strd	r2, r3, [sp]
 80087a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f2c0 8150 	blt.w	8008a4a <_dtoa_r+0x6e2>
 80087aa:	f1ba 0f0e 	cmp.w	sl, #14
 80087ae:	f300 814c 	bgt.w	8008a4a <_dtoa_r+0x6e2>
 80087b2:	4b6a      	ldr	r3, [pc, #424]	; (800895c <_dtoa_r+0x5f4>)
 80087b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80087b8:	ed93 7b00 	vldr	d7, [r3]
 80087bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80087c4:	f280 80d8 	bge.w	8008978 <_dtoa_r+0x610>
 80087c8:	f1b9 0f00 	cmp.w	r9, #0
 80087cc:	f300 80d4 	bgt.w	8008978 <_dtoa_r+0x610>
 80087d0:	f040 825e 	bne.w	8008c90 <_dtoa_r+0x928>
 80087d4:	2200      	movs	r2, #0
 80087d6:	4b66      	ldr	r3, [pc, #408]	; (8008970 <_dtoa_r+0x608>)
 80087d8:	ec51 0b17 	vmov	r0, r1, d7
 80087dc:	f7f7 ff1c 	bl	8000618 <__aeabi_dmul>
 80087e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087e4:	f7f8 f99e 	bl	8000b24 <__aeabi_dcmpge>
 80087e8:	464f      	mov	r7, r9
 80087ea:	464e      	mov	r6, r9
 80087ec:	2800      	cmp	r0, #0
 80087ee:	f040 8234 	bne.w	8008c5a <_dtoa_r+0x8f2>
 80087f2:	2331      	movs	r3, #49	; 0x31
 80087f4:	f10b 0501 	add.w	r5, fp, #1
 80087f8:	f88b 3000 	strb.w	r3, [fp]
 80087fc:	f10a 0a01 	add.w	sl, sl, #1
 8008800:	e22f      	b.n	8008c62 <_dtoa_r+0x8fa>
 8008802:	07f2      	lsls	r2, r6, #31
 8008804:	d505      	bpl.n	8008812 <_dtoa_r+0x4aa>
 8008806:	e9d7 2300 	ldrd	r2, r3, [r7]
 800880a:	f7f7 ff05 	bl	8000618 <__aeabi_dmul>
 800880e:	3501      	adds	r5, #1
 8008810:	2301      	movs	r3, #1
 8008812:	1076      	asrs	r6, r6, #1
 8008814:	3708      	adds	r7, #8
 8008816:	e772      	b.n	80086fe <_dtoa_r+0x396>
 8008818:	2502      	movs	r5, #2
 800881a:	e774      	b.n	8008706 <_dtoa_r+0x39e>
 800881c:	f8cd a020 	str.w	sl, [sp, #32]
 8008820:	464f      	mov	r7, r9
 8008822:	e791      	b.n	8008748 <_dtoa_r+0x3e0>
 8008824:	4b4d      	ldr	r3, [pc, #308]	; (800895c <_dtoa_r+0x5f4>)
 8008826:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800882a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800882e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008830:	2b00      	cmp	r3, #0
 8008832:	d047      	beq.n	80088c4 <_dtoa_r+0x55c>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	2000      	movs	r0, #0
 800883a:	494e      	ldr	r1, [pc, #312]	; (8008974 <_dtoa_r+0x60c>)
 800883c:	f7f8 f816 	bl	800086c <__aeabi_ddiv>
 8008840:	462a      	mov	r2, r5
 8008842:	4633      	mov	r3, r6
 8008844:	f7f7 fd30 	bl	80002a8 <__aeabi_dsub>
 8008848:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800884c:	465d      	mov	r5, fp
 800884e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008852:	f7f8 f991 	bl	8000b78 <__aeabi_d2iz>
 8008856:	4606      	mov	r6, r0
 8008858:	f7f7 fe74 	bl	8000544 <__aeabi_i2d>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008864:	f7f7 fd20 	bl	80002a8 <__aeabi_dsub>
 8008868:	3630      	adds	r6, #48	; 0x30
 800886a:	f805 6b01 	strb.w	r6, [r5], #1
 800886e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008872:	e9cd 0100 	strd	r0, r1, [sp]
 8008876:	f7f8 f941 	bl	8000afc <__aeabi_dcmplt>
 800887a:	2800      	cmp	r0, #0
 800887c:	d163      	bne.n	8008946 <_dtoa_r+0x5de>
 800887e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008882:	2000      	movs	r0, #0
 8008884:	4937      	ldr	r1, [pc, #220]	; (8008964 <_dtoa_r+0x5fc>)
 8008886:	f7f7 fd0f 	bl	80002a8 <__aeabi_dsub>
 800888a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800888e:	f7f8 f935 	bl	8000afc <__aeabi_dcmplt>
 8008892:	2800      	cmp	r0, #0
 8008894:	f040 80b7 	bne.w	8008a06 <_dtoa_r+0x69e>
 8008898:	eba5 030b 	sub.w	r3, r5, fp
 800889c:	429f      	cmp	r7, r3
 800889e:	f77f af7c 	ble.w	800879a <_dtoa_r+0x432>
 80088a2:	2200      	movs	r2, #0
 80088a4:	4b30      	ldr	r3, [pc, #192]	; (8008968 <_dtoa_r+0x600>)
 80088a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088aa:	f7f7 feb5 	bl	8000618 <__aeabi_dmul>
 80088ae:	2200      	movs	r2, #0
 80088b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80088b4:	4b2c      	ldr	r3, [pc, #176]	; (8008968 <_dtoa_r+0x600>)
 80088b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088ba:	f7f7 fead 	bl	8000618 <__aeabi_dmul>
 80088be:	e9cd 0100 	strd	r0, r1, [sp]
 80088c2:	e7c4      	b.n	800884e <_dtoa_r+0x4e6>
 80088c4:	462a      	mov	r2, r5
 80088c6:	4633      	mov	r3, r6
 80088c8:	f7f7 fea6 	bl	8000618 <__aeabi_dmul>
 80088cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80088d0:	eb0b 0507 	add.w	r5, fp, r7
 80088d4:	465e      	mov	r6, fp
 80088d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088da:	f7f8 f94d 	bl	8000b78 <__aeabi_d2iz>
 80088de:	4607      	mov	r7, r0
 80088e0:	f7f7 fe30 	bl	8000544 <__aeabi_i2d>
 80088e4:	3730      	adds	r7, #48	; 0x30
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088ee:	f7f7 fcdb 	bl	80002a8 <__aeabi_dsub>
 80088f2:	f806 7b01 	strb.w	r7, [r6], #1
 80088f6:	42ae      	cmp	r6, r5
 80088f8:	e9cd 0100 	strd	r0, r1, [sp]
 80088fc:	f04f 0200 	mov.w	r2, #0
 8008900:	d126      	bne.n	8008950 <_dtoa_r+0x5e8>
 8008902:	4b1c      	ldr	r3, [pc, #112]	; (8008974 <_dtoa_r+0x60c>)
 8008904:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008908:	f7f7 fcd0 	bl	80002ac <__adddf3>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008914:	f7f8 f910 	bl	8000b38 <__aeabi_dcmpgt>
 8008918:	2800      	cmp	r0, #0
 800891a:	d174      	bne.n	8008a06 <_dtoa_r+0x69e>
 800891c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008920:	2000      	movs	r0, #0
 8008922:	4914      	ldr	r1, [pc, #80]	; (8008974 <_dtoa_r+0x60c>)
 8008924:	f7f7 fcc0 	bl	80002a8 <__aeabi_dsub>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008930:	f7f8 f8e4 	bl	8000afc <__aeabi_dcmplt>
 8008934:	2800      	cmp	r0, #0
 8008936:	f43f af30 	beq.w	800879a <_dtoa_r+0x432>
 800893a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800893e:	2b30      	cmp	r3, #48	; 0x30
 8008940:	f105 32ff 	add.w	r2, r5, #4294967295
 8008944:	d002      	beq.n	800894c <_dtoa_r+0x5e4>
 8008946:	f8dd a020 	ldr.w	sl, [sp, #32]
 800894a:	e04a      	b.n	80089e2 <_dtoa_r+0x67a>
 800894c:	4615      	mov	r5, r2
 800894e:	e7f4      	b.n	800893a <_dtoa_r+0x5d2>
 8008950:	4b05      	ldr	r3, [pc, #20]	; (8008968 <_dtoa_r+0x600>)
 8008952:	f7f7 fe61 	bl	8000618 <__aeabi_dmul>
 8008956:	e9cd 0100 	strd	r0, r1, [sp]
 800895a:	e7bc      	b.n	80088d6 <_dtoa_r+0x56e>
 800895c:	0800cf80 	.word	0x0800cf80
 8008960:	0800cf58 	.word	0x0800cf58
 8008964:	3ff00000 	.word	0x3ff00000
 8008968:	40240000 	.word	0x40240000
 800896c:	401c0000 	.word	0x401c0000
 8008970:	40140000 	.word	0x40140000
 8008974:	3fe00000 	.word	0x3fe00000
 8008978:	e9dd 6700 	ldrd	r6, r7, [sp]
 800897c:	465d      	mov	r5, fp
 800897e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008982:	4630      	mov	r0, r6
 8008984:	4639      	mov	r1, r7
 8008986:	f7f7 ff71 	bl	800086c <__aeabi_ddiv>
 800898a:	f7f8 f8f5 	bl	8000b78 <__aeabi_d2iz>
 800898e:	4680      	mov	r8, r0
 8008990:	f7f7 fdd8 	bl	8000544 <__aeabi_i2d>
 8008994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008998:	f7f7 fe3e 	bl	8000618 <__aeabi_dmul>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4630      	mov	r0, r6
 80089a2:	4639      	mov	r1, r7
 80089a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80089a8:	f7f7 fc7e 	bl	80002a8 <__aeabi_dsub>
 80089ac:	f805 6b01 	strb.w	r6, [r5], #1
 80089b0:	eba5 060b 	sub.w	r6, r5, fp
 80089b4:	45b1      	cmp	r9, r6
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	d139      	bne.n	8008a30 <_dtoa_r+0x6c8>
 80089bc:	f7f7 fc76 	bl	80002ac <__adddf3>
 80089c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089c4:	4606      	mov	r6, r0
 80089c6:	460f      	mov	r7, r1
 80089c8:	f7f8 f8b6 	bl	8000b38 <__aeabi_dcmpgt>
 80089cc:	b9c8      	cbnz	r0, 8008a02 <_dtoa_r+0x69a>
 80089ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089d2:	4630      	mov	r0, r6
 80089d4:	4639      	mov	r1, r7
 80089d6:	f7f8 f887 	bl	8000ae8 <__aeabi_dcmpeq>
 80089da:	b110      	cbz	r0, 80089e2 <_dtoa_r+0x67a>
 80089dc:	f018 0f01 	tst.w	r8, #1
 80089e0:	d10f      	bne.n	8008a02 <_dtoa_r+0x69a>
 80089e2:	9904      	ldr	r1, [sp, #16]
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 fe0a 	bl	80095fe <_Bfree>
 80089ea:	2300      	movs	r3, #0
 80089ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089ee:	702b      	strb	r3, [r5, #0]
 80089f0:	f10a 0301 	add.w	r3, sl, #1
 80089f4:	6013      	str	r3, [r2, #0]
 80089f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 8241 	beq.w	8008e80 <_dtoa_r+0xb18>
 80089fe:	601d      	str	r5, [r3, #0]
 8008a00:	e23e      	b.n	8008e80 <_dtoa_r+0xb18>
 8008a02:	f8cd a020 	str.w	sl, [sp, #32]
 8008a06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a0a:	2a39      	cmp	r2, #57	; 0x39
 8008a0c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008a10:	d108      	bne.n	8008a24 <_dtoa_r+0x6bc>
 8008a12:	459b      	cmp	fp, r3
 8008a14:	d10a      	bne.n	8008a2c <_dtoa_r+0x6c4>
 8008a16:	9b08      	ldr	r3, [sp, #32]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	9308      	str	r3, [sp, #32]
 8008a1c:	2330      	movs	r3, #48	; 0x30
 8008a1e:	f88b 3000 	strb.w	r3, [fp]
 8008a22:	465b      	mov	r3, fp
 8008a24:	781a      	ldrb	r2, [r3, #0]
 8008a26:	3201      	adds	r2, #1
 8008a28:	701a      	strb	r2, [r3, #0]
 8008a2a:	e78c      	b.n	8008946 <_dtoa_r+0x5de>
 8008a2c:	461d      	mov	r5, r3
 8008a2e:	e7ea      	b.n	8008a06 <_dtoa_r+0x69e>
 8008a30:	2200      	movs	r2, #0
 8008a32:	4b9b      	ldr	r3, [pc, #620]	; (8008ca0 <_dtoa_r+0x938>)
 8008a34:	f7f7 fdf0 	bl	8000618 <__aeabi_dmul>
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	4606      	mov	r6, r0
 8008a3e:	460f      	mov	r7, r1
 8008a40:	f7f8 f852 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d09a      	beq.n	800897e <_dtoa_r+0x616>
 8008a48:	e7cb      	b.n	80089e2 <_dtoa_r+0x67a>
 8008a4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a4c:	2a00      	cmp	r2, #0
 8008a4e:	f000 808b 	beq.w	8008b68 <_dtoa_r+0x800>
 8008a52:	9a06      	ldr	r2, [sp, #24]
 8008a54:	2a01      	cmp	r2, #1
 8008a56:	dc6e      	bgt.n	8008b36 <_dtoa_r+0x7ce>
 8008a58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a5a:	2a00      	cmp	r2, #0
 8008a5c:	d067      	beq.n	8008b2e <_dtoa_r+0x7c6>
 8008a5e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a62:	9f07      	ldr	r7, [sp, #28]
 8008a64:	9d05      	ldr	r5, [sp, #20]
 8008a66:	9a05      	ldr	r2, [sp, #20]
 8008a68:	2101      	movs	r1, #1
 8008a6a:	441a      	add	r2, r3
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	9205      	str	r2, [sp, #20]
 8008a70:	4498      	add	r8, r3
 8008a72:	f000 fea2 	bl	80097ba <__i2b>
 8008a76:	4606      	mov	r6, r0
 8008a78:	2d00      	cmp	r5, #0
 8008a7a:	dd0c      	ble.n	8008a96 <_dtoa_r+0x72e>
 8008a7c:	f1b8 0f00 	cmp.w	r8, #0
 8008a80:	dd09      	ble.n	8008a96 <_dtoa_r+0x72e>
 8008a82:	4545      	cmp	r5, r8
 8008a84:	9a05      	ldr	r2, [sp, #20]
 8008a86:	462b      	mov	r3, r5
 8008a88:	bfa8      	it	ge
 8008a8a:	4643      	movge	r3, r8
 8008a8c:	1ad2      	subs	r2, r2, r3
 8008a8e:	9205      	str	r2, [sp, #20]
 8008a90:	1aed      	subs	r5, r5, r3
 8008a92:	eba8 0803 	sub.w	r8, r8, r3
 8008a96:	9b07      	ldr	r3, [sp, #28]
 8008a98:	b1eb      	cbz	r3, 8008ad6 <_dtoa_r+0x76e>
 8008a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d067      	beq.n	8008b70 <_dtoa_r+0x808>
 8008aa0:	b18f      	cbz	r7, 8008ac6 <_dtoa_r+0x75e>
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	463a      	mov	r2, r7
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f000 ff26 	bl	80098f8 <__pow5mult>
 8008aac:	9a04      	ldr	r2, [sp, #16]
 8008aae:	4601      	mov	r1, r0
 8008ab0:	4606      	mov	r6, r0
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f000 fe8a 	bl	80097cc <__multiply>
 8008ab8:	9904      	ldr	r1, [sp, #16]
 8008aba:	9008      	str	r0, [sp, #32]
 8008abc:	4620      	mov	r0, r4
 8008abe:	f000 fd9e 	bl	80095fe <_Bfree>
 8008ac2:	9b08      	ldr	r3, [sp, #32]
 8008ac4:	9304      	str	r3, [sp, #16]
 8008ac6:	9b07      	ldr	r3, [sp, #28]
 8008ac8:	1bda      	subs	r2, r3, r7
 8008aca:	d004      	beq.n	8008ad6 <_dtoa_r+0x76e>
 8008acc:	9904      	ldr	r1, [sp, #16]
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f000 ff12 	bl	80098f8 <__pow5mult>
 8008ad4:	9004      	str	r0, [sp, #16]
 8008ad6:	2101      	movs	r1, #1
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f000 fe6e 	bl	80097ba <__i2b>
 8008ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f000 81d0 	beq.w	8008e88 <_dtoa_r+0xb20>
 8008ae8:	461a      	mov	r2, r3
 8008aea:	4601      	mov	r1, r0
 8008aec:	4620      	mov	r0, r4
 8008aee:	f000 ff03 	bl	80098f8 <__pow5mult>
 8008af2:	9b06      	ldr	r3, [sp, #24]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	4607      	mov	r7, r0
 8008af8:	dc40      	bgt.n	8008b7c <_dtoa_r+0x814>
 8008afa:	9b00      	ldr	r3, [sp, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d139      	bne.n	8008b74 <_dtoa_r+0x80c>
 8008b00:	9b01      	ldr	r3, [sp, #4]
 8008b02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d136      	bne.n	8008b78 <_dtoa_r+0x810>
 8008b0a:	9b01      	ldr	r3, [sp, #4]
 8008b0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b10:	0d1b      	lsrs	r3, r3, #20
 8008b12:	051b      	lsls	r3, r3, #20
 8008b14:	b12b      	cbz	r3, 8008b22 <_dtoa_r+0x7ba>
 8008b16:	9b05      	ldr	r3, [sp, #20]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	9305      	str	r3, [sp, #20]
 8008b1c:	f108 0801 	add.w	r8, r8, #1
 8008b20:	2301      	movs	r3, #1
 8008b22:	9307      	str	r3, [sp, #28]
 8008b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d12a      	bne.n	8008b80 <_dtoa_r+0x818>
 8008b2a:	2001      	movs	r0, #1
 8008b2c:	e030      	b.n	8008b90 <_dtoa_r+0x828>
 8008b2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b30:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b34:	e795      	b.n	8008a62 <_dtoa_r+0x6fa>
 8008b36:	9b07      	ldr	r3, [sp, #28]
 8008b38:	f109 37ff 	add.w	r7, r9, #4294967295
 8008b3c:	42bb      	cmp	r3, r7
 8008b3e:	bfbf      	itttt	lt
 8008b40:	9b07      	ldrlt	r3, [sp, #28]
 8008b42:	9707      	strlt	r7, [sp, #28]
 8008b44:	1afa      	sublt	r2, r7, r3
 8008b46:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008b48:	bfbb      	ittet	lt
 8008b4a:	189b      	addlt	r3, r3, r2
 8008b4c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008b4e:	1bdf      	subge	r7, r3, r7
 8008b50:	2700      	movlt	r7, #0
 8008b52:	f1b9 0f00 	cmp.w	r9, #0
 8008b56:	bfb5      	itete	lt
 8008b58:	9b05      	ldrlt	r3, [sp, #20]
 8008b5a:	9d05      	ldrge	r5, [sp, #20]
 8008b5c:	eba3 0509 	sublt.w	r5, r3, r9
 8008b60:	464b      	movge	r3, r9
 8008b62:	bfb8      	it	lt
 8008b64:	2300      	movlt	r3, #0
 8008b66:	e77e      	b.n	8008a66 <_dtoa_r+0x6fe>
 8008b68:	9f07      	ldr	r7, [sp, #28]
 8008b6a:	9d05      	ldr	r5, [sp, #20]
 8008b6c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008b6e:	e783      	b.n	8008a78 <_dtoa_r+0x710>
 8008b70:	9a07      	ldr	r2, [sp, #28]
 8008b72:	e7ab      	b.n	8008acc <_dtoa_r+0x764>
 8008b74:	2300      	movs	r3, #0
 8008b76:	e7d4      	b.n	8008b22 <_dtoa_r+0x7ba>
 8008b78:	9b00      	ldr	r3, [sp, #0]
 8008b7a:	e7d2      	b.n	8008b22 <_dtoa_r+0x7ba>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	9307      	str	r3, [sp, #28]
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008b86:	6918      	ldr	r0, [r3, #16]
 8008b88:	f000 fdc9 	bl	800971e <__hi0bits>
 8008b8c:	f1c0 0020 	rsb	r0, r0, #32
 8008b90:	4440      	add	r0, r8
 8008b92:	f010 001f 	ands.w	r0, r0, #31
 8008b96:	d047      	beq.n	8008c28 <_dtoa_r+0x8c0>
 8008b98:	f1c0 0320 	rsb	r3, r0, #32
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	dd3b      	ble.n	8008c18 <_dtoa_r+0x8b0>
 8008ba0:	9b05      	ldr	r3, [sp, #20]
 8008ba2:	f1c0 001c 	rsb	r0, r0, #28
 8008ba6:	4403      	add	r3, r0
 8008ba8:	9305      	str	r3, [sp, #20]
 8008baa:	4405      	add	r5, r0
 8008bac:	4480      	add	r8, r0
 8008bae:	9b05      	ldr	r3, [sp, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	dd05      	ble.n	8008bc0 <_dtoa_r+0x858>
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	9904      	ldr	r1, [sp, #16]
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f000 feeb 	bl	8009994 <__lshift>
 8008bbe:	9004      	str	r0, [sp, #16]
 8008bc0:	f1b8 0f00 	cmp.w	r8, #0
 8008bc4:	dd05      	ble.n	8008bd2 <_dtoa_r+0x86a>
 8008bc6:	4639      	mov	r1, r7
 8008bc8:	4642      	mov	r2, r8
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f000 fee2 	bl	8009994 <__lshift>
 8008bd0:	4607      	mov	r7, r0
 8008bd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bd4:	b353      	cbz	r3, 8008c2c <_dtoa_r+0x8c4>
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	9804      	ldr	r0, [sp, #16]
 8008bda:	f000 ff2f 	bl	8009a3c <__mcmp>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	da24      	bge.n	8008c2c <_dtoa_r+0x8c4>
 8008be2:	2300      	movs	r3, #0
 8008be4:	220a      	movs	r2, #10
 8008be6:	9904      	ldr	r1, [sp, #16]
 8008be8:	4620      	mov	r0, r4
 8008bea:	f000 fd1f 	bl	800962c <__multadd>
 8008bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bf0:	9004      	str	r0, [sp, #16]
 8008bf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 814d 	beq.w	8008e96 <_dtoa_r+0xb2e>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	4631      	mov	r1, r6
 8008c00:	220a      	movs	r2, #10
 8008c02:	4620      	mov	r0, r4
 8008c04:	f000 fd12 	bl	800962c <__multadd>
 8008c08:	9b02      	ldr	r3, [sp, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	dc4f      	bgt.n	8008cb0 <_dtoa_r+0x948>
 8008c10:	9b06      	ldr	r3, [sp, #24]
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	dd4c      	ble.n	8008cb0 <_dtoa_r+0x948>
 8008c16:	e011      	b.n	8008c3c <_dtoa_r+0x8d4>
 8008c18:	d0c9      	beq.n	8008bae <_dtoa_r+0x846>
 8008c1a:	9a05      	ldr	r2, [sp, #20]
 8008c1c:	331c      	adds	r3, #28
 8008c1e:	441a      	add	r2, r3
 8008c20:	9205      	str	r2, [sp, #20]
 8008c22:	441d      	add	r5, r3
 8008c24:	4498      	add	r8, r3
 8008c26:	e7c2      	b.n	8008bae <_dtoa_r+0x846>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	e7f6      	b.n	8008c1a <_dtoa_r+0x8b2>
 8008c2c:	f1b9 0f00 	cmp.w	r9, #0
 8008c30:	dc38      	bgt.n	8008ca4 <_dtoa_r+0x93c>
 8008c32:	9b06      	ldr	r3, [sp, #24]
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	dd35      	ble.n	8008ca4 <_dtoa_r+0x93c>
 8008c38:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c3c:	9b02      	ldr	r3, [sp, #8]
 8008c3e:	b963      	cbnz	r3, 8008c5a <_dtoa_r+0x8f2>
 8008c40:	4639      	mov	r1, r7
 8008c42:	2205      	movs	r2, #5
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 fcf1 	bl	800962c <__multadd>
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	4607      	mov	r7, r0
 8008c4e:	9804      	ldr	r0, [sp, #16]
 8008c50:	f000 fef4 	bl	8009a3c <__mcmp>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	f73f adcc 	bgt.w	80087f2 <_dtoa_r+0x48a>
 8008c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c5c:	465d      	mov	r5, fp
 8008c5e:	ea6f 0a03 	mvn.w	sl, r3
 8008c62:	f04f 0900 	mov.w	r9, #0
 8008c66:	4639      	mov	r1, r7
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 fcc8 	bl	80095fe <_Bfree>
 8008c6e:	2e00      	cmp	r6, #0
 8008c70:	f43f aeb7 	beq.w	80089e2 <_dtoa_r+0x67a>
 8008c74:	f1b9 0f00 	cmp.w	r9, #0
 8008c78:	d005      	beq.n	8008c86 <_dtoa_r+0x91e>
 8008c7a:	45b1      	cmp	r9, r6
 8008c7c:	d003      	beq.n	8008c86 <_dtoa_r+0x91e>
 8008c7e:	4649      	mov	r1, r9
 8008c80:	4620      	mov	r0, r4
 8008c82:	f000 fcbc 	bl	80095fe <_Bfree>
 8008c86:	4631      	mov	r1, r6
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f000 fcb8 	bl	80095fe <_Bfree>
 8008c8e:	e6a8      	b.n	80089e2 <_dtoa_r+0x67a>
 8008c90:	2700      	movs	r7, #0
 8008c92:	463e      	mov	r6, r7
 8008c94:	e7e1      	b.n	8008c5a <_dtoa_r+0x8f2>
 8008c96:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008c9a:	463e      	mov	r6, r7
 8008c9c:	e5a9      	b.n	80087f2 <_dtoa_r+0x48a>
 8008c9e:	bf00      	nop
 8008ca0:	40240000 	.word	0x40240000
 8008ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca6:	f8cd 9008 	str.w	r9, [sp, #8]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 80fa 	beq.w	8008ea4 <_dtoa_r+0xb3c>
 8008cb0:	2d00      	cmp	r5, #0
 8008cb2:	dd05      	ble.n	8008cc0 <_dtoa_r+0x958>
 8008cb4:	4631      	mov	r1, r6
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f000 fe6b 	bl	8009994 <__lshift>
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	9b07      	ldr	r3, [sp, #28]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d04c      	beq.n	8008d60 <_dtoa_r+0x9f8>
 8008cc6:	6871      	ldr	r1, [r6, #4]
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f000 fc64 	bl	8009596 <_Balloc>
 8008cce:	6932      	ldr	r2, [r6, #16]
 8008cd0:	3202      	adds	r2, #2
 8008cd2:	4605      	mov	r5, r0
 8008cd4:	0092      	lsls	r2, r2, #2
 8008cd6:	f106 010c 	add.w	r1, r6, #12
 8008cda:	300c      	adds	r0, #12
 8008cdc:	f000 fc50 	bl	8009580 <memcpy>
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	4629      	mov	r1, r5
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f000 fe55 	bl	8009994 <__lshift>
 8008cea:	9b00      	ldr	r3, [sp, #0]
 8008cec:	f8cd b014 	str.w	fp, [sp, #20]
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	46b1      	mov	r9, r6
 8008cf6:	9307      	str	r3, [sp, #28]
 8008cf8:	4606      	mov	r6, r0
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	9804      	ldr	r0, [sp, #16]
 8008cfe:	f7ff faa5 	bl	800824c <quorem>
 8008d02:	4649      	mov	r1, r9
 8008d04:	4605      	mov	r5, r0
 8008d06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008d0a:	9804      	ldr	r0, [sp, #16]
 8008d0c:	f000 fe96 	bl	8009a3c <__mcmp>
 8008d10:	4632      	mov	r2, r6
 8008d12:	9000      	str	r0, [sp, #0]
 8008d14:	4639      	mov	r1, r7
 8008d16:	4620      	mov	r0, r4
 8008d18:	f000 feaa 	bl	8009a70 <__mdiff>
 8008d1c:	68c3      	ldr	r3, [r0, #12]
 8008d1e:	4602      	mov	r2, r0
 8008d20:	bb03      	cbnz	r3, 8008d64 <_dtoa_r+0x9fc>
 8008d22:	4601      	mov	r1, r0
 8008d24:	9008      	str	r0, [sp, #32]
 8008d26:	9804      	ldr	r0, [sp, #16]
 8008d28:	f000 fe88 	bl	8009a3c <__mcmp>
 8008d2c:	9a08      	ldr	r2, [sp, #32]
 8008d2e:	4603      	mov	r3, r0
 8008d30:	4611      	mov	r1, r2
 8008d32:	4620      	mov	r0, r4
 8008d34:	9308      	str	r3, [sp, #32]
 8008d36:	f000 fc62 	bl	80095fe <_Bfree>
 8008d3a:	9b08      	ldr	r3, [sp, #32]
 8008d3c:	b9a3      	cbnz	r3, 8008d68 <_dtoa_r+0xa00>
 8008d3e:	9a06      	ldr	r2, [sp, #24]
 8008d40:	b992      	cbnz	r2, 8008d68 <_dtoa_r+0xa00>
 8008d42:	9a07      	ldr	r2, [sp, #28]
 8008d44:	b982      	cbnz	r2, 8008d68 <_dtoa_r+0xa00>
 8008d46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008d4a:	d029      	beq.n	8008da0 <_dtoa_r+0xa38>
 8008d4c:	9b00      	ldr	r3, [sp, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	dd01      	ble.n	8008d56 <_dtoa_r+0x9ee>
 8008d52:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008d56:	9b05      	ldr	r3, [sp, #20]
 8008d58:	1c5d      	adds	r5, r3, #1
 8008d5a:	f883 8000 	strb.w	r8, [r3]
 8008d5e:	e782      	b.n	8008c66 <_dtoa_r+0x8fe>
 8008d60:	4630      	mov	r0, r6
 8008d62:	e7c2      	b.n	8008cea <_dtoa_r+0x982>
 8008d64:	2301      	movs	r3, #1
 8008d66:	e7e3      	b.n	8008d30 <_dtoa_r+0x9c8>
 8008d68:	9a00      	ldr	r2, [sp, #0]
 8008d6a:	2a00      	cmp	r2, #0
 8008d6c:	db04      	blt.n	8008d78 <_dtoa_r+0xa10>
 8008d6e:	d125      	bne.n	8008dbc <_dtoa_r+0xa54>
 8008d70:	9a06      	ldr	r2, [sp, #24]
 8008d72:	bb1a      	cbnz	r2, 8008dbc <_dtoa_r+0xa54>
 8008d74:	9a07      	ldr	r2, [sp, #28]
 8008d76:	bb0a      	cbnz	r2, 8008dbc <_dtoa_r+0xa54>
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	ddec      	ble.n	8008d56 <_dtoa_r+0x9ee>
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	9904      	ldr	r1, [sp, #16]
 8008d80:	4620      	mov	r0, r4
 8008d82:	f000 fe07 	bl	8009994 <__lshift>
 8008d86:	4639      	mov	r1, r7
 8008d88:	9004      	str	r0, [sp, #16]
 8008d8a:	f000 fe57 	bl	8009a3c <__mcmp>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	dc03      	bgt.n	8008d9a <_dtoa_r+0xa32>
 8008d92:	d1e0      	bne.n	8008d56 <_dtoa_r+0x9ee>
 8008d94:	f018 0f01 	tst.w	r8, #1
 8008d98:	d0dd      	beq.n	8008d56 <_dtoa_r+0x9ee>
 8008d9a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008d9e:	d1d8      	bne.n	8008d52 <_dtoa_r+0x9ea>
 8008da0:	9b05      	ldr	r3, [sp, #20]
 8008da2:	9a05      	ldr	r2, [sp, #20]
 8008da4:	1c5d      	adds	r5, r3, #1
 8008da6:	2339      	movs	r3, #57	; 0x39
 8008da8:	7013      	strb	r3, [r2, #0]
 8008daa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008dae:	2b39      	cmp	r3, #57	; 0x39
 8008db0:	f105 32ff 	add.w	r2, r5, #4294967295
 8008db4:	d04f      	beq.n	8008e56 <_dtoa_r+0xaee>
 8008db6:	3301      	adds	r3, #1
 8008db8:	7013      	strb	r3, [r2, #0]
 8008dba:	e754      	b.n	8008c66 <_dtoa_r+0x8fe>
 8008dbc:	9a05      	ldr	r2, [sp, #20]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f102 0501 	add.w	r5, r2, #1
 8008dc4:	dd06      	ble.n	8008dd4 <_dtoa_r+0xa6c>
 8008dc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008dca:	d0e9      	beq.n	8008da0 <_dtoa_r+0xa38>
 8008dcc:	f108 0801 	add.w	r8, r8, #1
 8008dd0:	9b05      	ldr	r3, [sp, #20]
 8008dd2:	e7c2      	b.n	8008d5a <_dtoa_r+0x9f2>
 8008dd4:	9a02      	ldr	r2, [sp, #8]
 8008dd6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008dda:	eba5 030b 	sub.w	r3, r5, fp
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d021      	beq.n	8008e26 <_dtoa_r+0xabe>
 8008de2:	2300      	movs	r3, #0
 8008de4:	220a      	movs	r2, #10
 8008de6:	9904      	ldr	r1, [sp, #16]
 8008de8:	4620      	mov	r0, r4
 8008dea:	f000 fc1f 	bl	800962c <__multadd>
 8008dee:	45b1      	cmp	r9, r6
 8008df0:	9004      	str	r0, [sp, #16]
 8008df2:	f04f 0300 	mov.w	r3, #0
 8008df6:	f04f 020a 	mov.w	r2, #10
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	d105      	bne.n	8008e0c <_dtoa_r+0xaa4>
 8008e00:	f000 fc14 	bl	800962c <__multadd>
 8008e04:	4681      	mov	r9, r0
 8008e06:	4606      	mov	r6, r0
 8008e08:	9505      	str	r5, [sp, #20]
 8008e0a:	e776      	b.n	8008cfa <_dtoa_r+0x992>
 8008e0c:	f000 fc0e 	bl	800962c <__multadd>
 8008e10:	4631      	mov	r1, r6
 8008e12:	4681      	mov	r9, r0
 8008e14:	2300      	movs	r3, #0
 8008e16:	220a      	movs	r2, #10
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f000 fc07 	bl	800962c <__multadd>
 8008e1e:	4606      	mov	r6, r0
 8008e20:	e7f2      	b.n	8008e08 <_dtoa_r+0xaa0>
 8008e22:	f04f 0900 	mov.w	r9, #0
 8008e26:	2201      	movs	r2, #1
 8008e28:	9904      	ldr	r1, [sp, #16]
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f000 fdb2 	bl	8009994 <__lshift>
 8008e30:	4639      	mov	r1, r7
 8008e32:	9004      	str	r0, [sp, #16]
 8008e34:	f000 fe02 	bl	8009a3c <__mcmp>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	dcb6      	bgt.n	8008daa <_dtoa_r+0xa42>
 8008e3c:	d102      	bne.n	8008e44 <_dtoa_r+0xadc>
 8008e3e:	f018 0f01 	tst.w	r8, #1
 8008e42:	d1b2      	bne.n	8008daa <_dtoa_r+0xa42>
 8008e44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e48:	2b30      	cmp	r3, #48	; 0x30
 8008e4a:	f105 32ff 	add.w	r2, r5, #4294967295
 8008e4e:	f47f af0a 	bne.w	8008c66 <_dtoa_r+0x8fe>
 8008e52:	4615      	mov	r5, r2
 8008e54:	e7f6      	b.n	8008e44 <_dtoa_r+0xadc>
 8008e56:	4593      	cmp	fp, r2
 8008e58:	d105      	bne.n	8008e66 <_dtoa_r+0xafe>
 8008e5a:	2331      	movs	r3, #49	; 0x31
 8008e5c:	f10a 0a01 	add.w	sl, sl, #1
 8008e60:	f88b 3000 	strb.w	r3, [fp]
 8008e64:	e6ff      	b.n	8008c66 <_dtoa_r+0x8fe>
 8008e66:	4615      	mov	r5, r2
 8008e68:	e79f      	b.n	8008daa <_dtoa_r+0xa42>
 8008e6a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008ed0 <_dtoa_r+0xb68>
 8008e6e:	e007      	b.n	8008e80 <_dtoa_r+0xb18>
 8008e70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e72:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008ed4 <_dtoa_r+0xb6c>
 8008e76:	b11b      	cbz	r3, 8008e80 <_dtoa_r+0xb18>
 8008e78:	f10b 0308 	add.w	r3, fp, #8
 8008e7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e7e:	6013      	str	r3, [r2, #0]
 8008e80:	4658      	mov	r0, fp
 8008e82:	b017      	add	sp, #92	; 0x5c
 8008e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e88:	9b06      	ldr	r3, [sp, #24]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	f77f ae35 	ble.w	8008afa <_dtoa_r+0x792>
 8008e90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e92:	9307      	str	r3, [sp, #28]
 8008e94:	e649      	b.n	8008b2a <_dtoa_r+0x7c2>
 8008e96:	9b02      	ldr	r3, [sp, #8]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	dc03      	bgt.n	8008ea4 <_dtoa_r+0xb3c>
 8008e9c:	9b06      	ldr	r3, [sp, #24]
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	f73f aecc 	bgt.w	8008c3c <_dtoa_r+0x8d4>
 8008ea4:	465d      	mov	r5, fp
 8008ea6:	4639      	mov	r1, r7
 8008ea8:	9804      	ldr	r0, [sp, #16]
 8008eaa:	f7ff f9cf 	bl	800824c <quorem>
 8008eae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008eb2:	f805 8b01 	strb.w	r8, [r5], #1
 8008eb6:	9a02      	ldr	r2, [sp, #8]
 8008eb8:	eba5 030b 	sub.w	r3, r5, fp
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	ddb0      	ble.n	8008e22 <_dtoa_r+0xaba>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	220a      	movs	r2, #10
 8008ec4:	9904      	ldr	r1, [sp, #16]
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f000 fbb0 	bl	800962c <__multadd>
 8008ecc:	9004      	str	r0, [sp, #16]
 8008ece:	e7ea      	b.n	8008ea6 <_dtoa_r+0xb3e>
 8008ed0:	0800cec0 	.word	0x0800cec0
 8008ed4:	0800cf40 	.word	0x0800cf40

08008ed8 <rshift>:
 8008ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eda:	6906      	ldr	r6, [r0, #16]
 8008edc:	114b      	asrs	r3, r1, #5
 8008ede:	429e      	cmp	r6, r3
 8008ee0:	f100 0414 	add.w	r4, r0, #20
 8008ee4:	dd30      	ble.n	8008f48 <rshift+0x70>
 8008ee6:	f011 011f 	ands.w	r1, r1, #31
 8008eea:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008eee:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008ef2:	d108      	bne.n	8008f06 <rshift+0x2e>
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	42b2      	cmp	r2, r6
 8008ef8:	460b      	mov	r3, r1
 8008efa:	d211      	bcs.n	8008f20 <rshift+0x48>
 8008efc:	f852 3b04 	ldr.w	r3, [r2], #4
 8008f00:	f841 3b04 	str.w	r3, [r1], #4
 8008f04:	e7f7      	b.n	8008ef6 <rshift+0x1e>
 8008f06:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008f0a:	f1c1 0c20 	rsb	ip, r1, #32
 8008f0e:	40cd      	lsrs	r5, r1
 8008f10:	3204      	adds	r2, #4
 8008f12:	4623      	mov	r3, r4
 8008f14:	42b2      	cmp	r2, r6
 8008f16:	4617      	mov	r7, r2
 8008f18:	d30c      	bcc.n	8008f34 <rshift+0x5c>
 8008f1a:	601d      	str	r5, [r3, #0]
 8008f1c:	b105      	cbz	r5, 8008f20 <rshift+0x48>
 8008f1e:	3304      	adds	r3, #4
 8008f20:	1b1a      	subs	r2, r3, r4
 8008f22:	42a3      	cmp	r3, r4
 8008f24:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008f28:	bf08      	it	eq
 8008f2a:	2300      	moveq	r3, #0
 8008f2c:	6102      	str	r2, [r0, #16]
 8008f2e:	bf08      	it	eq
 8008f30:	6143      	streq	r3, [r0, #20]
 8008f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f34:	683f      	ldr	r7, [r7, #0]
 8008f36:	fa07 f70c 	lsl.w	r7, r7, ip
 8008f3a:	433d      	orrs	r5, r7
 8008f3c:	f843 5b04 	str.w	r5, [r3], #4
 8008f40:	f852 5b04 	ldr.w	r5, [r2], #4
 8008f44:	40cd      	lsrs	r5, r1
 8008f46:	e7e5      	b.n	8008f14 <rshift+0x3c>
 8008f48:	4623      	mov	r3, r4
 8008f4a:	e7e9      	b.n	8008f20 <rshift+0x48>

08008f4c <__hexdig_fun>:
 8008f4c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008f50:	2b09      	cmp	r3, #9
 8008f52:	d802      	bhi.n	8008f5a <__hexdig_fun+0xe>
 8008f54:	3820      	subs	r0, #32
 8008f56:	b2c0      	uxtb	r0, r0
 8008f58:	4770      	bx	lr
 8008f5a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008f5e:	2b05      	cmp	r3, #5
 8008f60:	d801      	bhi.n	8008f66 <__hexdig_fun+0x1a>
 8008f62:	3847      	subs	r0, #71	; 0x47
 8008f64:	e7f7      	b.n	8008f56 <__hexdig_fun+0xa>
 8008f66:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008f6a:	2b05      	cmp	r3, #5
 8008f6c:	d801      	bhi.n	8008f72 <__hexdig_fun+0x26>
 8008f6e:	3827      	subs	r0, #39	; 0x27
 8008f70:	e7f1      	b.n	8008f56 <__hexdig_fun+0xa>
 8008f72:	2000      	movs	r0, #0
 8008f74:	4770      	bx	lr

08008f76 <__gethex>:
 8008f76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7a:	b08b      	sub	sp, #44	; 0x2c
 8008f7c:	468a      	mov	sl, r1
 8008f7e:	9002      	str	r0, [sp, #8]
 8008f80:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008f82:	9306      	str	r3, [sp, #24]
 8008f84:	4690      	mov	r8, r2
 8008f86:	f000 fad0 	bl	800952a <__localeconv_l>
 8008f8a:	6803      	ldr	r3, [r0, #0]
 8008f8c:	9303      	str	r3, [sp, #12]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7f7 f92e 	bl	80001f0 <strlen>
 8008f94:	9b03      	ldr	r3, [sp, #12]
 8008f96:	9001      	str	r0, [sp, #4]
 8008f98:	4403      	add	r3, r0
 8008f9a:	f04f 0b00 	mov.w	fp, #0
 8008f9e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008fa2:	9307      	str	r3, [sp, #28]
 8008fa4:	f8da 3000 	ldr.w	r3, [sl]
 8008fa8:	3302      	adds	r3, #2
 8008faa:	461f      	mov	r7, r3
 8008fac:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008fb0:	2830      	cmp	r0, #48	; 0x30
 8008fb2:	d06c      	beq.n	800908e <__gethex+0x118>
 8008fb4:	f7ff ffca 	bl	8008f4c <__hexdig_fun>
 8008fb8:	4604      	mov	r4, r0
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d16a      	bne.n	8009094 <__gethex+0x11e>
 8008fbe:	9a01      	ldr	r2, [sp, #4]
 8008fc0:	9903      	ldr	r1, [sp, #12]
 8008fc2:	4638      	mov	r0, r7
 8008fc4:	f001 f8fe 	bl	800a1c4 <strncmp>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d166      	bne.n	800909a <__gethex+0x124>
 8008fcc:	9b01      	ldr	r3, [sp, #4]
 8008fce:	5cf8      	ldrb	r0, [r7, r3]
 8008fd0:	18fe      	adds	r6, r7, r3
 8008fd2:	f7ff ffbb 	bl	8008f4c <__hexdig_fun>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d062      	beq.n	80090a0 <__gethex+0x12a>
 8008fda:	4633      	mov	r3, r6
 8008fdc:	7818      	ldrb	r0, [r3, #0]
 8008fde:	2830      	cmp	r0, #48	; 0x30
 8008fe0:	461f      	mov	r7, r3
 8008fe2:	f103 0301 	add.w	r3, r3, #1
 8008fe6:	d0f9      	beq.n	8008fdc <__gethex+0x66>
 8008fe8:	f7ff ffb0 	bl	8008f4c <__hexdig_fun>
 8008fec:	fab0 f580 	clz	r5, r0
 8008ff0:	096d      	lsrs	r5, r5, #5
 8008ff2:	4634      	mov	r4, r6
 8008ff4:	f04f 0b01 	mov.w	fp, #1
 8008ff8:	463a      	mov	r2, r7
 8008ffa:	4616      	mov	r6, r2
 8008ffc:	3201      	adds	r2, #1
 8008ffe:	7830      	ldrb	r0, [r6, #0]
 8009000:	f7ff ffa4 	bl	8008f4c <__hexdig_fun>
 8009004:	2800      	cmp	r0, #0
 8009006:	d1f8      	bne.n	8008ffa <__gethex+0x84>
 8009008:	9a01      	ldr	r2, [sp, #4]
 800900a:	9903      	ldr	r1, [sp, #12]
 800900c:	4630      	mov	r0, r6
 800900e:	f001 f8d9 	bl	800a1c4 <strncmp>
 8009012:	b950      	cbnz	r0, 800902a <__gethex+0xb4>
 8009014:	b954      	cbnz	r4, 800902c <__gethex+0xb6>
 8009016:	9b01      	ldr	r3, [sp, #4]
 8009018:	18f4      	adds	r4, r6, r3
 800901a:	4622      	mov	r2, r4
 800901c:	4616      	mov	r6, r2
 800901e:	3201      	adds	r2, #1
 8009020:	7830      	ldrb	r0, [r6, #0]
 8009022:	f7ff ff93 	bl	8008f4c <__hexdig_fun>
 8009026:	2800      	cmp	r0, #0
 8009028:	d1f8      	bne.n	800901c <__gethex+0xa6>
 800902a:	b10c      	cbz	r4, 8009030 <__gethex+0xba>
 800902c:	1ba4      	subs	r4, r4, r6
 800902e:	00a4      	lsls	r4, r4, #2
 8009030:	7833      	ldrb	r3, [r6, #0]
 8009032:	2b50      	cmp	r3, #80	; 0x50
 8009034:	d001      	beq.n	800903a <__gethex+0xc4>
 8009036:	2b70      	cmp	r3, #112	; 0x70
 8009038:	d140      	bne.n	80090bc <__gethex+0x146>
 800903a:	7873      	ldrb	r3, [r6, #1]
 800903c:	2b2b      	cmp	r3, #43	; 0x2b
 800903e:	d031      	beq.n	80090a4 <__gethex+0x12e>
 8009040:	2b2d      	cmp	r3, #45	; 0x2d
 8009042:	d033      	beq.n	80090ac <__gethex+0x136>
 8009044:	1c71      	adds	r1, r6, #1
 8009046:	f04f 0900 	mov.w	r9, #0
 800904a:	7808      	ldrb	r0, [r1, #0]
 800904c:	f7ff ff7e 	bl	8008f4c <__hexdig_fun>
 8009050:	1e43      	subs	r3, r0, #1
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b18      	cmp	r3, #24
 8009056:	d831      	bhi.n	80090bc <__gethex+0x146>
 8009058:	f1a0 0210 	sub.w	r2, r0, #16
 800905c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009060:	f7ff ff74 	bl	8008f4c <__hexdig_fun>
 8009064:	1e43      	subs	r3, r0, #1
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b18      	cmp	r3, #24
 800906a:	d922      	bls.n	80090b2 <__gethex+0x13c>
 800906c:	f1b9 0f00 	cmp.w	r9, #0
 8009070:	d000      	beq.n	8009074 <__gethex+0xfe>
 8009072:	4252      	negs	r2, r2
 8009074:	4414      	add	r4, r2
 8009076:	f8ca 1000 	str.w	r1, [sl]
 800907a:	b30d      	cbz	r5, 80090c0 <__gethex+0x14a>
 800907c:	f1bb 0f00 	cmp.w	fp, #0
 8009080:	bf0c      	ite	eq
 8009082:	2706      	moveq	r7, #6
 8009084:	2700      	movne	r7, #0
 8009086:	4638      	mov	r0, r7
 8009088:	b00b      	add	sp, #44	; 0x2c
 800908a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908e:	f10b 0b01 	add.w	fp, fp, #1
 8009092:	e78a      	b.n	8008faa <__gethex+0x34>
 8009094:	2500      	movs	r5, #0
 8009096:	462c      	mov	r4, r5
 8009098:	e7ae      	b.n	8008ff8 <__gethex+0x82>
 800909a:	463e      	mov	r6, r7
 800909c:	2501      	movs	r5, #1
 800909e:	e7c7      	b.n	8009030 <__gethex+0xba>
 80090a0:	4604      	mov	r4, r0
 80090a2:	e7fb      	b.n	800909c <__gethex+0x126>
 80090a4:	f04f 0900 	mov.w	r9, #0
 80090a8:	1cb1      	adds	r1, r6, #2
 80090aa:	e7ce      	b.n	800904a <__gethex+0xd4>
 80090ac:	f04f 0901 	mov.w	r9, #1
 80090b0:	e7fa      	b.n	80090a8 <__gethex+0x132>
 80090b2:	230a      	movs	r3, #10
 80090b4:	fb03 0202 	mla	r2, r3, r2, r0
 80090b8:	3a10      	subs	r2, #16
 80090ba:	e7cf      	b.n	800905c <__gethex+0xe6>
 80090bc:	4631      	mov	r1, r6
 80090be:	e7da      	b.n	8009076 <__gethex+0x100>
 80090c0:	1bf3      	subs	r3, r6, r7
 80090c2:	3b01      	subs	r3, #1
 80090c4:	4629      	mov	r1, r5
 80090c6:	2b07      	cmp	r3, #7
 80090c8:	dc49      	bgt.n	800915e <__gethex+0x1e8>
 80090ca:	9802      	ldr	r0, [sp, #8]
 80090cc:	f000 fa63 	bl	8009596 <_Balloc>
 80090d0:	9b01      	ldr	r3, [sp, #4]
 80090d2:	f100 0914 	add.w	r9, r0, #20
 80090d6:	f04f 0b00 	mov.w	fp, #0
 80090da:	f1c3 0301 	rsb	r3, r3, #1
 80090de:	4605      	mov	r5, r0
 80090e0:	f8cd 9010 	str.w	r9, [sp, #16]
 80090e4:	46da      	mov	sl, fp
 80090e6:	9308      	str	r3, [sp, #32]
 80090e8:	42b7      	cmp	r7, r6
 80090ea:	d33b      	bcc.n	8009164 <__gethex+0x1ee>
 80090ec:	9804      	ldr	r0, [sp, #16]
 80090ee:	f840 ab04 	str.w	sl, [r0], #4
 80090f2:	eba0 0009 	sub.w	r0, r0, r9
 80090f6:	1080      	asrs	r0, r0, #2
 80090f8:	6128      	str	r0, [r5, #16]
 80090fa:	0147      	lsls	r7, r0, #5
 80090fc:	4650      	mov	r0, sl
 80090fe:	f000 fb0e 	bl	800971e <__hi0bits>
 8009102:	f8d8 6000 	ldr.w	r6, [r8]
 8009106:	1a3f      	subs	r7, r7, r0
 8009108:	42b7      	cmp	r7, r6
 800910a:	dd64      	ble.n	80091d6 <__gethex+0x260>
 800910c:	1bbf      	subs	r7, r7, r6
 800910e:	4639      	mov	r1, r7
 8009110:	4628      	mov	r0, r5
 8009112:	f000 fe1d 	bl	8009d50 <__any_on>
 8009116:	4682      	mov	sl, r0
 8009118:	b178      	cbz	r0, 800913a <__gethex+0x1c4>
 800911a:	1e7b      	subs	r3, r7, #1
 800911c:	1159      	asrs	r1, r3, #5
 800911e:	f003 021f 	and.w	r2, r3, #31
 8009122:	f04f 0a01 	mov.w	sl, #1
 8009126:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800912a:	fa0a f202 	lsl.w	r2, sl, r2
 800912e:	420a      	tst	r2, r1
 8009130:	d003      	beq.n	800913a <__gethex+0x1c4>
 8009132:	4553      	cmp	r3, sl
 8009134:	dc46      	bgt.n	80091c4 <__gethex+0x24e>
 8009136:	f04f 0a02 	mov.w	sl, #2
 800913a:	4639      	mov	r1, r7
 800913c:	4628      	mov	r0, r5
 800913e:	f7ff fecb 	bl	8008ed8 <rshift>
 8009142:	443c      	add	r4, r7
 8009144:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009148:	42a3      	cmp	r3, r4
 800914a:	da52      	bge.n	80091f2 <__gethex+0x27c>
 800914c:	4629      	mov	r1, r5
 800914e:	9802      	ldr	r0, [sp, #8]
 8009150:	f000 fa55 	bl	80095fe <_Bfree>
 8009154:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009156:	2300      	movs	r3, #0
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	27a3      	movs	r7, #163	; 0xa3
 800915c:	e793      	b.n	8009086 <__gethex+0x110>
 800915e:	3101      	adds	r1, #1
 8009160:	105b      	asrs	r3, r3, #1
 8009162:	e7b0      	b.n	80090c6 <__gethex+0x150>
 8009164:	1e73      	subs	r3, r6, #1
 8009166:	9305      	str	r3, [sp, #20]
 8009168:	9a07      	ldr	r2, [sp, #28]
 800916a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800916e:	4293      	cmp	r3, r2
 8009170:	d018      	beq.n	80091a4 <__gethex+0x22e>
 8009172:	f1bb 0f20 	cmp.w	fp, #32
 8009176:	d107      	bne.n	8009188 <__gethex+0x212>
 8009178:	9b04      	ldr	r3, [sp, #16]
 800917a:	f8c3 a000 	str.w	sl, [r3]
 800917e:	3304      	adds	r3, #4
 8009180:	f04f 0a00 	mov.w	sl, #0
 8009184:	9304      	str	r3, [sp, #16]
 8009186:	46d3      	mov	fp, sl
 8009188:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800918c:	f7ff fede 	bl	8008f4c <__hexdig_fun>
 8009190:	f000 000f 	and.w	r0, r0, #15
 8009194:	fa00 f00b 	lsl.w	r0, r0, fp
 8009198:	ea4a 0a00 	orr.w	sl, sl, r0
 800919c:	f10b 0b04 	add.w	fp, fp, #4
 80091a0:	9b05      	ldr	r3, [sp, #20]
 80091a2:	e00d      	b.n	80091c0 <__gethex+0x24a>
 80091a4:	9b05      	ldr	r3, [sp, #20]
 80091a6:	9a08      	ldr	r2, [sp, #32]
 80091a8:	4413      	add	r3, r2
 80091aa:	42bb      	cmp	r3, r7
 80091ac:	d3e1      	bcc.n	8009172 <__gethex+0x1fc>
 80091ae:	4618      	mov	r0, r3
 80091b0:	9a01      	ldr	r2, [sp, #4]
 80091b2:	9903      	ldr	r1, [sp, #12]
 80091b4:	9309      	str	r3, [sp, #36]	; 0x24
 80091b6:	f001 f805 	bl	800a1c4 <strncmp>
 80091ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091bc:	2800      	cmp	r0, #0
 80091be:	d1d8      	bne.n	8009172 <__gethex+0x1fc>
 80091c0:	461e      	mov	r6, r3
 80091c2:	e791      	b.n	80090e8 <__gethex+0x172>
 80091c4:	1eb9      	subs	r1, r7, #2
 80091c6:	4628      	mov	r0, r5
 80091c8:	f000 fdc2 	bl	8009d50 <__any_on>
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d0b2      	beq.n	8009136 <__gethex+0x1c0>
 80091d0:	f04f 0a03 	mov.w	sl, #3
 80091d4:	e7b1      	b.n	800913a <__gethex+0x1c4>
 80091d6:	da09      	bge.n	80091ec <__gethex+0x276>
 80091d8:	1bf7      	subs	r7, r6, r7
 80091da:	4629      	mov	r1, r5
 80091dc:	463a      	mov	r2, r7
 80091de:	9802      	ldr	r0, [sp, #8]
 80091e0:	f000 fbd8 	bl	8009994 <__lshift>
 80091e4:	1be4      	subs	r4, r4, r7
 80091e6:	4605      	mov	r5, r0
 80091e8:	f100 0914 	add.w	r9, r0, #20
 80091ec:	f04f 0a00 	mov.w	sl, #0
 80091f0:	e7a8      	b.n	8009144 <__gethex+0x1ce>
 80091f2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80091f6:	42a0      	cmp	r0, r4
 80091f8:	dd6a      	ble.n	80092d0 <__gethex+0x35a>
 80091fa:	1b04      	subs	r4, r0, r4
 80091fc:	42a6      	cmp	r6, r4
 80091fe:	dc2e      	bgt.n	800925e <__gethex+0x2e8>
 8009200:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009204:	2b02      	cmp	r3, #2
 8009206:	d022      	beq.n	800924e <__gethex+0x2d8>
 8009208:	2b03      	cmp	r3, #3
 800920a:	d024      	beq.n	8009256 <__gethex+0x2e0>
 800920c:	2b01      	cmp	r3, #1
 800920e:	d115      	bne.n	800923c <__gethex+0x2c6>
 8009210:	42a6      	cmp	r6, r4
 8009212:	d113      	bne.n	800923c <__gethex+0x2c6>
 8009214:	2e01      	cmp	r6, #1
 8009216:	dc0b      	bgt.n	8009230 <__gethex+0x2ba>
 8009218:	9a06      	ldr	r2, [sp, #24]
 800921a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800921e:	6013      	str	r3, [r2, #0]
 8009220:	2301      	movs	r3, #1
 8009222:	612b      	str	r3, [r5, #16]
 8009224:	f8c9 3000 	str.w	r3, [r9]
 8009228:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800922a:	2762      	movs	r7, #98	; 0x62
 800922c:	601d      	str	r5, [r3, #0]
 800922e:	e72a      	b.n	8009086 <__gethex+0x110>
 8009230:	1e71      	subs	r1, r6, #1
 8009232:	4628      	mov	r0, r5
 8009234:	f000 fd8c 	bl	8009d50 <__any_on>
 8009238:	2800      	cmp	r0, #0
 800923a:	d1ed      	bne.n	8009218 <__gethex+0x2a2>
 800923c:	4629      	mov	r1, r5
 800923e:	9802      	ldr	r0, [sp, #8]
 8009240:	f000 f9dd 	bl	80095fe <_Bfree>
 8009244:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009246:	2300      	movs	r3, #0
 8009248:	6013      	str	r3, [r2, #0]
 800924a:	2750      	movs	r7, #80	; 0x50
 800924c:	e71b      	b.n	8009086 <__gethex+0x110>
 800924e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009250:	2b00      	cmp	r3, #0
 8009252:	d0e1      	beq.n	8009218 <__gethex+0x2a2>
 8009254:	e7f2      	b.n	800923c <__gethex+0x2c6>
 8009256:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1dd      	bne.n	8009218 <__gethex+0x2a2>
 800925c:	e7ee      	b.n	800923c <__gethex+0x2c6>
 800925e:	1e67      	subs	r7, r4, #1
 8009260:	f1ba 0f00 	cmp.w	sl, #0
 8009264:	d131      	bne.n	80092ca <__gethex+0x354>
 8009266:	b127      	cbz	r7, 8009272 <__gethex+0x2fc>
 8009268:	4639      	mov	r1, r7
 800926a:	4628      	mov	r0, r5
 800926c:	f000 fd70 	bl	8009d50 <__any_on>
 8009270:	4682      	mov	sl, r0
 8009272:	117a      	asrs	r2, r7, #5
 8009274:	2301      	movs	r3, #1
 8009276:	f007 071f 	and.w	r7, r7, #31
 800927a:	fa03 f707 	lsl.w	r7, r3, r7
 800927e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009282:	4621      	mov	r1, r4
 8009284:	421f      	tst	r7, r3
 8009286:	4628      	mov	r0, r5
 8009288:	bf18      	it	ne
 800928a:	f04a 0a02 	orrne.w	sl, sl, #2
 800928e:	1b36      	subs	r6, r6, r4
 8009290:	f7ff fe22 	bl	8008ed8 <rshift>
 8009294:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009298:	2702      	movs	r7, #2
 800929a:	f1ba 0f00 	cmp.w	sl, #0
 800929e:	d048      	beq.n	8009332 <__gethex+0x3bc>
 80092a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d015      	beq.n	80092d4 <__gethex+0x35e>
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d017      	beq.n	80092dc <__gethex+0x366>
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d109      	bne.n	80092c4 <__gethex+0x34e>
 80092b0:	f01a 0f02 	tst.w	sl, #2
 80092b4:	d006      	beq.n	80092c4 <__gethex+0x34e>
 80092b6:	f8d9 3000 	ldr.w	r3, [r9]
 80092ba:	ea4a 0a03 	orr.w	sl, sl, r3
 80092be:	f01a 0f01 	tst.w	sl, #1
 80092c2:	d10e      	bne.n	80092e2 <__gethex+0x36c>
 80092c4:	f047 0710 	orr.w	r7, r7, #16
 80092c8:	e033      	b.n	8009332 <__gethex+0x3bc>
 80092ca:	f04f 0a01 	mov.w	sl, #1
 80092ce:	e7d0      	b.n	8009272 <__gethex+0x2fc>
 80092d0:	2701      	movs	r7, #1
 80092d2:	e7e2      	b.n	800929a <__gethex+0x324>
 80092d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092d6:	f1c3 0301 	rsb	r3, r3, #1
 80092da:	9315      	str	r3, [sp, #84]	; 0x54
 80092dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d0f0      	beq.n	80092c4 <__gethex+0x34e>
 80092e2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80092e6:	f105 0314 	add.w	r3, r5, #20
 80092ea:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80092ee:	eb03 010a 	add.w	r1, r3, sl
 80092f2:	f04f 0c00 	mov.w	ip, #0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80092fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009300:	d01c      	beq.n	800933c <__gethex+0x3c6>
 8009302:	3201      	adds	r2, #1
 8009304:	6002      	str	r2, [r0, #0]
 8009306:	2f02      	cmp	r7, #2
 8009308:	f105 0314 	add.w	r3, r5, #20
 800930c:	d138      	bne.n	8009380 <__gethex+0x40a>
 800930e:	f8d8 2000 	ldr.w	r2, [r8]
 8009312:	3a01      	subs	r2, #1
 8009314:	42b2      	cmp	r2, r6
 8009316:	d10a      	bne.n	800932e <__gethex+0x3b8>
 8009318:	1171      	asrs	r1, r6, #5
 800931a:	2201      	movs	r2, #1
 800931c:	f006 061f 	and.w	r6, r6, #31
 8009320:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009324:	fa02 f606 	lsl.w	r6, r2, r6
 8009328:	421e      	tst	r6, r3
 800932a:	bf18      	it	ne
 800932c:	4617      	movne	r7, r2
 800932e:	f047 0720 	orr.w	r7, r7, #32
 8009332:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009334:	601d      	str	r5, [r3, #0]
 8009336:	9b06      	ldr	r3, [sp, #24]
 8009338:	601c      	str	r4, [r3, #0]
 800933a:	e6a4      	b.n	8009086 <__gethex+0x110>
 800933c:	4299      	cmp	r1, r3
 800933e:	f843 cc04 	str.w	ip, [r3, #-4]
 8009342:	d8d8      	bhi.n	80092f6 <__gethex+0x380>
 8009344:	68ab      	ldr	r3, [r5, #8]
 8009346:	4599      	cmp	r9, r3
 8009348:	db12      	blt.n	8009370 <__gethex+0x3fa>
 800934a:	6869      	ldr	r1, [r5, #4]
 800934c:	9802      	ldr	r0, [sp, #8]
 800934e:	3101      	adds	r1, #1
 8009350:	f000 f921 	bl	8009596 <_Balloc>
 8009354:	692a      	ldr	r2, [r5, #16]
 8009356:	3202      	adds	r2, #2
 8009358:	f105 010c 	add.w	r1, r5, #12
 800935c:	4683      	mov	fp, r0
 800935e:	0092      	lsls	r2, r2, #2
 8009360:	300c      	adds	r0, #12
 8009362:	f000 f90d 	bl	8009580 <memcpy>
 8009366:	4629      	mov	r1, r5
 8009368:	9802      	ldr	r0, [sp, #8]
 800936a:	f000 f948 	bl	80095fe <_Bfree>
 800936e:	465d      	mov	r5, fp
 8009370:	692b      	ldr	r3, [r5, #16]
 8009372:	1c5a      	adds	r2, r3, #1
 8009374:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009378:	612a      	str	r2, [r5, #16]
 800937a:	2201      	movs	r2, #1
 800937c:	615a      	str	r2, [r3, #20]
 800937e:	e7c2      	b.n	8009306 <__gethex+0x390>
 8009380:	692a      	ldr	r2, [r5, #16]
 8009382:	454a      	cmp	r2, r9
 8009384:	dd0b      	ble.n	800939e <__gethex+0x428>
 8009386:	2101      	movs	r1, #1
 8009388:	4628      	mov	r0, r5
 800938a:	f7ff fda5 	bl	8008ed8 <rshift>
 800938e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009392:	3401      	adds	r4, #1
 8009394:	42a3      	cmp	r3, r4
 8009396:	f6ff aed9 	blt.w	800914c <__gethex+0x1d6>
 800939a:	2701      	movs	r7, #1
 800939c:	e7c7      	b.n	800932e <__gethex+0x3b8>
 800939e:	f016 061f 	ands.w	r6, r6, #31
 80093a2:	d0fa      	beq.n	800939a <__gethex+0x424>
 80093a4:	449a      	add	sl, r3
 80093a6:	f1c6 0620 	rsb	r6, r6, #32
 80093aa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80093ae:	f000 f9b6 	bl	800971e <__hi0bits>
 80093b2:	42b0      	cmp	r0, r6
 80093b4:	dbe7      	blt.n	8009386 <__gethex+0x410>
 80093b6:	e7f0      	b.n	800939a <__gethex+0x424>

080093b8 <L_shift>:
 80093b8:	f1c2 0208 	rsb	r2, r2, #8
 80093bc:	0092      	lsls	r2, r2, #2
 80093be:	b570      	push	{r4, r5, r6, lr}
 80093c0:	f1c2 0620 	rsb	r6, r2, #32
 80093c4:	6843      	ldr	r3, [r0, #4]
 80093c6:	6804      	ldr	r4, [r0, #0]
 80093c8:	fa03 f506 	lsl.w	r5, r3, r6
 80093cc:	432c      	orrs	r4, r5
 80093ce:	40d3      	lsrs	r3, r2
 80093d0:	6004      	str	r4, [r0, #0]
 80093d2:	f840 3f04 	str.w	r3, [r0, #4]!
 80093d6:	4288      	cmp	r0, r1
 80093d8:	d3f4      	bcc.n	80093c4 <L_shift+0xc>
 80093da:	bd70      	pop	{r4, r5, r6, pc}

080093dc <__match>:
 80093dc:	b530      	push	{r4, r5, lr}
 80093de:	6803      	ldr	r3, [r0, #0]
 80093e0:	3301      	adds	r3, #1
 80093e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093e6:	b914      	cbnz	r4, 80093ee <__match+0x12>
 80093e8:	6003      	str	r3, [r0, #0]
 80093ea:	2001      	movs	r0, #1
 80093ec:	bd30      	pop	{r4, r5, pc}
 80093ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80093f6:	2d19      	cmp	r5, #25
 80093f8:	bf98      	it	ls
 80093fa:	3220      	addls	r2, #32
 80093fc:	42a2      	cmp	r2, r4
 80093fe:	d0f0      	beq.n	80093e2 <__match+0x6>
 8009400:	2000      	movs	r0, #0
 8009402:	e7f3      	b.n	80093ec <__match+0x10>

08009404 <__hexnan>:
 8009404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009408:	680b      	ldr	r3, [r1, #0]
 800940a:	6801      	ldr	r1, [r0, #0]
 800940c:	115f      	asrs	r7, r3, #5
 800940e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009412:	f013 031f 	ands.w	r3, r3, #31
 8009416:	b087      	sub	sp, #28
 8009418:	bf18      	it	ne
 800941a:	3704      	addne	r7, #4
 800941c:	2500      	movs	r5, #0
 800941e:	1f3e      	subs	r6, r7, #4
 8009420:	4682      	mov	sl, r0
 8009422:	4690      	mov	r8, r2
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	f847 5c04 	str.w	r5, [r7, #-4]
 800942a:	46b1      	mov	r9, r6
 800942c:	4634      	mov	r4, r6
 800942e:	9502      	str	r5, [sp, #8]
 8009430:	46ab      	mov	fp, r5
 8009432:	784a      	ldrb	r2, [r1, #1]
 8009434:	1c4b      	adds	r3, r1, #1
 8009436:	9303      	str	r3, [sp, #12]
 8009438:	b342      	cbz	r2, 800948c <__hexnan+0x88>
 800943a:	4610      	mov	r0, r2
 800943c:	9105      	str	r1, [sp, #20]
 800943e:	9204      	str	r2, [sp, #16]
 8009440:	f7ff fd84 	bl	8008f4c <__hexdig_fun>
 8009444:	2800      	cmp	r0, #0
 8009446:	d143      	bne.n	80094d0 <__hexnan+0xcc>
 8009448:	9a04      	ldr	r2, [sp, #16]
 800944a:	9905      	ldr	r1, [sp, #20]
 800944c:	2a20      	cmp	r2, #32
 800944e:	d818      	bhi.n	8009482 <__hexnan+0x7e>
 8009450:	9b02      	ldr	r3, [sp, #8]
 8009452:	459b      	cmp	fp, r3
 8009454:	dd13      	ble.n	800947e <__hexnan+0x7a>
 8009456:	454c      	cmp	r4, r9
 8009458:	d206      	bcs.n	8009468 <__hexnan+0x64>
 800945a:	2d07      	cmp	r5, #7
 800945c:	dc04      	bgt.n	8009468 <__hexnan+0x64>
 800945e:	462a      	mov	r2, r5
 8009460:	4649      	mov	r1, r9
 8009462:	4620      	mov	r0, r4
 8009464:	f7ff ffa8 	bl	80093b8 <L_shift>
 8009468:	4544      	cmp	r4, r8
 800946a:	d944      	bls.n	80094f6 <__hexnan+0xf2>
 800946c:	2300      	movs	r3, #0
 800946e:	f1a4 0904 	sub.w	r9, r4, #4
 8009472:	f844 3c04 	str.w	r3, [r4, #-4]
 8009476:	f8cd b008 	str.w	fp, [sp, #8]
 800947a:	464c      	mov	r4, r9
 800947c:	461d      	mov	r5, r3
 800947e:	9903      	ldr	r1, [sp, #12]
 8009480:	e7d7      	b.n	8009432 <__hexnan+0x2e>
 8009482:	2a29      	cmp	r2, #41	; 0x29
 8009484:	d14a      	bne.n	800951c <__hexnan+0x118>
 8009486:	3102      	adds	r1, #2
 8009488:	f8ca 1000 	str.w	r1, [sl]
 800948c:	f1bb 0f00 	cmp.w	fp, #0
 8009490:	d044      	beq.n	800951c <__hexnan+0x118>
 8009492:	454c      	cmp	r4, r9
 8009494:	d206      	bcs.n	80094a4 <__hexnan+0xa0>
 8009496:	2d07      	cmp	r5, #7
 8009498:	dc04      	bgt.n	80094a4 <__hexnan+0xa0>
 800949a:	462a      	mov	r2, r5
 800949c:	4649      	mov	r1, r9
 800949e:	4620      	mov	r0, r4
 80094a0:	f7ff ff8a 	bl	80093b8 <L_shift>
 80094a4:	4544      	cmp	r4, r8
 80094a6:	d928      	bls.n	80094fa <__hexnan+0xf6>
 80094a8:	4643      	mov	r3, r8
 80094aa:	f854 2b04 	ldr.w	r2, [r4], #4
 80094ae:	f843 2b04 	str.w	r2, [r3], #4
 80094b2:	42a6      	cmp	r6, r4
 80094b4:	d2f9      	bcs.n	80094aa <__hexnan+0xa6>
 80094b6:	2200      	movs	r2, #0
 80094b8:	f843 2b04 	str.w	r2, [r3], #4
 80094bc:	429e      	cmp	r6, r3
 80094be:	d2fb      	bcs.n	80094b8 <__hexnan+0xb4>
 80094c0:	6833      	ldr	r3, [r6, #0]
 80094c2:	b91b      	cbnz	r3, 80094cc <__hexnan+0xc8>
 80094c4:	4546      	cmp	r6, r8
 80094c6:	d127      	bne.n	8009518 <__hexnan+0x114>
 80094c8:	2301      	movs	r3, #1
 80094ca:	6033      	str	r3, [r6, #0]
 80094cc:	2005      	movs	r0, #5
 80094ce:	e026      	b.n	800951e <__hexnan+0x11a>
 80094d0:	3501      	adds	r5, #1
 80094d2:	2d08      	cmp	r5, #8
 80094d4:	f10b 0b01 	add.w	fp, fp, #1
 80094d8:	dd06      	ble.n	80094e8 <__hexnan+0xe4>
 80094da:	4544      	cmp	r4, r8
 80094dc:	d9cf      	bls.n	800947e <__hexnan+0x7a>
 80094de:	2300      	movs	r3, #0
 80094e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80094e4:	2501      	movs	r5, #1
 80094e6:	3c04      	subs	r4, #4
 80094e8:	6822      	ldr	r2, [r4, #0]
 80094ea:	f000 000f 	and.w	r0, r0, #15
 80094ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80094f2:	6020      	str	r0, [r4, #0]
 80094f4:	e7c3      	b.n	800947e <__hexnan+0x7a>
 80094f6:	2508      	movs	r5, #8
 80094f8:	e7c1      	b.n	800947e <__hexnan+0x7a>
 80094fa:	9b01      	ldr	r3, [sp, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d0df      	beq.n	80094c0 <__hexnan+0xbc>
 8009500:	f04f 32ff 	mov.w	r2, #4294967295
 8009504:	f1c3 0320 	rsb	r3, r3, #32
 8009508:	fa22 f303 	lsr.w	r3, r2, r3
 800950c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009510:	401a      	ands	r2, r3
 8009512:	f847 2c04 	str.w	r2, [r7, #-4]
 8009516:	e7d3      	b.n	80094c0 <__hexnan+0xbc>
 8009518:	3e04      	subs	r6, #4
 800951a:	e7d1      	b.n	80094c0 <__hexnan+0xbc>
 800951c:	2004      	movs	r0, #4
 800951e:	b007      	add	sp, #28
 8009520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009524 <__locale_ctype_ptr_l>:
 8009524:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009528:	4770      	bx	lr

0800952a <__localeconv_l>:
 800952a:	30f0      	adds	r0, #240	; 0xf0
 800952c:	4770      	bx	lr
	...

08009530 <_localeconv_r>:
 8009530:	4b04      	ldr	r3, [pc, #16]	; (8009544 <_localeconv_r+0x14>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6a18      	ldr	r0, [r3, #32]
 8009536:	4b04      	ldr	r3, [pc, #16]	; (8009548 <_localeconv_r+0x18>)
 8009538:	2800      	cmp	r0, #0
 800953a:	bf08      	it	eq
 800953c:	4618      	moveq	r0, r3
 800953e:	30f0      	adds	r0, #240	; 0xf0
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	20000150 	.word	0x20000150
 8009548:	200001b4 	.word	0x200001b4

0800954c <malloc>:
 800954c:	4b02      	ldr	r3, [pc, #8]	; (8009558 <malloc+0xc>)
 800954e:	4601      	mov	r1, r0
 8009550:	6818      	ldr	r0, [r3, #0]
 8009552:	f000 bc7b 	b.w	8009e4c <_malloc_r>
 8009556:	bf00      	nop
 8009558:	20000150 	.word	0x20000150

0800955c <__ascii_mbtowc>:
 800955c:	b082      	sub	sp, #8
 800955e:	b901      	cbnz	r1, 8009562 <__ascii_mbtowc+0x6>
 8009560:	a901      	add	r1, sp, #4
 8009562:	b142      	cbz	r2, 8009576 <__ascii_mbtowc+0x1a>
 8009564:	b14b      	cbz	r3, 800957a <__ascii_mbtowc+0x1e>
 8009566:	7813      	ldrb	r3, [r2, #0]
 8009568:	600b      	str	r3, [r1, #0]
 800956a:	7812      	ldrb	r2, [r2, #0]
 800956c:	1c10      	adds	r0, r2, #0
 800956e:	bf18      	it	ne
 8009570:	2001      	movne	r0, #1
 8009572:	b002      	add	sp, #8
 8009574:	4770      	bx	lr
 8009576:	4610      	mov	r0, r2
 8009578:	e7fb      	b.n	8009572 <__ascii_mbtowc+0x16>
 800957a:	f06f 0001 	mvn.w	r0, #1
 800957e:	e7f8      	b.n	8009572 <__ascii_mbtowc+0x16>

08009580 <memcpy>:
 8009580:	b510      	push	{r4, lr}
 8009582:	1e43      	subs	r3, r0, #1
 8009584:	440a      	add	r2, r1
 8009586:	4291      	cmp	r1, r2
 8009588:	d100      	bne.n	800958c <memcpy+0xc>
 800958a:	bd10      	pop	{r4, pc}
 800958c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009590:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009594:	e7f7      	b.n	8009586 <memcpy+0x6>

08009596 <_Balloc>:
 8009596:	b570      	push	{r4, r5, r6, lr}
 8009598:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800959a:	4604      	mov	r4, r0
 800959c:	460e      	mov	r6, r1
 800959e:	b93d      	cbnz	r5, 80095b0 <_Balloc+0x1a>
 80095a0:	2010      	movs	r0, #16
 80095a2:	f7ff ffd3 	bl	800954c <malloc>
 80095a6:	6260      	str	r0, [r4, #36]	; 0x24
 80095a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095ac:	6005      	str	r5, [r0, #0]
 80095ae:	60c5      	str	r5, [r0, #12]
 80095b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80095b2:	68eb      	ldr	r3, [r5, #12]
 80095b4:	b183      	cbz	r3, 80095d8 <_Balloc+0x42>
 80095b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80095be:	b9b8      	cbnz	r0, 80095f0 <_Balloc+0x5a>
 80095c0:	2101      	movs	r1, #1
 80095c2:	fa01 f506 	lsl.w	r5, r1, r6
 80095c6:	1d6a      	adds	r2, r5, #5
 80095c8:	0092      	lsls	r2, r2, #2
 80095ca:	4620      	mov	r0, r4
 80095cc:	f000 fbe1 	bl	8009d92 <_calloc_r>
 80095d0:	b160      	cbz	r0, 80095ec <_Balloc+0x56>
 80095d2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80095d6:	e00e      	b.n	80095f6 <_Balloc+0x60>
 80095d8:	2221      	movs	r2, #33	; 0x21
 80095da:	2104      	movs	r1, #4
 80095dc:	4620      	mov	r0, r4
 80095de:	f000 fbd8 	bl	8009d92 <_calloc_r>
 80095e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095e4:	60e8      	str	r0, [r5, #12]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e4      	bne.n	80095b6 <_Balloc+0x20>
 80095ec:	2000      	movs	r0, #0
 80095ee:	bd70      	pop	{r4, r5, r6, pc}
 80095f0:	6802      	ldr	r2, [r0, #0]
 80095f2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80095f6:	2300      	movs	r3, #0
 80095f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095fc:	e7f7      	b.n	80095ee <_Balloc+0x58>

080095fe <_Bfree>:
 80095fe:	b570      	push	{r4, r5, r6, lr}
 8009600:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009602:	4606      	mov	r6, r0
 8009604:	460d      	mov	r5, r1
 8009606:	b93c      	cbnz	r4, 8009618 <_Bfree+0x1a>
 8009608:	2010      	movs	r0, #16
 800960a:	f7ff ff9f 	bl	800954c <malloc>
 800960e:	6270      	str	r0, [r6, #36]	; 0x24
 8009610:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009614:	6004      	str	r4, [r0, #0]
 8009616:	60c4      	str	r4, [r0, #12]
 8009618:	b13d      	cbz	r5, 800962a <_Bfree+0x2c>
 800961a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800961c:	686a      	ldr	r2, [r5, #4]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009624:	6029      	str	r1, [r5, #0]
 8009626:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800962a:	bd70      	pop	{r4, r5, r6, pc}

0800962c <__multadd>:
 800962c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009630:	690d      	ldr	r5, [r1, #16]
 8009632:	461f      	mov	r7, r3
 8009634:	4606      	mov	r6, r0
 8009636:	460c      	mov	r4, r1
 8009638:	f101 0c14 	add.w	ip, r1, #20
 800963c:	2300      	movs	r3, #0
 800963e:	f8dc 0000 	ldr.w	r0, [ip]
 8009642:	b281      	uxth	r1, r0
 8009644:	fb02 7101 	mla	r1, r2, r1, r7
 8009648:	0c0f      	lsrs	r7, r1, #16
 800964a:	0c00      	lsrs	r0, r0, #16
 800964c:	fb02 7000 	mla	r0, r2, r0, r7
 8009650:	b289      	uxth	r1, r1
 8009652:	3301      	adds	r3, #1
 8009654:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009658:	429d      	cmp	r5, r3
 800965a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800965e:	f84c 1b04 	str.w	r1, [ip], #4
 8009662:	dcec      	bgt.n	800963e <__multadd+0x12>
 8009664:	b1d7      	cbz	r7, 800969c <__multadd+0x70>
 8009666:	68a3      	ldr	r3, [r4, #8]
 8009668:	42ab      	cmp	r3, r5
 800966a:	dc12      	bgt.n	8009692 <__multadd+0x66>
 800966c:	6861      	ldr	r1, [r4, #4]
 800966e:	4630      	mov	r0, r6
 8009670:	3101      	adds	r1, #1
 8009672:	f7ff ff90 	bl	8009596 <_Balloc>
 8009676:	6922      	ldr	r2, [r4, #16]
 8009678:	3202      	adds	r2, #2
 800967a:	f104 010c 	add.w	r1, r4, #12
 800967e:	4680      	mov	r8, r0
 8009680:	0092      	lsls	r2, r2, #2
 8009682:	300c      	adds	r0, #12
 8009684:	f7ff ff7c 	bl	8009580 <memcpy>
 8009688:	4621      	mov	r1, r4
 800968a:	4630      	mov	r0, r6
 800968c:	f7ff ffb7 	bl	80095fe <_Bfree>
 8009690:	4644      	mov	r4, r8
 8009692:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009696:	3501      	adds	r5, #1
 8009698:	615f      	str	r7, [r3, #20]
 800969a:	6125      	str	r5, [r4, #16]
 800969c:	4620      	mov	r0, r4
 800969e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080096a2 <__s2b>:
 80096a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096a6:	460c      	mov	r4, r1
 80096a8:	4615      	mov	r5, r2
 80096aa:	461f      	mov	r7, r3
 80096ac:	2209      	movs	r2, #9
 80096ae:	3308      	adds	r3, #8
 80096b0:	4606      	mov	r6, r0
 80096b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80096b6:	2100      	movs	r1, #0
 80096b8:	2201      	movs	r2, #1
 80096ba:	429a      	cmp	r2, r3
 80096bc:	db20      	blt.n	8009700 <__s2b+0x5e>
 80096be:	4630      	mov	r0, r6
 80096c0:	f7ff ff69 	bl	8009596 <_Balloc>
 80096c4:	9b08      	ldr	r3, [sp, #32]
 80096c6:	6143      	str	r3, [r0, #20]
 80096c8:	2d09      	cmp	r5, #9
 80096ca:	f04f 0301 	mov.w	r3, #1
 80096ce:	6103      	str	r3, [r0, #16]
 80096d0:	dd19      	ble.n	8009706 <__s2b+0x64>
 80096d2:	f104 0809 	add.w	r8, r4, #9
 80096d6:	46c1      	mov	r9, r8
 80096d8:	442c      	add	r4, r5
 80096da:	f819 3b01 	ldrb.w	r3, [r9], #1
 80096de:	4601      	mov	r1, r0
 80096e0:	3b30      	subs	r3, #48	; 0x30
 80096e2:	220a      	movs	r2, #10
 80096e4:	4630      	mov	r0, r6
 80096e6:	f7ff ffa1 	bl	800962c <__multadd>
 80096ea:	45a1      	cmp	r9, r4
 80096ec:	d1f5      	bne.n	80096da <__s2b+0x38>
 80096ee:	eb08 0405 	add.w	r4, r8, r5
 80096f2:	3c08      	subs	r4, #8
 80096f4:	1b2d      	subs	r5, r5, r4
 80096f6:	1963      	adds	r3, r4, r5
 80096f8:	42bb      	cmp	r3, r7
 80096fa:	db07      	blt.n	800970c <__s2b+0x6a>
 80096fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009700:	0052      	lsls	r2, r2, #1
 8009702:	3101      	adds	r1, #1
 8009704:	e7d9      	b.n	80096ba <__s2b+0x18>
 8009706:	340a      	adds	r4, #10
 8009708:	2509      	movs	r5, #9
 800970a:	e7f3      	b.n	80096f4 <__s2b+0x52>
 800970c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009710:	4601      	mov	r1, r0
 8009712:	3b30      	subs	r3, #48	; 0x30
 8009714:	220a      	movs	r2, #10
 8009716:	4630      	mov	r0, r6
 8009718:	f7ff ff88 	bl	800962c <__multadd>
 800971c:	e7eb      	b.n	80096f6 <__s2b+0x54>

0800971e <__hi0bits>:
 800971e:	0c02      	lsrs	r2, r0, #16
 8009720:	0412      	lsls	r2, r2, #16
 8009722:	4603      	mov	r3, r0
 8009724:	b9b2      	cbnz	r2, 8009754 <__hi0bits+0x36>
 8009726:	0403      	lsls	r3, r0, #16
 8009728:	2010      	movs	r0, #16
 800972a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800972e:	bf04      	itt	eq
 8009730:	021b      	lsleq	r3, r3, #8
 8009732:	3008      	addeq	r0, #8
 8009734:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009738:	bf04      	itt	eq
 800973a:	011b      	lsleq	r3, r3, #4
 800973c:	3004      	addeq	r0, #4
 800973e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009742:	bf04      	itt	eq
 8009744:	009b      	lsleq	r3, r3, #2
 8009746:	3002      	addeq	r0, #2
 8009748:	2b00      	cmp	r3, #0
 800974a:	db06      	blt.n	800975a <__hi0bits+0x3c>
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	d503      	bpl.n	8009758 <__hi0bits+0x3a>
 8009750:	3001      	adds	r0, #1
 8009752:	4770      	bx	lr
 8009754:	2000      	movs	r0, #0
 8009756:	e7e8      	b.n	800972a <__hi0bits+0xc>
 8009758:	2020      	movs	r0, #32
 800975a:	4770      	bx	lr

0800975c <__lo0bits>:
 800975c:	6803      	ldr	r3, [r0, #0]
 800975e:	f013 0207 	ands.w	r2, r3, #7
 8009762:	4601      	mov	r1, r0
 8009764:	d00b      	beq.n	800977e <__lo0bits+0x22>
 8009766:	07da      	lsls	r2, r3, #31
 8009768:	d423      	bmi.n	80097b2 <__lo0bits+0x56>
 800976a:	0798      	lsls	r0, r3, #30
 800976c:	bf49      	itett	mi
 800976e:	085b      	lsrmi	r3, r3, #1
 8009770:	089b      	lsrpl	r3, r3, #2
 8009772:	2001      	movmi	r0, #1
 8009774:	600b      	strmi	r3, [r1, #0]
 8009776:	bf5c      	itt	pl
 8009778:	600b      	strpl	r3, [r1, #0]
 800977a:	2002      	movpl	r0, #2
 800977c:	4770      	bx	lr
 800977e:	b298      	uxth	r0, r3
 8009780:	b9a8      	cbnz	r0, 80097ae <__lo0bits+0x52>
 8009782:	0c1b      	lsrs	r3, r3, #16
 8009784:	2010      	movs	r0, #16
 8009786:	f013 0fff 	tst.w	r3, #255	; 0xff
 800978a:	bf04      	itt	eq
 800978c:	0a1b      	lsreq	r3, r3, #8
 800978e:	3008      	addeq	r0, #8
 8009790:	071a      	lsls	r2, r3, #28
 8009792:	bf04      	itt	eq
 8009794:	091b      	lsreq	r3, r3, #4
 8009796:	3004      	addeq	r0, #4
 8009798:	079a      	lsls	r2, r3, #30
 800979a:	bf04      	itt	eq
 800979c:	089b      	lsreq	r3, r3, #2
 800979e:	3002      	addeq	r0, #2
 80097a0:	07da      	lsls	r2, r3, #31
 80097a2:	d402      	bmi.n	80097aa <__lo0bits+0x4e>
 80097a4:	085b      	lsrs	r3, r3, #1
 80097a6:	d006      	beq.n	80097b6 <__lo0bits+0x5a>
 80097a8:	3001      	adds	r0, #1
 80097aa:	600b      	str	r3, [r1, #0]
 80097ac:	4770      	bx	lr
 80097ae:	4610      	mov	r0, r2
 80097b0:	e7e9      	b.n	8009786 <__lo0bits+0x2a>
 80097b2:	2000      	movs	r0, #0
 80097b4:	4770      	bx	lr
 80097b6:	2020      	movs	r0, #32
 80097b8:	4770      	bx	lr

080097ba <__i2b>:
 80097ba:	b510      	push	{r4, lr}
 80097bc:	460c      	mov	r4, r1
 80097be:	2101      	movs	r1, #1
 80097c0:	f7ff fee9 	bl	8009596 <_Balloc>
 80097c4:	2201      	movs	r2, #1
 80097c6:	6144      	str	r4, [r0, #20]
 80097c8:	6102      	str	r2, [r0, #16]
 80097ca:	bd10      	pop	{r4, pc}

080097cc <__multiply>:
 80097cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d0:	4614      	mov	r4, r2
 80097d2:	690a      	ldr	r2, [r1, #16]
 80097d4:	6923      	ldr	r3, [r4, #16]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	bfb8      	it	lt
 80097da:	460b      	movlt	r3, r1
 80097dc:	4688      	mov	r8, r1
 80097de:	bfbc      	itt	lt
 80097e0:	46a0      	movlt	r8, r4
 80097e2:	461c      	movlt	r4, r3
 80097e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80097e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80097ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80097f4:	eb07 0609 	add.w	r6, r7, r9
 80097f8:	42b3      	cmp	r3, r6
 80097fa:	bfb8      	it	lt
 80097fc:	3101      	addlt	r1, #1
 80097fe:	f7ff feca 	bl	8009596 <_Balloc>
 8009802:	f100 0514 	add.w	r5, r0, #20
 8009806:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800980a:	462b      	mov	r3, r5
 800980c:	2200      	movs	r2, #0
 800980e:	4573      	cmp	r3, lr
 8009810:	d316      	bcc.n	8009840 <__multiply+0x74>
 8009812:	f104 0214 	add.w	r2, r4, #20
 8009816:	f108 0114 	add.w	r1, r8, #20
 800981a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800981e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	9b00      	ldr	r3, [sp, #0]
 8009826:	9201      	str	r2, [sp, #4]
 8009828:	4293      	cmp	r3, r2
 800982a:	d80c      	bhi.n	8009846 <__multiply+0x7a>
 800982c:	2e00      	cmp	r6, #0
 800982e:	dd03      	ble.n	8009838 <__multiply+0x6c>
 8009830:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009834:	2b00      	cmp	r3, #0
 8009836:	d05d      	beq.n	80098f4 <__multiply+0x128>
 8009838:	6106      	str	r6, [r0, #16]
 800983a:	b003      	add	sp, #12
 800983c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009840:	f843 2b04 	str.w	r2, [r3], #4
 8009844:	e7e3      	b.n	800980e <__multiply+0x42>
 8009846:	f8b2 b000 	ldrh.w	fp, [r2]
 800984a:	f1bb 0f00 	cmp.w	fp, #0
 800984e:	d023      	beq.n	8009898 <__multiply+0xcc>
 8009850:	4689      	mov	r9, r1
 8009852:	46ac      	mov	ip, r5
 8009854:	f04f 0800 	mov.w	r8, #0
 8009858:	f859 4b04 	ldr.w	r4, [r9], #4
 800985c:	f8dc a000 	ldr.w	sl, [ip]
 8009860:	b2a3      	uxth	r3, r4
 8009862:	fa1f fa8a 	uxth.w	sl, sl
 8009866:	fb0b a303 	mla	r3, fp, r3, sl
 800986a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800986e:	f8dc 4000 	ldr.w	r4, [ip]
 8009872:	4443      	add	r3, r8
 8009874:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009878:	fb0b 840a 	mla	r4, fp, sl, r8
 800987c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009880:	46e2      	mov	sl, ip
 8009882:	b29b      	uxth	r3, r3
 8009884:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009888:	454f      	cmp	r7, r9
 800988a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800988e:	f84a 3b04 	str.w	r3, [sl], #4
 8009892:	d82b      	bhi.n	80098ec <__multiply+0x120>
 8009894:	f8cc 8004 	str.w	r8, [ip, #4]
 8009898:	9b01      	ldr	r3, [sp, #4]
 800989a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800989e:	3204      	adds	r2, #4
 80098a0:	f1ba 0f00 	cmp.w	sl, #0
 80098a4:	d020      	beq.n	80098e8 <__multiply+0x11c>
 80098a6:	682b      	ldr	r3, [r5, #0]
 80098a8:	4689      	mov	r9, r1
 80098aa:	46a8      	mov	r8, r5
 80098ac:	f04f 0b00 	mov.w	fp, #0
 80098b0:	f8b9 c000 	ldrh.w	ip, [r9]
 80098b4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80098b8:	fb0a 440c 	mla	r4, sl, ip, r4
 80098bc:	445c      	add	r4, fp
 80098be:	46c4      	mov	ip, r8
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80098c6:	f84c 3b04 	str.w	r3, [ip], #4
 80098ca:	f859 3b04 	ldr.w	r3, [r9], #4
 80098ce:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80098d2:	0c1b      	lsrs	r3, r3, #16
 80098d4:	fb0a b303 	mla	r3, sl, r3, fp
 80098d8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80098dc:	454f      	cmp	r7, r9
 80098de:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80098e2:	d805      	bhi.n	80098f0 <__multiply+0x124>
 80098e4:	f8c8 3004 	str.w	r3, [r8, #4]
 80098e8:	3504      	adds	r5, #4
 80098ea:	e79b      	b.n	8009824 <__multiply+0x58>
 80098ec:	46d4      	mov	ip, sl
 80098ee:	e7b3      	b.n	8009858 <__multiply+0x8c>
 80098f0:	46e0      	mov	r8, ip
 80098f2:	e7dd      	b.n	80098b0 <__multiply+0xe4>
 80098f4:	3e01      	subs	r6, #1
 80098f6:	e799      	b.n	800982c <__multiply+0x60>

080098f8 <__pow5mult>:
 80098f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098fc:	4615      	mov	r5, r2
 80098fe:	f012 0203 	ands.w	r2, r2, #3
 8009902:	4606      	mov	r6, r0
 8009904:	460f      	mov	r7, r1
 8009906:	d007      	beq.n	8009918 <__pow5mult+0x20>
 8009908:	3a01      	subs	r2, #1
 800990a:	4c21      	ldr	r4, [pc, #132]	; (8009990 <__pow5mult+0x98>)
 800990c:	2300      	movs	r3, #0
 800990e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009912:	f7ff fe8b 	bl	800962c <__multadd>
 8009916:	4607      	mov	r7, r0
 8009918:	10ad      	asrs	r5, r5, #2
 800991a:	d035      	beq.n	8009988 <__pow5mult+0x90>
 800991c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800991e:	b93c      	cbnz	r4, 8009930 <__pow5mult+0x38>
 8009920:	2010      	movs	r0, #16
 8009922:	f7ff fe13 	bl	800954c <malloc>
 8009926:	6270      	str	r0, [r6, #36]	; 0x24
 8009928:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800992c:	6004      	str	r4, [r0, #0]
 800992e:	60c4      	str	r4, [r0, #12]
 8009930:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009934:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009938:	b94c      	cbnz	r4, 800994e <__pow5mult+0x56>
 800993a:	f240 2171 	movw	r1, #625	; 0x271
 800993e:	4630      	mov	r0, r6
 8009940:	f7ff ff3b 	bl	80097ba <__i2b>
 8009944:	2300      	movs	r3, #0
 8009946:	f8c8 0008 	str.w	r0, [r8, #8]
 800994a:	4604      	mov	r4, r0
 800994c:	6003      	str	r3, [r0, #0]
 800994e:	f04f 0800 	mov.w	r8, #0
 8009952:	07eb      	lsls	r3, r5, #31
 8009954:	d50a      	bpl.n	800996c <__pow5mult+0x74>
 8009956:	4639      	mov	r1, r7
 8009958:	4622      	mov	r2, r4
 800995a:	4630      	mov	r0, r6
 800995c:	f7ff ff36 	bl	80097cc <__multiply>
 8009960:	4639      	mov	r1, r7
 8009962:	4681      	mov	r9, r0
 8009964:	4630      	mov	r0, r6
 8009966:	f7ff fe4a 	bl	80095fe <_Bfree>
 800996a:	464f      	mov	r7, r9
 800996c:	106d      	asrs	r5, r5, #1
 800996e:	d00b      	beq.n	8009988 <__pow5mult+0x90>
 8009970:	6820      	ldr	r0, [r4, #0]
 8009972:	b938      	cbnz	r0, 8009984 <__pow5mult+0x8c>
 8009974:	4622      	mov	r2, r4
 8009976:	4621      	mov	r1, r4
 8009978:	4630      	mov	r0, r6
 800997a:	f7ff ff27 	bl	80097cc <__multiply>
 800997e:	6020      	str	r0, [r4, #0]
 8009980:	f8c0 8000 	str.w	r8, [r0]
 8009984:	4604      	mov	r4, r0
 8009986:	e7e4      	b.n	8009952 <__pow5mult+0x5a>
 8009988:	4638      	mov	r0, r7
 800998a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800998e:	bf00      	nop
 8009990:	0800d048 	.word	0x0800d048

08009994 <__lshift>:
 8009994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009998:	460c      	mov	r4, r1
 800999a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800999e:	6923      	ldr	r3, [r4, #16]
 80099a0:	6849      	ldr	r1, [r1, #4]
 80099a2:	eb0a 0903 	add.w	r9, sl, r3
 80099a6:	68a3      	ldr	r3, [r4, #8]
 80099a8:	4607      	mov	r7, r0
 80099aa:	4616      	mov	r6, r2
 80099ac:	f109 0501 	add.w	r5, r9, #1
 80099b0:	42ab      	cmp	r3, r5
 80099b2:	db32      	blt.n	8009a1a <__lshift+0x86>
 80099b4:	4638      	mov	r0, r7
 80099b6:	f7ff fdee 	bl	8009596 <_Balloc>
 80099ba:	2300      	movs	r3, #0
 80099bc:	4680      	mov	r8, r0
 80099be:	f100 0114 	add.w	r1, r0, #20
 80099c2:	461a      	mov	r2, r3
 80099c4:	4553      	cmp	r3, sl
 80099c6:	db2b      	blt.n	8009a20 <__lshift+0x8c>
 80099c8:	6920      	ldr	r0, [r4, #16]
 80099ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099ce:	f104 0314 	add.w	r3, r4, #20
 80099d2:	f016 021f 	ands.w	r2, r6, #31
 80099d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099da:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099de:	d025      	beq.n	8009a2c <__lshift+0x98>
 80099e0:	f1c2 0e20 	rsb	lr, r2, #32
 80099e4:	2000      	movs	r0, #0
 80099e6:	681e      	ldr	r6, [r3, #0]
 80099e8:	468a      	mov	sl, r1
 80099ea:	4096      	lsls	r6, r2
 80099ec:	4330      	orrs	r0, r6
 80099ee:	f84a 0b04 	str.w	r0, [sl], #4
 80099f2:	f853 0b04 	ldr.w	r0, [r3], #4
 80099f6:	459c      	cmp	ip, r3
 80099f8:	fa20 f00e 	lsr.w	r0, r0, lr
 80099fc:	d814      	bhi.n	8009a28 <__lshift+0x94>
 80099fe:	6048      	str	r0, [r1, #4]
 8009a00:	b108      	cbz	r0, 8009a06 <__lshift+0x72>
 8009a02:	f109 0502 	add.w	r5, r9, #2
 8009a06:	3d01      	subs	r5, #1
 8009a08:	4638      	mov	r0, r7
 8009a0a:	f8c8 5010 	str.w	r5, [r8, #16]
 8009a0e:	4621      	mov	r1, r4
 8009a10:	f7ff fdf5 	bl	80095fe <_Bfree>
 8009a14:	4640      	mov	r0, r8
 8009a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1a:	3101      	adds	r1, #1
 8009a1c:	005b      	lsls	r3, r3, #1
 8009a1e:	e7c7      	b.n	80099b0 <__lshift+0x1c>
 8009a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009a24:	3301      	adds	r3, #1
 8009a26:	e7cd      	b.n	80099c4 <__lshift+0x30>
 8009a28:	4651      	mov	r1, sl
 8009a2a:	e7dc      	b.n	80099e6 <__lshift+0x52>
 8009a2c:	3904      	subs	r1, #4
 8009a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a32:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a36:	459c      	cmp	ip, r3
 8009a38:	d8f9      	bhi.n	8009a2e <__lshift+0x9a>
 8009a3a:	e7e4      	b.n	8009a06 <__lshift+0x72>

08009a3c <__mcmp>:
 8009a3c:	6903      	ldr	r3, [r0, #16]
 8009a3e:	690a      	ldr	r2, [r1, #16]
 8009a40:	1a9b      	subs	r3, r3, r2
 8009a42:	b530      	push	{r4, r5, lr}
 8009a44:	d10c      	bne.n	8009a60 <__mcmp+0x24>
 8009a46:	0092      	lsls	r2, r2, #2
 8009a48:	3014      	adds	r0, #20
 8009a4a:	3114      	adds	r1, #20
 8009a4c:	1884      	adds	r4, r0, r2
 8009a4e:	4411      	add	r1, r2
 8009a50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a58:	4295      	cmp	r5, r2
 8009a5a:	d003      	beq.n	8009a64 <__mcmp+0x28>
 8009a5c:	d305      	bcc.n	8009a6a <__mcmp+0x2e>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	4618      	mov	r0, r3
 8009a62:	bd30      	pop	{r4, r5, pc}
 8009a64:	42a0      	cmp	r0, r4
 8009a66:	d3f3      	bcc.n	8009a50 <__mcmp+0x14>
 8009a68:	e7fa      	b.n	8009a60 <__mcmp+0x24>
 8009a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a6e:	e7f7      	b.n	8009a60 <__mcmp+0x24>

08009a70 <__mdiff>:
 8009a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a74:	460d      	mov	r5, r1
 8009a76:	4607      	mov	r7, r0
 8009a78:	4611      	mov	r1, r2
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	4614      	mov	r4, r2
 8009a7e:	f7ff ffdd 	bl	8009a3c <__mcmp>
 8009a82:	1e06      	subs	r6, r0, #0
 8009a84:	d108      	bne.n	8009a98 <__mdiff+0x28>
 8009a86:	4631      	mov	r1, r6
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7ff fd84 	bl	8009596 <_Balloc>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a98:	bfa4      	itt	ge
 8009a9a:	4623      	movge	r3, r4
 8009a9c:	462c      	movge	r4, r5
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	6861      	ldr	r1, [r4, #4]
 8009aa2:	bfa6      	itte	ge
 8009aa4:	461d      	movge	r5, r3
 8009aa6:	2600      	movge	r6, #0
 8009aa8:	2601      	movlt	r6, #1
 8009aaa:	f7ff fd74 	bl	8009596 <_Balloc>
 8009aae:	692b      	ldr	r3, [r5, #16]
 8009ab0:	60c6      	str	r6, [r0, #12]
 8009ab2:	6926      	ldr	r6, [r4, #16]
 8009ab4:	f105 0914 	add.w	r9, r5, #20
 8009ab8:	f104 0214 	add.w	r2, r4, #20
 8009abc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009ac0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009ac4:	f100 0514 	add.w	r5, r0, #20
 8009ac8:	f04f 0e00 	mov.w	lr, #0
 8009acc:	f852 ab04 	ldr.w	sl, [r2], #4
 8009ad0:	f859 4b04 	ldr.w	r4, [r9], #4
 8009ad4:	fa1e f18a 	uxtah	r1, lr, sl
 8009ad8:	b2a3      	uxth	r3, r4
 8009ada:	1ac9      	subs	r1, r1, r3
 8009adc:	0c23      	lsrs	r3, r4, #16
 8009ade:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009ae2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009ae6:	b289      	uxth	r1, r1
 8009ae8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009aec:	45c8      	cmp	r8, r9
 8009aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009af2:	4694      	mov	ip, r2
 8009af4:	f845 3b04 	str.w	r3, [r5], #4
 8009af8:	d8e8      	bhi.n	8009acc <__mdiff+0x5c>
 8009afa:	45bc      	cmp	ip, r7
 8009afc:	d304      	bcc.n	8009b08 <__mdiff+0x98>
 8009afe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009b02:	b183      	cbz	r3, 8009b26 <__mdiff+0xb6>
 8009b04:	6106      	str	r6, [r0, #16]
 8009b06:	e7c5      	b.n	8009a94 <__mdiff+0x24>
 8009b08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009b0c:	fa1e f381 	uxtah	r3, lr, r1
 8009b10:	141a      	asrs	r2, r3, #16
 8009b12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b1c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009b20:	f845 3b04 	str.w	r3, [r5], #4
 8009b24:	e7e9      	b.n	8009afa <__mdiff+0x8a>
 8009b26:	3e01      	subs	r6, #1
 8009b28:	e7e9      	b.n	8009afe <__mdiff+0x8e>
	...

08009b2c <__ulp>:
 8009b2c:	4b12      	ldr	r3, [pc, #72]	; (8009b78 <__ulp+0x4c>)
 8009b2e:	ee10 2a90 	vmov	r2, s1
 8009b32:	401a      	ands	r2, r3
 8009b34:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	dd04      	ble.n	8009b46 <__ulp+0x1a>
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	4619      	mov	r1, r3
 8009b40:	ec41 0b10 	vmov	d0, r0, r1
 8009b44:	4770      	bx	lr
 8009b46:	425b      	negs	r3, r3
 8009b48:	151b      	asrs	r3, r3, #20
 8009b4a:	2b13      	cmp	r3, #19
 8009b4c:	f04f 0000 	mov.w	r0, #0
 8009b50:	f04f 0100 	mov.w	r1, #0
 8009b54:	dc04      	bgt.n	8009b60 <__ulp+0x34>
 8009b56:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009b5a:	fa42 f103 	asr.w	r1, r2, r3
 8009b5e:	e7ef      	b.n	8009b40 <__ulp+0x14>
 8009b60:	3b14      	subs	r3, #20
 8009b62:	2b1e      	cmp	r3, #30
 8009b64:	f04f 0201 	mov.w	r2, #1
 8009b68:	bfda      	itte	le
 8009b6a:	f1c3 031f 	rsble	r3, r3, #31
 8009b6e:	fa02 f303 	lslle.w	r3, r2, r3
 8009b72:	4613      	movgt	r3, r2
 8009b74:	4618      	mov	r0, r3
 8009b76:	e7e3      	b.n	8009b40 <__ulp+0x14>
 8009b78:	7ff00000 	.word	0x7ff00000

08009b7c <__b2d>:
 8009b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7e:	6905      	ldr	r5, [r0, #16]
 8009b80:	f100 0714 	add.w	r7, r0, #20
 8009b84:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009b88:	1f2e      	subs	r6, r5, #4
 8009b8a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f7ff fdc5 	bl	800971e <__hi0bits>
 8009b94:	f1c0 0320 	rsb	r3, r0, #32
 8009b98:	280a      	cmp	r0, #10
 8009b9a:	600b      	str	r3, [r1, #0]
 8009b9c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009c14 <__b2d+0x98>
 8009ba0:	dc14      	bgt.n	8009bcc <__b2d+0x50>
 8009ba2:	f1c0 0e0b 	rsb	lr, r0, #11
 8009ba6:	fa24 f10e 	lsr.w	r1, r4, lr
 8009baa:	42b7      	cmp	r7, r6
 8009bac:	ea41 030c 	orr.w	r3, r1, ip
 8009bb0:	bf34      	ite	cc
 8009bb2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009bb6:	2100      	movcs	r1, #0
 8009bb8:	3015      	adds	r0, #21
 8009bba:	fa04 f000 	lsl.w	r0, r4, r0
 8009bbe:	fa21 f10e 	lsr.w	r1, r1, lr
 8009bc2:	ea40 0201 	orr.w	r2, r0, r1
 8009bc6:	ec43 2b10 	vmov	d0, r2, r3
 8009bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bcc:	42b7      	cmp	r7, r6
 8009bce:	bf3a      	itte	cc
 8009bd0:	f1a5 0608 	subcc.w	r6, r5, #8
 8009bd4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009bd8:	2100      	movcs	r1, #0
 8009bda:	380b      	subs	r0, #11
 8009bdc:	d015      	beq.n	8009c0a <__b2d+0x8e>
 8009bde:	4084      	lsls	r4, r0
 8009be0:	f1c0 0520 	rsb	r5, r0, #32
 8009be4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009be8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009bec:	42be      	cmp	r6, r7
 8009bee:	fa21 fc05 	lsr.w	ip, r1, r5
 8009bf2:	ea44 030c 	orr.w	r3, r4, ip
 8009bf6:	bf8c      	ite	hi
 8009bf8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009bfc:	2400      	movls	r4, #0
 8009bfe:	fa01 f000 	lsl.w	r0, r1, r0
 8009c02:	40ec      	lsrs	r4, r5
 8009c04:	ea40 0204 	orr.w	r2, r0, r4
 8009c08:	e7dd      	b.n	8009bc6 <__b2d+0x4a>
 8009c0a:	ea44 030c 	orr.w	r3, r4, ip
 8009c0e:	460a      	mov	r2, r1
 8009c10:	e7d9      	b.n	8009bc6 <__b2d+0x4a>
 8009c12:	bf00      	nop
 8009c14:	3ff00000 	.word	0x3ff00000

08009c18 <__d2b>:
 8009c18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c1c:	460e      	mov	r6, r1
 8009c1e:	2101      	movs	r1, #1
 8009c20:	ec59 8b10 	vmov	r8, r9, d0
 8009c24:	4615      	mov	r5, r2
 8009c26:	f7ff fcb6 	bl	8009596 <_Balloc>
 8009c2a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009c2e:	4607      	mov	r7, r0
 8009c30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c34:	bb34      	cbnz	r4, 8009c84 <__d2b+0x6c>
 8009c36:	9301      	str	r3, [sp, #4]
 8009c38:	f1b8 0300 	subs.w	r3, r8, #0
 8009c3c:	d027      	beq.n	8009c8e <__d2b+0x76>
 8009c3e:	a802      	add	r0, sp, #8
 8009c40:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009c44:	f7ff fd8a 	bl	800975c <__lo0bits>
 8009c48:	9900      	ldr	r1, [sp, #0]
 8009c4a:	b1f0      	cbz	r0, 8009c8a <__d2b+0x72>
 8009c4c:	9a01      	ldr	r2, [sp, #4]
 8009c4e:	f1c0 0320 	rsb	r3, r0, #32
 8009c52:	fa02 f303 	lsl.w	r3, r2, r3
 8009c56:	430b      	orrs	r3, r1
 8009c58:	40c2      	lsrs	r2, r0
 8009c5a:	617b      	str	r3, [r7, #20]
 8009c5c:	9201      	str	r2, [sp, #4]
 8009c5e:	9b01      	ldr	r3, [sp, #4]
 8009c60:	61bb      	str	r3, [r7, #24]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	bf14      	ite	ne
 8009c66:	2102      	movne	r1, #2
 8009c68:	2101      	moveq	r1, #1
 8009c6a:	6139      	str	r1, [r7, #16]
 8009c6c:	b1c4      	cbz	r4, 8009ca0 <__d2b+0x88>
 8009c6e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009c72:	4404      	add	r4, r0
 8009c74:	6034      	str	r4, [r6, #0]
 8009c76:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c7a:	6028      	str	r0, [r5, #0]
 8009c7c:	4638      	mov	r0, r7
 8009c7e:	b003      	add	sp, #12
 8009c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c88:	e7d5      	b.n	8009c36 <__d2b+0x1e>
 8009c8a:	6179      	str	r1, [r7, #20]
 8009c8c:	e7e7      	b.n	8009c5e <__d2b+0x46>
 8009c8e:	a801      	add	r0, sp, #4
 8009c90:	f7ff fd64 	bl	800975c <__lo0bits>
 8009c94:	9b01      	ldr	r3, [sp, #4]
 8009c96:	617b      	str	r3, [r7, #20]
 8009c98:	2101      	movs	r1, #1
 8009c9a:	6139      	str	r1, [r7, #16]
 8009c9c:	3020      	adds	r0, #32
 8009c9e:	e7e5      	b.n	8009c6c <__d2b+0x54>
 8009ca0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009ca4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ca8:	6030      	str	r0, [r6, #0]
 8009caa:	6918      	ldr	r0, [r3, #16]
 8009cac:	f7ff fd37 	bl	800971e <__hi0bits>
 8009cb0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009cb4:	e7e1      	b.n	8009c7a <__d2b+0x62>

08009cb6 <__ratio>:
 8009cb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cba:	4688      	mov	r8, r1
 8009cbc:	4669      	mov	r1, sp
 8009cbe:	4681      	mov	r9, r0
 8009cc0:	f7ff ff5c 	bl	8009b7c <__b2d>
 8009cc4:	a901      	add	r1, sp, #4
 8009cc6:	4640      	mov	r0, r8
 8009cc8:	ec57 6b10 	vmov	r6, r7, d0
 8009ccc:	f7ff ff56 	bl	8009b7c <__b2d>
 8009cd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cd4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009cd8:	eba3 0c02 	sub.w	ip, r3, r2
 8009cdc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ce0:	1a9b      	subs	r3, r3, r2
 8009ce2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009ce6:	ec5b ab10 	vmov	sl, fp, d0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	bfce      	itee	gt
 8009cee:	463a      	movgt	r2, r7
 8009cf0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009cf4:	465a      	movle	r2, fp
 8009cf6:	4659      	mov	r1, fp
 8009cf8:	463d      	mov	r5, r7
 8009cfa:	bfd4      	ite	le
 8009cfc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009d00:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009d04:	4630      	mov	r0, r6
 8009d06:	ee10 2a10 	vmov	r2, s0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	f7f6 fdad 	bl	800086c <__aeabi_ddiv>
 8009d12:	ec41 0b10 	vmov	d0, r0, r1
 8009d16:	b003      	add	sp, #12
 8009d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d1c <__copybits>:
 8009d1c:	3901      	subs	r1, #1
 8009d1e:	b510      	push	{r4, lr}
 8009d20:	1149      	asrs	r1, r1, #5
 8009d22:	6914      	ldr	r4, [r2, #16]
 8009d24:	3101      	adds	r1, #1
 8009d26:	f102 0314 	add.w	r3, r2, #20
 8009d2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d32:	42a3      	cmp	r3, r4
 8009d34:	4602      	mov	r2, r0
 8009d36:	d303      	bcc.n	8009d40 <__copybits+0x24>
 8009d38:	2300      	movs	r3, #0
 8009d3a:	428a      	cmp	r2, r1
 8009d3c:	d305      	bcc.n	8009d4a <__copybits+0x2e>
 8009d3e:	bd10      	pop	{r4, pc}
 8009d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d44:	f840 2b04 	str.w	r2, [r0], #4
 8009d48:	e7f3      	b.n	8009d32 <__copybits+0x16>
 8009d4a:	f842 3b04 	str.w	r3, [r2], #4
 8009d4e:	e7f4      	b.n	8009d3a <__copybits+0x1e>

08009d50 <__any_on>:
 8009d50:	f100 0214 	add.w	r2, r0, #20
 8009d54:	6900      	ldr	r0, [r0, #16]
 8009d56:	114b      	asrs	r3, r1, #5
 8009d58:	4298      	cmp	r0, r3
 8009d5a:	b510      	push	{r4, lr}
 8009d5c:	db11      	blt.n	8009d82 <__any_on+0x32>
 8009d5e:	dd0a      	ble.n	8009d76 <__any_on+0x26>
 8009d60:	f011 011f 	ands.w	r1, r1, #31
 8009d64:	d007      	beq.n	8009d76 <__any_on+0x26>
 8009d66:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d6a:	fa24 f001 	lsr.w	r0, r4, r1
 8009d6e:	fa00 f101 	lsl.w	r1, r0, r1
 8009d72:	428c      	cmp	r4, r1
 8009d74:	d10b      	bne.n	8009d8e <__any_on+0x3e>
 8009d76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d803      	bhi.n	8009d86 <__any_on+0x36>
 8009d7e:	2000      	movs	r0, #0
 8009d80:	bd10      	pop	{r4, pc}
 8009d82:	4603      	mov	r3, r0
 8009d84:	e7f7      	b.n	8009d76 <__any_on+0x26>
 8009d86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d8a:	2900      	cmp	r1, #0
 8009d8c:	d0f5      	beq.n	8009d7a <__any_on+0x2a>
 8009d8e:	2001      	movs	r0, #1
 8009d90:	e7f6      	b.n	8009d80 <__any_on+0x30>

08009d92 <_calloc_r>:
 8009d92:	b538      	push	{r3, r4, r5, lr}
 8009d94:	fb02 f401 	mul.w	r4, r2, r1
 8009d98:	4621      	mov	r1, r4
 8009d9a:	f000 f857 	bl	8009e4c <_malloc_r>
 8009d9e:	4605      	mov	r5, r0
 8009da0:	b118      	cbz	r0, 8009daa <_calloc_r+0x18>
 8009da2:	4622      	mov	r2, r4
 8009da4:	2100      	movs	r1, #0
 8009da6:	f7fc fd35 	bl	8006814 <memset>
 8009daa:	4628      	mov	r0, r5
 8009dac:	bd38      	pop	{r3, r4, r5, pc}
	...

08009db0 <_free_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4605      	mov	r5, r0
 8009db4:	2900      	cmp	r1, #0
 8009db6:	d045      	beq.n	8009e44 <_free_r+0x94>
 8009db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dbc:	1f0c      	subs	r4, r1, #4
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	bfb8      	it	lt
 8009dc2:	18e4      	addlt	r4, r4, r3
 8009dc4:	f000 fa36 	bl	800a234 <__malloc_lock>
 8009dc8:	4a1f      	ldr	r2, [pc, #124]	; (8009e48 <_free_r+0x98>)
 8009dca:	6813      	ldr	r3, [r2, #0]
 8009dcc:	4610      	mov	r0, r2
 8009dce:	b933      	cbnz	r3, 8009dde <_free_r+0x2e>
 8009dd0:	6063      	str	r3, [r4, #4]
 8009dd2:	6014      	str	r4, [r2, #0]
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dda:	f000 ba2c 	b.w	800a236 <__malloc_unlock>
 8009dde:	42a3      	cmp	r3, r4
 8009de0:	d90c      	bls.n	8009dfc <_free_r+0x4c>
 8009de2:	6821      	ldr	r1, [r4, #0]
 8009de4:	1862      	adds	r2, r4, r1
 8009de6:	4293      	cmp	r3, r2
 8009de8:	bf04      	itt	eq
 8009dea:	681a      	ldreq	r2, [r3, #0]
 8009dec:	685b      	ldreq	r3, [r3, #4]
 8009dee:	6063      	str	r3, [r4, #4]
 8009df0:	bf04      	itt	eq
 8009df2:	1852      	addeq	r2, r2, r1
 8009df4:	6022      	streq	r2, [r4, #0]
 8009df6:	6004      	str	r4, [r0, #0]
 8009df8:	e7ec      	b.n	8009dd4 <_free_r+0x24>
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	685a      	ldr	r2, [r3, #4]
 8009dfe:	b10a      	cbz	r2, 8009e04 <_free_r+0x54>
 8009e00:	42a2      	cmp	r2, r4
 8009e02:	d9fa      	bls.n	8009dfa <_free_r+0x4a>
 8009e04:	6819      	ldr	r1, [r3, #0]
 8009e06:	1858      	adds	r0, r3, r1
 8009e08:	42a0      	cmp	r0, r4
 8009e0a:	d10b      	bne.n	8009e24 <_free_r+0x74>
 8009e0c:	6820      	ldr	r0, [r4, #0]
 8009e0e:	4401      	add	r1, r0
 8009e10:	1858      	adds	r0, r3, r1
 8009e12:	4282      	cmp	r2, r0
 8009e14:	6019      	str	r1, [r3, #0]
 8009e16:	d1dd      	bne.n	8009dd4 <_free_r+0x24>
 8009e18:	6810      	ldr	r0, [r2, #0]
 8009e1a:	6852      	ldr	r2, [r2, #4]
 8009e1c:	605a      	str	r2, [r3, #4]
 8009e1e:	4401      	add	r1, r0
 8009e20:	6019      	str	r1, [r3, #0]
 8009e22:	e7d7      	b.n	8009dd4 <_free_r+0x24>
 8009e24:	d902      	bls.n	8009e2c <_free_r+0x7c>
 8009e26:	230c      	movs	r3, #12
 8009e28:	602b      	str	r3, [r5, #0]
 8009e2a:	e7d3      	b.n	8009dd4 <_free_r+0x24>
 8009e2c:	6820      	ldr	r0, [r4, #0]
 8009e2e:	1821      	adds	r1, r4, r0
 8009e30:	428a      	cmp	r2, r1
 8009e32:	bf04      	itt	eq
 8009e34:	6811      	ldreq	r1, [r2, #0]
 8009e36:	6852      	ldreq	r2, [r2, #4]
 8009e38:	6062      	str	r2, [r4, #4]
 8009e3a:	bf04      	itt	eq
 8009e3c:	1809      	addeq	r1, r1, r0
 8009e3e:	6021      	streq	r1, [r4, #0]
 8009e40:	605c      	str	r4, [r3, #4]
 8009e42:	e7c7      	b.n	8009dd4 <_free_r+0x24>
 8009e44:	bd38      	pop	{r3, r4, r5, pc}
 8009e46:	bf00      	nop
 8009e48:	20000774 	.word	0x20000774

08009e4c <_malloc_r>:
 8009e4c:	b570      	push	{r4, r5, r6, lr}
 8009e4e:	1ccd      	adds	r5, r1, #3
 8009e50:	f025 0503 	bic.w	r5, r5, #3
 8009e54:	3508      	adds	r5, #8
 8009e56:	2d0c      	cmp	r5, #12
 8009e58:	bf38      	it	cc
 8009e5a:	250c      	movcc	r5, #12
 8009e5c:	2d00      	cmp	r5, #0
 8009e5e:	4606      	mov	r6, r0
 8009e60:	db01      	blt.n	8009e66 <_malloc_r+0x1a>
 8009e62:	42a9      	cmp	r1, r5
 8009e64:	d903      	bls.n	8009e6e <_malloc_r+0x22>
 8009e66:	230c      	movs	r3, #12
 8009e68:	6033      	str	r3, [r6, #0]
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	bd70      	pop	{r4, r5, r6, pc}
 8009e6e:	f000 f9e1 	bl	800a234 <__malloc_lock>
 8009e72:	4a21      	ldr	r2, [pc, #132]	; (8009ef8 <_malloc_r+0xac>)
 8009e74:	6814      	ldr	r4, [r2, #0]
 8009e76:	4621      	mov	r1, r4
 8009e78:	b991      	cbnz	r1, 8009ea0 <_malloc_r+0x54>
 8009e7a:	4c20      	ldr	r4, [pc, #128]	; (8009efc <_malloc_r+0xb0>)
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	b91b      	cbnz	r3, 8009e88 <_malloc_r+0x3c>
 8009e80:	4630      	mov	r0, r6
 8009e82:	f000 f98f 	bl	800a1a4 <_sbrk_r>
 8009e86:	6020      	str	r0, [r4, #0]
 8009e88:	4629      	mov	r1, r5
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	f000 f98a 	bl	800a1a4 <_sbrk_r>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d124      	bne.n	8009ede <_malloc_r+0x92>
 8009e94:	230c      	movs	r3, #12
 8009e96:	6033      	str	r3, [r6, #0]
 8009e98:	4630      	mov	r0, r6
 8009e9a:	f000 f9cc 	bl	800a236 <__malloc_unlock>
 8009e9e:	e7e4      	b.n	8009e6a <_malloc_r+0x1e>
 8009ea0:	680b      	ldr	r3, [r1, #0]
 8009ea2:	1b5b      	subs	r3, r3, r5
 8009ea4:	d418      	bmi.n	8009ed8 <_malloc_r+0x8c>
 8009ea6:	2b0b      	cmp	r3, #11
 8009ea8:	d90f      	bls.n	8009eca <_malloc_r+0x7e>
 8009eaa:	600b      	str	r3, [r1, #0]
 8009eac:	50cd      	str	r5, [r1, r3]
 8009eae:	18cc      	adds	r4, r1, r3
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	f000 f9c0 	bl	800a236 <__malloc_unlock>
 8009eb6:	f104 000b 	add.w	r0, r4, #11
 8009eba:	1d23      	adds	r3, r4, #4
 8009ebc:	f020 0007 	bic.w	r0, r0, #7
 8009ec0:	1ac3      	subs	r3, r0, r3
 8009ec2:	d0d3      	beq.n	8009e6c <_malloc_r+0x20>
 8009ec4:	425a      	negs	r2, r3
 8009ec6:	50e2      	str	r2, [r4, r3]
 8009ec8:	e7d0      	b.n	8009e6c <_malloc_r+0x20>
 8009eca:	428c      	cmp	r4, r1
 8009ecc:	684b      	ldr	r3, [r1, #4]
 8009ece:	bf16      	itet	ne
 8009ed0:	6063      	strne	r3, [r4, #4]
 8009ed2:	6013      	streq	r3, [r2, #0]
 8009ed4:	460c      	movne	r4, r1
 8009ed6:	e7eb      	b.n	8009eb0 <_malloc_r+0x64>
 8009ed8:	460c      	mov	r4, r1
 8009eda:	6849      	ldr	r1, [r1, #4]
 8009edc:	e7cc      	b.n	8009e78 <_malloc_r+0x2c>
 8009ede:	1cc4      	adds	r4, r0, #3
 8009ee0:	f024 0403 	bic.w	r4, r4, #3
 8009ee4:	42a0      	cmp	r0, r4
 8009ee6:	d005      	beq.n	8009ef4 <_malloc_r+0xa8>
 8009ee8:	1a21      	subs	r1, r4, r0
 8009eea:	4630      	mov	r0, r6
 8009eec:	f000 f95a 	bl	800a1a4 <_sbrk_r>
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	d0cf      	beq.n	8009e94 <_malloc_r+0x48>
 8009ef4:	6025      	str	r5, [r4, #0]
 8009ef6:	e7db      	b.n	8009eb0 <_malloc_r+0x64>
 8009ef8:	20000774 	.word	0x20000774
 8009efc:	20000778 	.word	0x20000778

08009f00 <__ssputs_r>:
 8009f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f04:	688e      	ldr	r6, [r1, #8]
 8009f06:	429e      	cmp	r6, r3
 8009f08:	4682      	mov	sl, r0
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	4690      	mov	r8, r2
 8009f0e:	4699      	mov	r9, r3
 8009f10:	d837      	bhi.n	8009f82 <__ssputs_r+0x82>
 8009f12:	898a      	ldrh	r2, [r1, #12]
 8009f14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f18:	d031      	beq.n	8009f7e <__ssputs_r+0x7e>
 8009f1a:	6825      	ldr	r5, [r4, #0]
 8009f1c:	6909      	ldr	r1, [r1, #16]
 8009f1e:	1a6f      	subs	r7, r5, r1
 8009f20:	6965      	ldr	r5, [r4, #20]
 8009f22:	2302      	movs	r3, #2
 8009f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f28:	fb95 f5f3 	sdiv	r5, r5, r3
 8009f2c:	f109 0301 	add.w	r3, r9, #1
 8009f30:	443b      	add	r3, r7
 8009f32:	429d      	cmp	r5, r3
 8009f34:	bf38      	it	cc
 8009f36:	461d      	movcc	r5, r3
 8009f38:	0553      	lsls	r3, r2, #21
 8009f3a:	d530      	bpl.n	8009f9e <__ssputs_r+0x9e>
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	f7ff ff85 	bl	8009e4c <_malloc_r>
 8009f42:	4606      	mov	r6, r0
 8009f44:	b950      	cbnz	r0, 8009f5c <__ssputs_r+0x5c>
 8009f46:	230c      	movs	r3, #12
 8009f48:	f8ca 3000 	str.w	r3, [sl]
 8009f4c:	89a3      	ldrh	r3, [r4, #12]
 8009f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f52:	81a3      	strh	r3, [r4, #12]
 8009f54:	f04f 30ff 	mov.w	r0, #4294967295
 8009f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f5c:	463a      	mov	r2, r7
 8009f5e:	6921      	ldr	r1, [r4, #16]
 8009f60:	f7ff fb0e 	bl	8009580 <memcpy>
 8009f64:	89a3      	ldrh	r3, [r4, #12]
 8009f66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f6e:	81a3      	strh	r3, [r4, #12]
 8009f70:	6126      	str	r6, [r4, #16]
 8009f72:	6165      	str	r5, [r4, #20]
 8009f74:	443e      	add	r6, r7
 8009f76:	1bed      	subs	r5, r5, r7
 8009f78:	6026      	str	r6, [r4, #0]
 8009f7a:	60a5      	str	r5, [r4, #8]
 8009f7c:	464e      	mov	r6, r9
 8009f7e:	454e      	cmp	r6, r9
 8009f80:	d900      	bls.n	8009f84 <__ssputs_r+0x84>
 8009f82:	464e      	mov	r6, r9
 8009f84:	4632      	mov	r2, r6
 8009f86:	4641      	mov	r1, r8
 8009f88:	6820      	ldr	r0, [r4, #0]
 8009f8a:	f000 f93a 	bl	800a202 <memmove>
 8009f8e:	68a3      	ldr	r3, [r4, #8]
 8009f90:	1b9b      	subs	r3, r3, r6
 8009f92:	60a3      	str	r3, [r4, #8]
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	441e      	add	r6, r3
 8009f98:	6026      	str	r6, [r4, #0]
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	e7dc      	b.n	8009f58 <__ssputs_r+0x58>
 8009f9e:	462a      	mov	r2, r5
 8009fa0:	f000 f94a 	bl	800a238 <_realloc_r>
 8009fa4:	4606      	mov	r6, r0
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d1e2      	bne.n	8009f70 <__ssputs_r+0x70>
 8009faa:	6921      	ldr	r1, [r4, #16]
 8009fac:	4650      	mov	r0, sl
 8009fae:	f7ff feff 	bl	8009db0 <_free_r>
 8009fb2:	e7c8      	b.n	8009f46 <__ssputs_r+0x46>

08009fb4 <_svfiprintf_r>:
 8009fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	461d      	mov	r5, r3
 8009fba:	898b      	ldrh	r3, [r1, #12]
 8009fbc:	061f      	lsls	r7, r3, #24
 8009fbe:	b09d      	sub	sp, #116	; 0x74
 8009fc0:	4680      	mov	r8, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	4616      	mov	r6, r2
 8009fc6:	d50f      	bpl.n	8009fe8 <_svfiprintf_r+0x34>
 8009fc8:	690b      	ldr	r3, [r1, #16]
 8009fca:	b96b      	cbnz	r3, 8009fe8 <_svfiprintf_r+0x34>
 8009fcc:	2140      	movs	r1, #64	; 0x40
 8009fce:	f7ff ff3d 	bl	8009e4c <_malloc_r>
 8009fd2:	6020      	str	r0, [r4, #0]
 8009fd4:	6120      	str	r0, [r4, #16]
 8009fd6:	b928      	cbnz	r0, 8009fe4 <_svfiprintf_r+0x30>
 8009fd8:	230c      	movs	r3, #12
 8009fda:	f8c8 3000 	str.w	r3, [r8]
 8009fde:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe2:	e0c8      	b.n	800a176 <_svfiprintf_r+0x1c2>
 8009fe4:	2340      	movs	r3, #64	; 0x40
 8009fe6:	6163      	str	r3, [r4, #20]
 8009fe8:	2300      	movs	r3, #0
 8009fea:	9309      	str	r3, [sp, #36]	; 0x24
 8009fec:	2320      	movs	r3, #32
 8009fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ff2:	2330      	movs	r3, #48	; 0x30
 8009ff4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ff8:	9503      	str	r5, [sp, #12]
 8009ffa:	f04f 0b01 	mov.w	fp, #1
 8009ffe:	4637      	mov	r7, r6
 800a000:	463d      	mov	r5, r7
 800a002:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a006:	b10b      	cbz	r3, 800a00c <_svfiprintf_r+0x58>
 800a008:	2b25      	cmp	r3, #37	; 0x25
 800a00a:	d13e      	bne.n	800a08a <_svfiprintf_r+0xd6>
 800a00c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a010:	d00b      	beq.n	800a02a <_svfiprintf_r+0x76>
 800a012:	4653      	mov	r3, sl
 800a014:	4632      	mov	r2, r6
 800a016:	4621      	mov	r1, r4
 800a018:	4640      	mov	r0, r8
 800a01a:	f7ff ff71 	bl	8009f00 <__ssputs_r>
 800a01e:	3001      	adds	r0, #1
 800a020:	f000 80a4 	beq.w	800a16c <_svfiprintf_r+0x1b8>
 800a024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a026:	4453      	add	r3, sl
 800a028:	9309      	str	r3, [sp, #36]	; 0x24
 800a02a:	783b      	ldrb	r3, [r7, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 809d 	beq.w	800a16c <_svfiprintf_r+0x1b8>
 800a032:	2300      	movs	r3, #0
 800a034:	f04f 32ff 	mov.w	r2, #4294967295
 800a038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a03c:	9304      	str	r3, [sp, #16]
 800a03e:	9307      	str	r3, [sp, #28]
 800a040:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a044:	931a      	str	r3, [sp, #104]	; 0x68
 800a046:	462f      	mov	r7, r5
 800a048:	2205      	movs	r2, #5
 800a04a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a04e:	4850      	ldr	r0, [pc, #320]	; (800a190 <_svfiprintf_r+0x1dc>)
 800a050:	f7f6 f8d6 	bl	8000200 <memchr>
 800a054:	9b04      	ldr	r3, [sp, #16]
 800a056:	b9d0      	cbnz	r0, 800a08e <_svfiprintf_r+0xda>
 800a058:	06d9      	lsls	r1, r3, #27
 800a05a:	bf44      	itt	mi
 800a05c:	2220      	movmi	r2, #32
 800a05e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a062:	071a      	lsls	r2, r3, #28
 800a064:	bf44      	itt	mi
 800a066:	222b      	movmi	r2, #43	; 0x2b
 800a068:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a06c:	782a      	ldrb	r2, [r5, #0]
 800a06e:	2a2a      	cmp	r2, #42	; 0x2a
 800a070:	d015      	beq.n	800a09e <_svfiprintf_r+0xea>
 800a072:	9a07      	ldr	r2, [sp, #28]
 800a074:	462f      	mov	r7, r5
 800a076:	2000      	movs	r0, #0
 800a078:	250a      	movs	r5, #10
 800a07a:	4639      	mov	r1, r7
 800a07c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a080:	3b30      	subs	r3, #48	; 0x30
 800a082:	2b09      	cmp	r3, #9
 800a084:	d94d      	bls.n	800a122 <_svfiprintf_r+0x16e>
 800a086:	b1b8      	cbz	r0, 800a0b8 <_svfiprintf_r+0x104>
 800a088:	e00f      	b.n	800a0aa <_svfiprintf_r+0xf6>
 800a08a:	462f      	mov	r7, r5
 800a08c:	e7b8      	b.n	800a000 <_svfiprintf_r+0x4c>
 800a08e:	4a40      	ldr	r2, [pc, #256]	; (800a190 <_svfiprintf_r+0x1dc>)
 800a090:	1a80      	subs	r0, r0, r2
 800a092:	fa0b f000 	lsl.w	r0, fp, r0
 800a096:	4318      	orrs	r0, r3
 800a098:	9004      	str	r0, [sp, #16]
 800a09a:	463d      	mov	r5, r7
 800a09c:	e7d3      	b.n	800a046 <_svfiprintf_r+0x92>
 800a09e:	9a03      	ldr	r2, [sp, #12]
 800a0a0:	1d11      	adds	r1, r2, #4
 800a0a2:	6812      	ldr	r2, [r2, #0]
 800a0a4:	9103      	str	r1, [sp, #12]
 800a0a6:	2a00      	cmp	r2, #0
 800a0a8:	db01      	blt.n	800a0ae <_svfiprintf_r+0xfa>
 800a0aa:	9207      	str	r2, [sp, #28]
 800a0ac:	e004      	b.n	800a0b8 <_svfiprintf_r+0x104>
 800a0ae:	4252      	negs	r2, r2
 800a0b0:	f043 0302 	orr.w	r3, r3, #2
 800a0b4:	9207      	str	r2, [sp, #28]
 800a0b6:	9304      	str	r3, [sp, #16]
 800a0b8:	783b      	ldrb	r3, [r7, #0]
 800a0ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a0bc:	d10c      	bne.n	800a0d8 <_svfiprintf_r+0x124>
 800a0be:	787b      	ldrb	r3, [r7, #1]
 800a0c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a0c2:	d133      	bne.n	800a12c <_svfiprintf_r+0x178>
 800a0c4:	9b03      	ldr	r3, [sp, #12]
 800a0c6:	1d1a      	adds	r2, r3, #4
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	9203      	str	r2, [sp, #12]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	bfb8      	it	lt
 800a0d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0d4:	3702      	adds	r7, #2
 800a0d6:	9305      	str	r3, [sp, #20]
 800a0d8:	4d2e      	ldr	r5, [pc, #184]	; (800a194 <_svfiprintf_r+0x1e0>)
 800a0da:	7839      	ldrb	r1, [r7, #0]
 800a0dc:	2203      	movs	r2, #3
 800a0de:	4628      	mov	r0, r5
 800a0e0:	f7f6 f88e 	bl	8000200 <memchr>
 800a0e4:	b138      	cbz	r0, 800a0f6 <_svfiprintf_r+0x142>
 800a0e6:	2340      	movs	r3, #64	; 0x40
 800a0e8:	1b40      	subs	r0, r0, r5
 800a0ea:	fa03 f000 	lsl.w	r0, r3, r0
 800a0ee:	9b04      	ldr	r3, [sp, #16]
 800a0f0:	4303      	orrs	r3, r0
 800a0f2:	3701      	adds	r7, #1
 800a0f4:	9304      	str	r3, [sp, #16]
 800a0f6:	7839      	ldrb	r1, [r7, #0]
 800a0f8:	4827      	ldr	r0, [pc, #156]	; (800a198 <_svfiprintf_r+0x1e4>)
 800a0fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0fe:	2206      	movs	r2, #6
 800a100:	1c7e      	adds	r6, r7, #1
 800a102:	f7f6 f87d 	bl	8000200 <memchr>
 800a106:	2800      	cmp	r0, #0
 800a108:	d038      	beq.n	800a17c <_svfiprintf_r+0x1c8>
 800a10a:	4b24      	ldr	r3, [pc, #144]	; (800a19c <_svfiprintf_r+0x1e8>)
 800a10c:	bb13      	cbnz	r3, 800a154 <_svfiprintf_r+0x1a0>
 800a10e:	9b03      	ldr	r3, [sp, #12]
 800a110:	3307      	adds	r3, #7
 800a112:	f023 0307 	bic.w	r3, r3, #7
 800a116:	3308      	adds	r3, #8
 800a118:	9303      	str	r3, [sp, #12]
 800a11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a11c:	444b      	add	r3, r9
 800a11e:	9309      	str	r3, [sp, #36]	; 0x24
 800a120:	e76d      	b.n	8009ffe <_svfiprintf_r+0x4a>
 800a122:	fb05 3202 	mla	r2, r5, r2, r3
 800a126:	2001      	movs	r0, #1
 800a128:	460f      	mov	r7, r1
 800a12a:	e7a6      	b.n	800a07a <_svfiprintf_r+0xc6>
 800a12c:	2300      	movs	r3, #0
 800a12e:	3701      	adds	r7, #1
 800a130:	9305      	str	r3, [sp, #20]
 800a132:	4619      	mov	r1, r3
 800a134:	250a      	movs	r5, #10
 800a136:	4638      	mov	r0, r7
 800a138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a13c:	3a30      	subs	r2, #48	; 0x30
 800a13e:	2a09      	cmp	r2, #9
 800a140:	d903      	bls.n	800a14a <_svfiprintf_r+0x196>
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0c8      	beq.n	800a0d8 <_svfiprintf_r+0x124>
 800a146:	9105      	str	r1, [sp, #20]
 800a148:	e7c6      	b.n	800a0d8 <_svfiprintf_r+0x124>
 800a14a:	fb05 2101 	mla	r1, r5, r1, r2
 800a14e:	2301      	movs	r3, #1
 800a150:	4607      	mov	r7, r0
 800a152:	e7f0      	b.n	800a136 <_svfiprintf_r+0x182>
 800a154:	ab03      	add	r3, sp, #12
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	4622      	mov	r2, r4
 800a15a:	4b11      	ldr	r3, [pc, #68]	; (800a1a0 <_svfiprintf_r+0x1ec>)
 800a15c:	a904      	add	r1, sp, #16
 800a15e:	4640      	mov	r0, r8
 800a160:	f7fc fbf4 	bl	800694c <_printf_float>
 800a164:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a168:	4681      	mov	r9, r0
 800a16a:	d1d6      	bne.n	800a11a <_svfiprintf_r+0x166>
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	065b      	lsls	r3, r3, #25
 800a170:	f53f af35 	bmi.w	8009fde <_svfiprintf_r+0x2a>
 800a174:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a176:	b01d      	add	sp, #116	; 0x74
 800a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17c:	ab03      	add	r3, sp, #12
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	4622      	mov	r2, r4
 800a182:	4b07      	ldr	r3, [pc, #28]	; (800a1a0 <_svfiprintf_r+0x1ec>)
 800a184:	a904      	add	r1, sp, #16
 800a186:	4640      	mov	r0, r8
 800a188:	f7fc fe96 	bl	8006eb8 <_printf_i>
 800a18c:	e7ea      	b.n	800a164 <_svfiprintf_r+0x1b0>
 800a18e:	bf00      	nop
 800a190:	0800d054 	.word	0x0800d054
 800a194:	0800d05a 	.word	0x0800d05a
 800a198:	0800d05e 	.word	0x0800d05e
 800a19c:	0800694d 	.word	0x0800694d
 800a1a0:	08009f01 	.word	0x08009f01

0800a1a4 <_sbrk_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	4c06      	ldr	r4, [pc, #24]	; (800a1c0 <_sbrk_r+0x1c>)
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	6023      	str	r3, [r4, #0]
 800a1b0:	f7f8 fe0a 	bl	8002dc8 <_sbrk>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	d102      	bne.n	800a1be <_sbrk_r+0x1a>
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	b103      	cbz	r3, 800a1be <_sbrk_r+0x1a>
 800a1bc:	602b      	str	r3, [r5, #0]
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
 800a1c0:	20000d74 	.word	0x20000d74

0800a1c4 <strncmp>:
 800a1c4:	b510      	push	{r4, lr}
 800a1c6:	b16a      	cbz	r2, 800a1e4 <strncmp+0x20>
 800a1c8:	3901      	subs	r1, #1
 800a1ca:	1884      	adds	r4, r0, r2
 800a1cc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a1d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d103      	bne.n	800a1e0 <strncmp+0x1c>
 800a1d8:	42a0      	cmp	r0, r4
 800a1da:	d001      	beq.n	800a1e0 <strncmp+0x1c>
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1f5      	bne.n	800a1cc <strncmp+0x8>
 800a1e0:	1a98      	subs	r0, r3, r2
 800a1e2:	bd10      	pop	{r4, pc}
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	e7fc      	b.n	800a1e2 <strncmp+0x1e>

0800a1e8 <__ascii_wctomb>:
 800a1e8:	b149      	cbz	r1, 800a1fe <__ascii_wctomb+0x16>
 800a1ea:	2aff      	cmp	r2, #255	; 0xff
 800a1ec:	bf85      	ittet	hi
 800a1ee:	238a      	movhi	r3, #138	; 0x8a
 800a1f0:	6003      	strhi	r3, [r0, #0]
 800a1f2:	700a      	strbls	r2, [r1, #0]
 800a1f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a1f8:	bf98      	it	ls
 800a1fa:	2001      	movls	r0, #1
 800a1fc:	4770      	bx	lr
 800a1fe:	4608      	mov	r0, r1
 800a200:	4770      	bx	lr

0800a202 <memmove>:
 800a202:	4288      	cmp	r0, r1
 800a204:	b510      	push	{r4, lr}
 800a206:	eb01 0302 	add.w	r3, r1, r2
 800a20a:	d807      	bhi.n	800a21c <memmove+0x1a>
 800a20c:	1e42      	subs	r2, r0, #1
 800a20e:	4299      	cmp	r1, r3
 800a210:	d00a      	beq.n	800a228 <memmove+0x26>
 800a212:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a216:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a21a:	e7f8      	b.n	800a20e <memmove+0xc>
 800a21c:	4283      	cmp	r3, r0
 800a21e:	d9f5      	bls.n	800a20c <memmove+0xa>
 800a220:	1881      	adds	r1, r0, r2
 800a222:	1ad2      	subs	r2, r2, r3
 800a224:	42d3      	cmn	r3, r2
 800a226:	d100      	bne.n	800a22a <memmove+0x28>
 800a228:	bd10      	pop	{r4, pc}
 800a22a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a22e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a232:	e7f7      	b.n	800a224 <memmove+0x22>

0800a234 <__malloc_lock>:
 800a234:	4770      	bx	lr

0800a236 <__malloc_unlock>:
 800a236:	4770      	bx	lr

0800a238 <_realloc_r>:
 800a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23a:	4607      	mov	r7, r0
 800a23c:	4614      	mov	r4, r2
 800a23e:	460e      	mov	r6, r1
 800a240:	b921      	cbnz	r1, 800a24c <_realloc_r+0x14>
 800a242:	4611      	mov	r1, r2
 800a244:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a248:	f7ff be00 	b.w	8009e4c <_malloc_r>
 800a24c:	b922      	cbnz	r2, 800a258 <_realloc_r+0x20>
 800a24e:	f7ff fdaf 	bl	8009db0 <_free_r>
 800a252:	4625      	mov	r5, r4
 800a254:	4628      	mov	r0, r5
 800a256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a258:	f000 f814 	bl	800a284 <_malloc_usable_size_r>
 800a25c:	42a0      	cmp	r0, r4
 800a25e:	d20f      	bcs.n	800a280 <_realloc_r+0x48>
 800a260:	4621      	mov	r1, r4
 800a262:	4638      	mov	r0, r7
 800a264:	f7ff fdf2 	bl	8009e4c <_malloc_r>
 800a268:	4605      	mov	r5, r0
 800a26a:	2800      	cmp	r0, #0
 800a26c:	d0f2      	beq.n	800a254 <_realloc_r+0x1c>
 800a26e:	4631      	mov	r1, r6
 800a270:	4622      	mov	r2, r4
 800a272:	f7ff f985 	bl	8009580 <memcpy>
 800a276:	4631      	mov	r1, r6
 800a278:	4638      	mov	r0, r7
 800a27a:	f7ff fd99 	bl	8009db0 <_free_r>
 800a27e:	e7e9      	b.n	800a254 <_realloc_r+0x1c>
 800a280:	4635      	mov	r5, r6
 800a282:	e7e7      	b.n	800a254 <_realloc_r+0x1c>

0800a284 <_malloc_usable_size_r>:
 800a284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a288:	1f18      	subs	r0, r3, #4
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	bfbc      	itt	lt
 800a28e:	580b      	ldrlt	r3, [r1, r0]
 800a290:	18c0      	addlt	r0, r0, r3
 800a292:	4770      	bx	lr

0800a294 <sqrt>:
 800a294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a298:	ed2d 8b02 	vpush	{d8}
 800a29c:	b08b      	sub	sp, #44	; 0x2c
 800a29e:	ec55 4b10 	vmov	r4, r5, d0
 800a2a2:	f000 f851 	bl	800a348 <__ieee754_sqrt>
 800a2a6:	4b26      	ldr	r3, [pc, #152]	; (800a340 <sqrt+0xac>)
 800a2a8:	eeb0 8a40 	vmov.f32	s16, s0
 800a2ac:	eef0 8a60 	vmov.f32	s17, s1
 800a2b0:	f993 6000 	ldrsb.w	r6, [r3]
 800a2b4:	1c73      	adds	r3, r6, #1
 800a2b6:	d02a      	beq.n	800a30e <sqrt+0x7a>
 800a2b8:	4622      	mov	r2, r4
 800a2ba:	462b      	mov	r3, r5
 800a2bc:	4620      	mov	r0, r4
 800a2be:	4629      	mov	r1, r5
 800a2c0:	f7f6 fc44 	bl	8000b4c <__aeabi_dcmpun>
 800a2c4:	4607      	mov	r7, r0
 800a2c6:	bb10      	cbnz	r0, 800a30e <sqrt+0x7a>
 800a2c8:	f04f 0800 	mov.w	r8, #0
 800a2cc:	f04f 0900 	mov.w	r9, #0
 800a2d0:	4642      	mov	r2, r8
 800a2d2:	464b      	mov	r3, r9
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	f7f6 fc10 	bl	8000afc <__aeabi_dcmplt>
 800a2dc:	b1b8      	cbz	r0, 800a30e <sqrt+0x7a>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	4b18      	ldr	r3, [pc, #96]	; (800a344 <sqrt+0xb0>)
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	9708      	str	r7, [sp, #32]
 800a2e8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a2ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a2f0:	b9b6      	cbnz	r6, 800a320 <sqrt+0x8c>
 800a2f2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a2f6:	4668      	mov	r0, sp
 800a2f8:	f000 f8d6 	bl	800a4a8 <matherr>
 800a2fc:	b1d0      	cbz	r0, 800a334 <sqrt+0xa0>
 800a2fe:	9b08      	ldr	r3, [sp, #32]
 800a300:	b11b      	cbz	r3, 800a30a <sqrt+0x76>
 800a302:	f7fc fa5d 	bl	80067c0 <__errno>
 800a306:	9b08      	ldr	r3, [sp, #32]
 800a308:	6003      	str	r3, [r0, #0]
 800a30a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800a30e:	eeb0 0a48 	vmov.f32	s0, s16
 800a312:	eef0 0a68 	vmov.f32	s1, s17
 800a316:	b00b      	add	sp, #44	; 0x2c
 800a318:	ecbd 8b02 	vpop	{d8}
 800a31c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a320:	4642      	mov	r2, r8
 800a322:	464b      	mov	r3, r9
 800a324:	4640      	mov	r0, r8
 800a326:	4649      	mov	r1, r9
 800a328:	f7f6 faa0 	bl	800086c <__aeabi_ddiv>
 800a32c:	2e02      	cmp	r6, #2
 800a32e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a332:	d1e0      	bne.n	800a2f6 <sqrt+0x62>
 800a334:	f7fc fa44 	bl	80067c0 <__errno>
 800a338:	2321      	movs	r3, #33	; 0x21
 800a33a:	6003      	str	r3, [r0, #0]
 800a33c:	e7df      	b.n	800a2fe <sqrt+0x6a>
 800a33e:	bf00      	nop
 800a340:	20000320 	.word	0x20000320
 800a344:	0800d166 	.word	0x0800d166

0800a348 <__ieee754_sqrt>:
 800a348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a34c:	4955      	ldr	r1, [pc, #340]	; (800a4a4 <__ieee754_sqrt+0x15c>)
 800a34e:	ec55 4b10 	vmov	r4, r5, d0
 800a352:	43a9      	bics	r1, r5
 800a354:	462b      	mov	r3, r5
 800a356:	462a      	mov	r2, r5
 800a358:	d112      	bne.n	800a380 <__ieee754_sqrt+0x38>
 800a35a:	ee10 2a10 	vmov	r2, s0
 800a35e:	ee10 0a10 	vmov	r0, s0
 800a362:	4629      	mov	r1, r5
 800a364:	f7f6 f958 	bl	8000618 <__aeabi_dmul>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	4620      	mov	r0, r4
 800a36e:	4629      	mov	r1, r5
 800a370:	f7f5 ff9c 	bl	80002ac <__adddf3>
 800a374:	4604      	mov	r4, r0
 800a376:	460d      	mov	r5, r1
 800a378:	ec45 4b10 	vmov	d0, r4, r5
 800a37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a380:	2d00      	cmp	r5, #0
 800a382:	ee10 0a10 	vmov	r0, s0
 800a386:	4621      	mov	r1, r4
 800a388:	dc0f      	bgt.n	800a3aa <__ieee754_sqrt+0x62>
 800a38a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a38e:	4330      	orrs	r0, r6
 800a390:	d0f2      	beq.n	800a378 <__ieee754_sqrt+0x30>
 800a392:	b155      	cbz	r5, 800a3aa <__ieee754_sqrt+0x62>
 800a394:	ee10 2a10 	vmov	r2, s0
 800a398:	4620      	mov	r0, r4
 800a39a:	4629      	mov	r1, r5
 800a39c:	f7f5 ff84 	bl	80002a8 <__aeabi_dsub>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	f7f6 fa62 	bl	800086c <__aeabi_ddiv>
 800a3a8:	e7e4      	b.n	800a374 <__ieee754_sqrt+0x2c>
 800a3aa:	151b      	asrs	r3, r3, #20
 800a3ac:	d073      	beq.n	800a496 <__ieee754_sqrt+0x14e>
 800a3ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a3b2:	07dd      	lsls	r5, r3, #31
 800a3b4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a3b8:	bf48      	it	mi
 800a3ba:	0fc8      	lsrmi	r0, r1, #31
 800a3bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a3c0:	bf44      	itt	mi
 800a3c2:	0049      	lslmi	r1, r1, #1
 800a3c4:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a3c8:	2500      	movs	r5, #0
 800a3ca:	1058      	asrs	r0, r3, #1
 800a3cc:	0fcb      	lsrs	r3, r1, #31
 800a3ce:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a3d2:	0049      	lsls	r1, r1, #1
 800a3d4:	2316      	movs	r3, #22
 800a3d6:	462c      	mov	r4, r5
 800a3d8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a3dc:	19a7      	adds	r7, r4, r6
 800a3de:	4297      	cmp	r7, r2
 800a3e0:	bfde      	ittt	le
 800a3e2:	19bc      	addle	r4, r7, r6
 800a3e4:	1bd2      	suble	r2, r2, r7
 800a3e6:	19ad      	addle	r5, r5, r6
 800a3e8:	0fcf      	lsrs	r7, r1, #31
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a3f0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a3f4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a3f8:	d1f0      	bne.n	800a3dc <__ieee754_sqrt+0x94>
 800a3fa:	f04f 0c20 	mov.w	ip, #32
 800a3fe:	469e      	mov	lr, r3
 800a400:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a404:	42a2      	cmp	r2, r4
 800a406:	eb06 070e 	add.w	r7, r6, lr
 800a40a:	dc02      	bgt.n	800a412 <__ieee754_sqrt+0xca>
 800a40c:	d112      	bne.n	800a434 <__ieee754_sqrt+0xec>
 800a40e:	428f      	cmp	r7, r1
 800a410:	d810      	bhi.n	800a434 <__ieee754_sqrt+0xec>
 800a412:	2f00      	cmp	r7, #0
 800a414:	eb07 0e06 	add.w	lr, r7, r6
 800a418:	da42      	bge.n	800a4a0 <__ieee754_sqrt+0x158>
 800a41a:	f1be 0f00 	cmp.w	lr, #0
 800a41e:	db3f      	blt.n	800a4a0 <__ieee754_sqrt+0x158>
 800a420:	f104 0801 	add.w	r8, r4, #1
 800a424:	1b12      	subs	r2, r2, r4
 800a426:	428f      	cmp	r7, r1
 800a428:	bf88      	it	hi
 800a42a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a42e:	1bc9      	subs	r1, r1, r7
 800a430:	4433      	add	r3, r6
 800a432:	4644      	mov	r4, r8
 800a434:	0052      	lsls	r2, r2, #1
 800a436:	f1bc 0c01 	subs.w	ip, ip, #1
 800a43a:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a43e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a442:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a446:	d1dd      	bne.n	800a404 <__ieee754_sqrt+0xbc>
 800a448:	430a      	orrs	r2, r1
 800a44a:	d006      	beq.n	800a45a <__ieee754_sqrt+0x112>
 800a44c:	1c5c      	adds	r4, r3, #1
 800a44e:	bf13      	iteet	ne
 800a450:	3301      	addne	r3, #1
 800a452:	3501      	addeq	r5, #1
 800a454:	4663      	moveq	r3, ip
 800a456:	f023 0301 	bicne.w	r3, r3, #1
 800a45a:	106a      	asrs	r2, r5, #1
 800a45c:	085b      	lsrs	r3, r3, #1
 800a45e:	07e9      	lsls	r1, r5, #31
 800a460:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a464:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a468:	bf48      	it	mi
 800a46a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a46e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a472:	461c      	mov	r4, r3
 800a474:	e780      	b.n	800a378 <__ieee754_sqrt+0x30>
 800a476:	0aca      	lsrs	r2, r1, #11
 800a478:	3815      	subs	r0, #21
 800a47a:	0549      	lsls	r1, r1, #21
 800a47c:	2a00      	cmp	r2, #0
 800a47e:	d0fa      	beq.n	800a476 <__ieee754_sqrt+0x12e>
 800a480:	02d6      	lsls	r6, r2, #11
 800a482:	d50a      	bpl.n	800a49a <__ieee754_sqrt+0x152>
 800a484:	f1c3 0420 	rsb	r4, r3, #32
 800a488:	fa21 f404 	lsr.w	r4, r1, r4
 800a48c:	1e5d      	subs	r5, r3, #1
 800a48e:	4099      	lsls	r1, r3
 800a490:	4322      	orrs	r2, r4
 800a492:	1b43      	subs	r3, r0, r5
 800a494:	e78b      	b.n	800a3ae <__ieee754_sqrt+0x66>
 800a496:	4618      	mov	r0, r3
 800a498:	e7f0      	b.n	800a47c <__ieee754_sqrt+0x134>
 800a49a:	0052      	lsls	r2, r2, #1
 800a49c:	3301      	adds	r3, #1
 800a49e:	e7ef      	b.n	800a480 <__ieee754_sqrt+0x138>
 800a4a0:	46a0      	mov	r8, r4
 800a4a2:	e7bf      	b.n	800a424 <__ieee754_sqrt+0xdc>
 800a4a4:	7ff00000 	.word	0x7ff00000

0800a4a8 <matherr>:
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	4770      	bx	lr

0800a4ac <_init>:
 800a4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ae:	bf00      	nop
 800a4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4b2:	bc08      	pop	{r3}
 800a4b4:	469e      	mov	lr, r3
 800a4b6:	4770      	bx	lr

0800a4b8 <_fini>:
 800a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ba:	bf00      	nop
 800a4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4be:	bc08      	pop	{r3}
 800a4c0:	469e      	mov	lr, r3
 800a4c2:	4770      	bx	lr
